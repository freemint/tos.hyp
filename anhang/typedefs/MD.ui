!iflang [english]

!begin_node Memory Descriptor (MD) in TOS in TOS
!label Memory management in TOS
!label TOS, Memory management in

!begin_verbatim
typedef struct md
{
    struct md *m_link;      /* Pointer to next MD         */
    int32_t      m_start;   /* Start address of the block */
    int32_t      m_length;  /* Length of the block        */
    BASEPAGE  *m_own;       /* Pointer to the basepage    */
} MD;
!end_verbatim

(!B)Note:(!b) The component (!I)m_own(!i) here points to the basepage of the process
to which the memory block belongs.

These structures are administered in the internal memory management
of (!nolink [TOS]) (but (!I)not(!i) of MagiC!). These descriptors, as far as they are
used, hang in three memory lists, namely for free blocks, occupied
blocks and for the next block to be occupied (mem_rover). With the
mem_rover concept one attempts to achieve that consecutive Malloc
calls reserve consecutive memory if possible (this has been described
as an error already elsewhere). This is intended to reduce memory
segmentation.

(!B)This idea is unusable if several programs are running simultaneously
and call Mallocs alternately, however(!b). The concept implemented by
Atari has the advantage that it is not sensitive to programs that run
amuck, since the MDs lie is system memory, far away from user memory.
A known disadvantage of the described concept is that only a very
restricted number of (!nolink [Malloc]) calls are possible, since every call
swallows an MD of the limited system memory; this is also massively
burdened by opened folders and files. A further disadvantage of the
(!nolink [TOS]) memory management: If a program overspills a memory block, i.e.
writes past its end, then this generally passes completely unnoticed.

Specially in multitasking systems the danger of an overwritten memory
block is very much higher than in (!nolink [TOS]). Furthermore, the number of
memory blocks required, as well as those for folders (each program has
its own files and standard directories) is appreciably higher. For
these resons (!nolink [MagiC]) has a completely different concept; in that there
is only one memory list whose pointers point to the first MCB.

See also:
About the GEMDOS ~  MCB  ~ MPB ~
Memory management ~  themd
!end_node

!else

!begin_node Memory-Deskriptor (MD)
!label Speicherverwaltung in TOS
!label TOS, Speicherverwaltung in

!begin_verbatim
typedef struct md
{
    struct md *m_link;      /* Zeiger auf nÑchsten MD    */
    int32_t      m_start;   /* Anfangsadresse des Blocks */
    int32_t      m_length;  /* LÑnge des Blocks          */
    BASEPAGE  *m_own;       /* Zeiger auf die Basepage   */
} MD;
!end_verbatim

(!B)Hinweis:(!b) Die Komponente (!I)m_own(!i) zeigt dabei auf die Basepage
des Prozesses, dem der Speicherblock gehîrt.

Diese Strukturen werden in der internen Speicherverwaltung von TOS (aber
(!I)nicht(!i) von MagiC!) verwaltet. Diese Deskriptoren, soweit benutzt,
hÑngen in drei Speicherlisten, und zwar fÅr freie Blîcke, belegte Blîcke und
fÅr den nÑchsten zu belegenden Block (mem_rover). Mit dem mem_rover-Konzept
sollte erreicht werden, daû aufeinanderfolgende Malloc-Aufrufe mîglichst
aufeinanderfolgenden Speicher anfordern (wurde an anderer Stelle schon als
Fehler bezeichnet). Damit sollte die Segmentierung verringert werden.

(!B)Diese Idee ist jedoch unbrauchbar, wenn mehrere Programme gleichzeitig
laufen und abwechselnd Mallocs machen(!b). Das von Atari implementierte
Konzept hat den Vorteil, daû es unempfindlich gegen amoklaufende Programme
ist, da die MDs im Systemspeicher liegen, weit weg vom Benutzerspeicher. Ein
bekannter Nachteil des beschriebenen Konzepts ist, daû nur eine sehr
begrenzte Anzahl von (!nolink [Malloc])-Aufrufen mîglich sind, da jeder Aufruf einen MD
des begrenzten Systemspeichers aufzehrt; dieser wird auûerdem noch massiv
von geîffneten Ordnern und Dateien belastet. Ein weiterer Nachteil der
Speicherverwaltung des TOS: Wenn ein Programm einen Speicherblock Åberlaufen
lÑût, d.h. Åber dessen Ende hinausschreibt, bleibt dies i.a. vîllig
unbemerkt.

Besonders im Multitaskingsystem ist die Gefahr eines Åberschriebenen
Speicherblocks ungleich hîher als im TOS. Ferner ist die Anzahl der
benîtigten Speicherblîcke sowie auch die der Ordner (jedes Programm hat
eigene Dateien und Standardverzeichnisse) wesentlich hîher. Aus diesem Grund
hat (!nolink [MagiC]) ein vîllig anderes Konzept; dort gibt es nur noch eine
Speicherliste deren Zeiger auf den ersten MCB zeigt.

Querverweis:
GEMDOS ~  MCB  ~ MPB ~
Speicherverwaltung ~  themd
!end_node

!endif
