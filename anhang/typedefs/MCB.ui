!iflang [english]

!begin_node Memory-Control-Block (MCB) in MagiC
!label Memory management in MagiC
!label MagiC, Memory management in
!label MCB

!begin_verbatim
typedef struct
{
    int32_t mcb_magic;        /* 'ANDR' or 'KROM' (last)       */
    int32_t mcb_len;          /* Nett length                   */
    int32_t mcb_owner;        /* Pointer to PD structure       */
    int32_t mcb_prev;         /* Previous block, or NULL       */
    int8_t mcb_data[0];
} MCB;
!end_verbatim

(!B)Note:(!b) The component (!I)mcb_magic(!i) has the value 'KROM' if no futher MCB
follows, else the value 'ANDR'. In the latter case the next MCB lies
(!I)mcb_len(!i) bytes behind the currrent MCB. The list is chained
backwards with (!I)mcb_prev(!i) which considerably speeds up many operations.

With all memory operations the component (!I)mcb_magic(!i) is always checked,
and if an error is found the system is halted immediately. For a halt
due to a memory error the address of the faulty MCB as well as the
data (4 LONGwords) are output. Subsequently one is asked on which
!label Core dump
drive one would like a (!B)core dump(!b) to be saved. If one specifies
a valid drive, then the whole ST memory from 0 to phystop is written
to the root directory of the specified drive, and is assigned the
!label Core dump, Name for
name '_sys_'. The file, depending on the ST model, can be up to 4 or
even 16 MB long, of course.

Memory-resident programs (terminating themselves with Ptermres) now
work - unlike earlier - in a way that the blocks are (!I)not(!i) released,
all MCBs remain intact and continue to be used (each time one clicks
in the menu-bar the free memory is output, for which the whole list
is run through once and during this all MCBs are checked). Those who
wish to do so can therefore release memory-resident programs (or also
parts of them) subsequently.

See also:
GEMDOS  ~ MagiC ~  (!link [MD][Memory Descriptor (MD!) in TOS]) ~
Memory management
!end_node

!else

!begin_node Memory-Control-Block (MCB) in MagiC
!label Speicherverwaltung in MagiC
!label MagiC, Speicherverwaltung in
!label MCB

!begin_verbatim
typedef struct
{
    int32_t mcb_magic;        /* 'ANDR' oder 'KROM' (letzter)    */
    int32_t mcb_len;          /* NettolÑnge                      */
    int32_t mcb_owner;        /* Zeiger auf PD-Struktur          */
    int32_t mcb_prev;         /* vorh. Block oder NULL           */
    int8_t mcb_data[0];
} MCB;
!end_verbatim

(!B)Hinweis:(!b) Die Komponente (!I)mcb_magic(!i) besitzt den Wert 'KROM',
falls kein weiterer MCB folgt, und anderenfalls den Wert 'ANDR'. Im
letzteren Fall liegt der nÑchste MCB (!I)mcb_len(!i) Bytes hinter dem
aktuellen MCB. Die Liste ist per (!I)mcb_prev(!i) rÅckwÑrts verkettet, was
viele Operationen erheblich beschleunigt.

!label core dump
!label Systemauszug (core dump)
!label core dump, Name fÅr
Bei allen Speicheroperationen wird immer die Komponente (!I)mcb_magic(!i)
ÅberprÅft, und das System bei einem Fehler sofort angehalten. Beim Anhalten
aufgrund eines Speicherfehlers werden die Adresse des fehlerhaften MCB sowie
die Daten (4 Langworte) ausgegeben. Anschlieûend wird man gefragt, auf
welches Laufwerk man einen (!B)Systemauszug (core dump)(!b) speichern
mîchte. Gibt man ein gÅltiges Laufwerk an, so wird der gesamte ST-Speicher
von 0 bis phystop auf das Wurzelverzeichnis des angegebenen Laufwerks
geschrieben, und zwar unter dem Namen "_sys_". Die Datei kann natÅrlich je
nach ST-Modell bis zu 4 oder gar 16 MB lang werden.

Speicherresidente Programme (beenden sich Åber Ptermres) arbeiten jetzt im
Gegensatz zu frÅher einfach nur so, daû die Blîcke (!I)nicht(!i) freigegeben
werden, alle MCBs bleiben intakt und werden auch weiterhin benutzt
(jedesmal, wenn man in die MenÅleiste klickt, wird der freie Speicher
ausgegeben, dazu wird die gesamte Liste einmal durchlaufen und dabei alle
MCBs ÅberprÅft).  Wer mîchte, kann also speicherresidente Programme (oder
auch Teile davon) nachtrÑglich freigeben.

Querverweis:
GEMDOS  ~ MagiC ~  (!link [MD][Memory-Deskriptor (MD!) in TOS]) ~
Speicherverwaltung
!end_node

!endif
