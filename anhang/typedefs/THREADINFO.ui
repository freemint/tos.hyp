!iflang [english]

!begin_node THREADINFO

!begin_verbatim
typedef struct
{
   int32_t cdecl (*proc)(void *par);
   void          *user_stack;
   uint32_t      stacksize;
   int16_t       mode;
   int32_t       res1;
} THREADINFO;
!end_verbatim

(!B)Note:(!b) If the component (!I)user_stack(!i) is NULL, then the system will
create the stack itself. When the thread terminates, the system will
release the stack again automatically. The component (!I)stacksize(!i) must
always be specified so that the system can set the stack pointer of
the thread to the end of the stack. The supervisior-stack is set by
the operating system, so that its size cannot be influenced.

The components (!I)mode(!i) and (!I)res1(!i) are reserved for future purposes, so
they should be set to the value 0 or 0L. In Solaris 2.x, for instance,
one can arrest the thread up to the final start with them. The started
thread executes the function (!I)proc(!i), which is passed as a parameter to
the component (!I)par(!i) (on the stack). The CPU registers d0-d2 and a0-a2
may be altered by the function.

See also:
Threads in MagiC ~  shel_write ~
Sample code
!end_node

!else

!begin_node THREADINFO

!begin_verbatim
typedef struct
{
   int32_t cdecl (*proc)(void *par);
   void          *user_stack;
   uint32_t      stacksize;
   int16_t       mode;
   int32_t       res1;
} THREADINFO;
!end_verbatim

(!B)Hinweis:(!b) Ist die Komponente (!I)user_stack(!i) NULL, so legt das
System selbst den Stack an. Wenn der Thread terminiert, wird der Stack
automatisch vom System wieder freigegeben. Die Komponente (!I)stacksize(!i)
ist in jedem Fall anzugeben, damit das System den Stackpointer des Threads
auf das Ende des Stacks setzen kann. Der Systemstapel (Supervisior-Stack)
wird vom Betriebssystem selbst festgelegt, so daû dessen Grîûe nicht
beeinfluût werden kann.

Die Komponenten (!I)mode(!i) und (!I)res1(!i) sind fÅr zukÅnftige Zwecke
reserviert, und sollten deshalb auf den Wert 0 bzw. 0L gesetzt werden. In
Solaris 2.x kann man damit z.B. einen Thread bis zum endgÅltigen Start
anhalten. Der gestartete Thread fÅhrt die Funktion (!I)proc(!i) aus, der als
Parameter die Komponente (!I)par(!i) (auf dem Stack) Åbergeben wird. Die
CPU-Register d0-d2 und a0-a2 dÅrfen von der Funktion verÑndert werden.

Querverweis:
Threads in MagiC ~  shel_write ~
(!link [Beispiel-Code][Threads, Beispiel-Code zu])
!end_node

!endif
