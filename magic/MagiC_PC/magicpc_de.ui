!begin_node MagiC PC-Schnittstelle
!html_name emulators_magicpc
!ignore_subtoc

MagiC PC kennt zwei Schnittelstellen mit denen man Funktionen des Windowssystem aufrufen kann.

!begin_itemize
 !item  mec0 (MPS) Schnittstelle diese dient dazu beliebigen (selbstgeschriebenen)
        Windowscode auszufÅhren. Dieser wird in einer DLL abgelegt, und Åber
        illegale Opcodes aus MagiC PC heraus aufgerufen.

 !item mec1 Schnittstelle hiermit kann ein vorgegebenes Set an (!nolink [Spezialfunktionen])
       aufgerufen werden.
!end_itemize

!begin_node mec0 (MPS) Schnittstelle

(!U)0. Allgemeines(!u)

MPS = Magic_Programmier_Schnittstelle


Dateien des Demobeispieles:
!begin_xlist [mps_base.def ] !compressed
!item [mps_base.def]   Die Exportliste der DLL, NICHT éNDERN
!item [mps_base.h]  Definition der MPS_Schnittstelle, NICHT éNDERN
!item [mps_base.cpp]   Basis-Funktionen der DLL, NICHT éNDERN
!item [mps_demo.h]  Definitionen fÅr die Demo-DLL
!item [mps_demo.cpp]   Die MPS_Funktionen der Demo-DLL

!item [testmps.s]   Motorola - Beispiel zum Aufruf der MPS-Funktionen des Demo-Beispieles
!end_xlist

Um eigene MPS_DLLs zu entwickeln, verwenden Sie bitte (!nolink [mps_base.def]), (!nolink [mps_base.h]) und
(!nolink [mps_base.cpp]) unverÑndert. Zu Ñndern/ergÑnzen sind (!nolink [mps_demo.h]) und
(!nolink [mps_demo.cpp]).
Insbesondere wÑhlen Sie bitte eine eigene DLL_ID in mps_demo.h zur Unterscheidung
von anderen MPS_DLLs.


(!U)I. Konzept(!u)

Windowsseitig kînnen Åber dynamische Bibliotheken (DLLs) beliebig viele
Funktionen (im folgenden MPS_Funktionen genannt) eingerichtet werden, die
innerhalb von MagiC_PC (motorolaseitig) aufgerufen werden kînnen.

In der Startphase versucht MagiC_PC, alle DLLs im Unterverzeichnis MPS zu laden
und zu starten. Dazu ruft MagiC PC drei von der DLL zu exportierende
Funktionen auf (in dieser Reihenfolge):
!begin_enumerate
!item mps_get_type():  muû 0x4701 liefern!
!item  mps_get_functionlist(...): ermittelt DLL_ID und MPS_Funktionsliste der DLL.
!item  mps_magicinfo: teilt MagiC PC-eigene Daten/Funktionen mit, die die DLL bei
   Bedarf verwenden kann.
!end_enumerate

Alle in 2) angemeldeten Funktionen kînnen Åber spezielle Opcodes motorola-seitig
aufgerufen werden. NÑheres zum Aufruf siehe IV.


(!U)II. Zu exportierende Funktionen der DLL ("Basisfunktionen")(!u)


Eine MPS-DLL muû genau 3 C-Funktionen unter fester Ordinalzahl exportieren:
(auch Basisfunktionen genannt)
(siehe mfp_base.def, mfp_base.cpp, mfp_base.h)

!begin_itemize
!item @101: int mps_get_type()

   Zweck: Dient der RÅckversicherung, ob tatsÑchlich MPS_DLL erwischt.
   !! RÅckgabewert: 0x4701 !!

!item @102: int mps_get_functionlist(DWORD *mps_dll_id,MPS_fuptr **p_funktionsliste);

   Zweck: MagiC PC mîchte DLL_ID und MPS_Funktionsliste wissen.

   RÅckgabewerte: (!nl)
   *mps_ddl_id:        DLL_ID (4 Bytes, DLL_spezifisch zu wÑhlen!) (!nl)
   *p_funktionsliste:  Zeiger auf Liste der MPS_Funktionen.  (!nl)
   return: 1: alles klar

!item @103: void mps_magicinfo(MPS_magicinfo *is);

   Zweck: MagiC PC teilt eigene Infos / Funktionspointer mit, die die DLL
   verwenden darf:
!label MPS_magicinfo
!begin_verbatim
   typedef struct {
    DWORD sizeof_str;               // Grîûe von MPS_magicinfo
    DWORD magic_version;            // z.B. 0x010001
    DWORD magic_date;               // z.B. 19960815      (aufsteigend)
    BYTE  is_demo;                  // Ist demoversion?
    BYTE  uu1, uu2, uu3;            // noch unbenutzt, 0

    BYTE *(*intel_adr)(DWORD motadr);   // Adressumrechnung Motorola -> Intel
    BYTE *(*intel_ptr)(DWORD motptr);   // Pointer-Umrechnung Motorola -> Intel (NULL bleibt NULL!)

    WORD (*swap_word)(WORD w);      // Ein Word swappen
    DWORD (*swap_long)(DWORD dw);   // Ein Langwort swappen
    } MPS_magicinfo;
!end_verbatim
   Die Adressumrechnungen ergeben NULL, falls motadr bzw motptr ungÅltig ist.
!end_itemize

(!U)III. Die frei definierbaren MPS_Funktionen einer DLL:(!u)

   MPS_Funktionen haben grundsÑtzlich die Form

      void funktion_blabla( MPS_motregs *motregs )

   motregs zeigt dabei auf die Liste der Motorola-Register d0-a7.
   Der Inhalt der Register ist schon im richtigen Intel-ByteSex.
   Die Motorola-Register dÅrfen auch mit neuen Werten beschrieben werden.

   Die DLL Åbergibt mit mps_get_functionlist die Liste der Adressen aller
   solcher MPS_Funktionen. Die Funktionsnummern entsprechen
   der Position der Funktion innerhalb der Liste. Soll eine Nummer freibleiben,
   ist als Adresse 0xffffffff (= -1) zu Åbergeben. Siehe auch mps_demo.cpp.


(!U)IV. Motorola-seitiger Aufruf(!u)

  MPS_Funktionen werden durch einen 8-Byte-Opcode motorola-seitig aufgerufen:

!begin_verbatim
    dc.w    $4fbf       * 2 Bytes: nicht Ñndern
    dc.l    DLL_ID      * 4 Bytes: DLL-spezifische DLL_ID
    dc.w    Fkt_Nr.     * 2 Bytes: Funktionsnummer.
!end_verbatim

  Die DLL_ID ist die Åber mps_get_functionlist mitgeteilte DLL_ID (4 Bytes!).
  Funktionsnummer ist die Position der Funktion in der Åber
  mps_get_functionlist mitgeteilten Funktionsliste (ZÑhlung beginnt bei 0).


(!U)V. Sonstiges(!u)
!begin_enumerate
!item Jede DLL sollte eine individuelle DLL_ID verwenden, um Konflikte zwischen mehreren
   DLLs zu vermeiden (siehe mps_demo.h).
   DLL_IDs mit gesetztem Bit 31 sind fÅr uns (Application Systems) bzw. fÅr zugeteilte
   IDs reserviert. Bitte wÑhlen Sie deshalb keine DLL_ID mit  gesetztem Bit 31!
   Falls wir Ihnen eine reservierte DLL_ID zuteilen sollen, setzen Sie sich bitte mit
   Herrn Hoffmann von Application Systems in Verbindung.

   Folgende DLL IDs sind vergeben:
   !begin_table [l|l|l]
   DLL ID !! Programmname !! Author
   !hline
   0x003f5c66 !! MPCTime !! Robert Weiû
   0x2053434B !! MPCSTiK !! Dan Ackerman
   0x21342812 !! Draconis Windows Sockets !!
   0x44594a01 !! In2Cat  !! Dimitri Junker
   0x44594a02 !! Win_Lnk !! Dimitri Junker
   0x50475752 !! MPC_POWR !! Emanuel Welter
   !end_table

!item Achten Sie auf die Verschiebung des Adressraumes!! (!nl)
   Wollen Sie eine Motorola-Adresse DLL-seitig verwenden, ist zur Konvertierung
   intel_adr(..) bzw.
   intel_ptr(..)
   aufzurufen (siehe MPS_magicinfo in mps_base.h).
   (!nolink [Adressen]) aus dem DLL-Adressraum kînnen motorola-seitig NICHT verwendet werden!

!item Achten Sie auf den unterschiedlichen Byte-Sex zwischen Motorola- und Intel-Prozessor.
   Worte und Langworte aus dem Motorola-Adressraum mÅssen geswappt werden, damit sie
   in der DLL richtig vorliegen. Beim eventuellen zurÅckschreiben ist wieder zu swappen.
   Sie kînnen dazu die Funktionen
   swap_word(..) bzw.
   swap_long(..)
   aufrufen (siehe MPS_magicinfo in mps_base.h).
   Aber: Die Elemente von MPS_motregs (d0-a7) liegen schon intelmÑûig vor und mÅssen
   nicht mehr geswappt werden.
!end_enumerate


!begin_node mps_base.h
!begin_verbatim
; ========================================================
; Export-Definitionen fÅr MPS MagiC_PC Progr.Schnittstelle    FS 15.08.96
; ========================================================
;
; !! NICHT éNDERN !!
; ==================
EXPORTS
   mps_get_type         @101
   mps_get_functionlist @102
   mps_magicinfo        @103
!end_verbatim
!end_node

!begin_node mps_base.def
!begin_verbatim
// Tabsize: 3

// Letzte énderung:  15.08.96
// Autor:   FS

// ------------------------------------------------------------------------------
//
// Die MagiC PC - Programmier-Schnittstelle
//
// mps_base.h: Basis-Include     !! UNVERéNDERT öBERNEHMEN !!
//                               ======================

#ifdef __cplusplus
   extern "C" {
#endif

/* =========================================================================
   Die vom Anwender frei definierbaren DLL-Funktionen haben die Form
   void mps_funktion(MPS_motregs *r),
   wobei r ein Pointer auf die 16 Motorola-Register darstellt, also:
*/
   typedef struct {                 // MPS_motregs = Die Motorola-Register
     long d0,d1,d2,d3,d4,d5,d6,d7;
     long a0,a1,a2,a3,a4,a5,a6,a7;
     } MPS_motregs;
                                    // MPS_fuptr = Pointer auf eine MPS_Funktion:
   typedef void (*MPS_fuptr)(MPS_motregs *);


/* ============================================================
   Der DLL-Basisfunktion mps_info wird der folgende Infoblock
   MPS_infostr mitgegeben:
*/
   typedef struct {
     DWORD sizeof_str;           // Grîûe von MPS_infostr
     DWORD magic_version;        // z.B. 0x010001
     DWORD magic_date;           // z.B. 19960815     (aufsteigend)
     BYTE  is_demo;              // Ist demoversion?
     BYTE  uu1, uu2, uu3;        // noch unbenutzt, 0

     BYTE *(*intel_adr)(DWORD motadr); // Adressumrechnung Motorola -> Intel
     BYTE *(*intel_ptr)(DWORD motptr); // Pointer-Umrechnung Motorola -> Intel (NULL bleibt NULL!)

     WORD (*swap_word)(WORD w);           // Ein Word swappen
     DWORD (*swap_long)(DWORD dw);        // Ein Langwort swappen
     } MPS_magicinfo;

// =============== zu exportieren sind 3 Basisfunktionen: ==================
//
   int mps_get_type();                                                        // @101
   int mps_get_functionlist(DWORD *mps_dll_id,MPS_fuptr **p_funktionsliste);  // @102
   void mps_magicinfo(MPS_magicinfo *is);                                     // @103
//
// siehe auch mps_base.cpp, mps_base.def


#ifdef __cplusplus
   }
#endif
!end_verbatim

Querverweise: MagiC PC-Schnittstelle
!end_node

!begin_node mps_base.cpp
!begin_verbatim
// Tabsize: 3

// Letzte énderung:  15.08.96
// Autor:   FS

// ------------------------------------------------------------------------------
// Demobeispiel zu MagiC PC - Programmier-Schnittstelle (MPS)
//
// Teil 1: Basisfunktionen, UNVERéNDERT Åbernehmen!
// =======
//
// ------------------------------------------------------------------------------

#include "windows.h"
#include "mps_base.h"
#include "mps_demo.h"

//
// Die folgenden 3 Basisfunktionen mÅssen von der DLL exportiert werden:
//


// 1) Basisfuktion @101: Typabfrage
// ---------------------
   int mps_get_type()
// ----------------
 {
   return(0x4701);         // muû diesen Wert zurÅckgeben
 }

// 2) Basisfuktion @102: MagiC PC fordert Id und Funktionsliste an.
// ---------------------
   int mps_get_functionlist(DWORD *mps_dll_id,MPS_fuptr **p_funktionsliste)
// ------------------------
 {
   *mps_dll_id = DLL_ID;               // benutzerdefinierte ID, siehe mps_demo.h
   *p_funktionsliste = my_funclist;    // Zeiger auf Funktionsliste eintragen
   return(1);
 }

// 3) Basisfuktion @103: MagiC PC Åbergibt MPS_magicinfo an die DLL
// ---------------------
   void mps_magicinfo(MPS_magicinfo *is)
// -------------
 {
   m_info = *is;                    // Merken
 }

//
// ENDE Basisfunktionen -------------------------------------------------------
//

!end_verbatim

Querverweise: MagiC PC-Schnittstelle
!end_node

!begin_node mps_demo.h
!begin_verbatim
// Tabsize: 3

// Letzte énderung:  15.08.96
// Autor:   FS

// ------------------------------------------------------------------------------
// Demobeispiel zu MagiC PC - Programmier-Schnittstelle (MPS)
//
// Teil 2: Benutzer-definierte Funktionen, DLL_ID auf eigenen Wert Ñndern !!!
// =======
//
// ------------------------------------------------------------------------------

#define DLL_ID  0x01020304             // auf eigenen Wert Ñndern.
                                       // !! Werte mit gesetztem Bit 31 reserviert fÅr Appl.Systems.
                                       // ID-Reservierung: Bei Appl.Systems (Herrn Hoffmann) anfragen!

   extern MPS_fuptr my_funclist[];     // Die Funktionsliste in der Demo-DLL

   extern MPS_magicinfo m_info;        // wird von MagiC_PC Åbernommen
!end_verbatim

Querverweise: MagiC PC-Schnittstelle
!end_node

!begin_node mps_demo.cpp
!begin_verbatim
// Tabsize: 3

// Letzte énderung:  15.08.96
// Autor:   FS

// ------------------------------------------------------------------------------
// Demobeispiel zu MagiC PC - Programmier-Schnittstelle (MPS)
//
// Teil 2: Benutzer-definierte Funktionen, frei Ñnderbar.
// =======
//
// ------------------------------------------------------------------------------

#include "windows.h"
#include "mps_base.h"
#include "mps_demo.h"

   MPS_magicinfo m_info;               // global fÅr die DLL

//
// Liste der benutzerdefinierten Funktionen (nach Bedarf Ñndern/erweitern):
// -----------------------------------------------------------------------
   static void demo_0(MPS_motregs *r);
   static void demo_1(MPS_motregs *r);
   static void demo_3(MPS_motregs *r);
   static void copy_string(MPS_motregs *r);

   MPS_fuptr my_funclist[] = {
     demo_0,                           // Demo-Funktion 0
     demo_1,                           // Demo-Funktion 1
     (MPS_fuptr) -1,                   // -1 (d.h Funktion Nummer 2 nicht definiert)
     demo_3,                           // Demo-Funktion 3
     copy_string,                      // Demo-Funktion 4
     NULL                              // !! Am Listenende ein NULL-Eintrag !!
     } ;


// *******************************************************************************
//
// Hier die benutzerdefinierten Funktionen:
// ========================================
//

// Demo_0 liefert nur in d0 den Wert 1 zurÅck:
//
   static void demo_0(MPS_motregs *r)
// ----------------------
 {
   r->d0 = 1;                       // Demo-0 setzt d0 auf 1
   return;
 }

// Demo_1 addiert die Register d1 und d2; Ergebnis nach d0:
//
   static void demo_1(MPS_motregs *r)
// ----------------------
 {
   r->d0 = r->d1 + r->d2;
   return;
 }

// Demo_3 tut gar nichts:
//
   static void demo_3(MPS_motregs *r)
// ----------------------
 {
   return;
 }

// Demo-Routine4 copy_string kopiert einen String in den Motorola-Adressraum:
//               -----------
// a0: Ziel-Adresse,
// d0: Maximalzahl der Zeichen (incl. 0)
//
   static void copy_string(MPS_motregs *r)
// -----------------------
 {
   static char string[] = "Dies ist ein Demo-Text von copy_string(..)";

   int i, nchmax;
   char *ziel;

   nchmax = (int) r->d0;
   ziel = (char *) (*m_info.intel_ptr)(r->a0);
   if (nchmax<=0 || ziel==NULL) return;         // ungÅltig?

   for (i=0; i<nchmax; i++) {
     if ((ziel[i] = string[i])==0)
       return;
     }
   ziel[nchmax-1] = 0;                          // zu lange->abschneiden
   return;
 }
!end_verbatim

Querverweise: MagiC PC-Schnittstelle

!end_node

!begin_node testmps.s
!begin_verbatim

*                                                 FS  15.08.96
*
*   =============================================================
*   Beispiel fÅr den Aufruf der MPS-Funktionen von Motorola aus
*   =============================================================
*
* Quelle Windows-seitig:
* ----------------------
* mps_base.cpp, mps_demo.cpp
*
mps_code .equ  $4fbf                   * !! NICHT éNDERN !!
DLL_ID   .equ  $01020304               * hier eigene DLL_ID eintragen

* -------------------------------------- 60 Bytes Puffer
bufsize  .equ  60
.bss
.even
buffer:   ds.w  bufsize
* --------------------------------------


*
* ------------------- Hier gehts los: ---------------------------------
*
.text
.globl _main
_main:
      moveq    #-1,d0                  * d0 auf -1 (zum Testen)

*     ===========================      * Funktion 0 (Demo_0) aufrufen:
      dc.w     mps_code                * = $4fbf
      dc.l     DLL_ID                  * = eigene DLL_ID
      dc.w     0                       * Funktionsnummer (hier 0)
*     ===========================
      cmpi.l   #1,d0                   * mÅûte 1 zurÅckliefern
      bne      fertig

* Beispiel fÅr Aufruf mit Parametern (copy_string)
* ----------------------------------
      movea.l  #buffer,a0              * Zeiger auf Puffer fÅr String
      move.l   #bufsize,d0             * Max. StringlÑnge (incl.0-Byte).

*     ===========================      * Funktion 4 (copy_string) aufrufen:
      dc.w     mps_code                * = $4fbf
      dc.l     DLL_ID                  * = eigene DLL_ID
      dc.w     4                       * Funktionsnummer (hier 4)
*     ===========================

      bsr      put_line                * Zeile (a0) ausgeben
fertig:
      bsr      wait                    * Auf Tastendruck warten
      rts
*
* --------------------- ENDE Hauptroutine _main ------------------------
*


* ------------------------ Zeile (a0) ausgeben -----------------------
put_line:
      moveq    #13,d0
      bsr      put_char
      moveq    #10,d0
put_lnext:
      bsr      put_char
      move.b   (a0)+,d0
      bne      put_lnext
      rts

* ------------------------ Zeichen d0 ausgeben -----------------------
put_char:
      movem.l  d0-d2/a0-a2,-(sp)
      move.w   d0,-(sp)
      move.w   #2,-(sp)
      move.w   #3,-(sp)
      trap     #13
      addq.l   #6,sp
      movem.l  (sp)+,d0-d2/a0-a2
      rts

* -------------------------- auf Tastendruck warten. --------------------
wait:
      move.w   #2,-(sp)
      move.w   #2,-(sp)
      trap     #13
      addq.l   #4,sp
      rts

!end_verbatim

Querverweise: MagiC PC-Schnittstelle
!end_node
!end_node

!begin_node mec1 Schnittstelle
!begin_enumerate
!item Konzept

Die mec1-Schnittstelle ermîglicht es, im Motorola-Code von Emulator
vorgebenene Funktionen aufrufen. Sie entspricht der mec0-Schnittstelle;
die Funktionen sind jedoch nicht in einer DLL frei definierbar, sondern
schon vom Emulator vorgegeben.Aufruf:Die Funktionen werden einheitlich
durch den Opcode $43bf aufgerufen, mit nachfolgender Funktionsnummer,
also 4 Bytes GesamtlÑnge. Beispiel:

dc.w   $43bf,$0031

ruft die mec1-Funktion mit der Nummer 0x31 auf. ($43bf ist der Opcode
fÅr chk <ea>,D1, mit <ea> = 111111 binÑr, also ungÅltig).
Die Parameter-öbergabe erfolgt wie bei mec0 Åber die Motorola Register.

!item Die Funktionen
!begin_xlist [$0001 ]
  !item [$0001] long emu_version:

        !begin_table [l l]
        Parameter: !! keine
        return: !! d0: Versions-Nummer
           ~    !! d1: Versions-Datum
           ~    !! d2: Bit0: Ist Demo-Version?
        !end_table


  !item [$0002] long emu_enquire:     Ermittelt Verschiedenes.


        !begin_table [l l]
        Parameter: !! long d0: was willst Du wissen?
        return: !!long d0: Wert
        !end_table

        bisher definiert:
        !begin_table [l l]
        was: !! 1: Versionsnumemr
        ~    !! 2: Versionsdatume
        ~    !! 3: Ist Demo?
        !end_table


  !item [$0003] void emu_getexepath:
       Ermittelt vollen Pfad (incl. Laufwerk, ohne MAGIC_PC.EXE)

        !begin_table [l l]
        Parameter:!! a0: char *bufadr (Buffer)
             ~    !! d0: short nb_max (max. Byteszahl fÅr Buffer)
        !end_table


  !item [$0004] int emu_install_newvdi:

        !begin_table [l l]
        Parameter: !! a0: Byte *bufadr (neuer Inhalt von NVDI_PC.DLL)
                ~  !! d0: long nbytes  (LÑnge)
       return: !!  d0: >0: erfolgreich NVDI_PC.DLN erzeugt.
        ~      !!  Beim nÑchsten  Hochstarten wird automatisch
        ~      !!  umbenannt in NVDI_PC.DLL, wie besprochen.
        !end_table

  !item [$0010] void dw_addline: ~! ab 03.97

        Text in neuer Zeile im Debug-Fenster ausgeben

        !begin_table [l l]
        Parameter: !! a0: Zeiger auf den Text.
        !end_table

  !item [$0011] void dw_addtext:    ~! ab 03.97

        Text im Debug-Fenster ausgeben

        !begin_table [l l]
        Parameter: !! a0: Zeiger auf den Text.
        !end_table

  !item [$0011] void dw_formtxt:    ~! ab 03.97

       Text sprintf-like im Debug-Fenster ausgeben

        !begin_table [l l]
        Parameter: !! a0: Zeiger auf den Format-String
             ~     !! d0, d1, ...  zusÑtzliche Parameter, passend zu
             ~     !! dem Format-String der Formatstring entspricht
             ~     !! ungefÑhr sprintf(format,...); Stringpointer
             ~     !! sind jedoch nicht zulÑssig.
        !end_table

  !item [$0031] int printer_open         ~! ab 03.97

        printer_open îffnet den Standarddrucker und beginnt ein neues Dokument

        !begin_table [l l]
        Parameter: !! a0: char *DocName (NULL-Pointer erlaubt)
        return: !! d0>0: alles klar
            ~   !! d0<=0 Fehler
        !end_table

  !item [$0032] int printer_close            ~! ab 03.97

        printer_close beendet das zuvor geîffnete Dokument und schlieût den Drucker

        !begin_table [l l]
        Parameter: !! keine
        return: !! d0>0: alles klar
           ~    !! d0<=0 Fehler
        !end_table

  !item [$0033] int printer_write            ~! ab 03.97

        !begin_table [l l]
        Parameter: !! a0: Byte *pData;  // Zeiger auf den DatenBuffer
                   !! d0: long nBytes;  // Zahl der Bytes im Buffer
        return: !! d0: Åbertragene Bytes.
        !end_table

  !item [$0040] DWORD getTickCount           ~! ab 03.97

        !begin_table [l l]
        return: !! d0: TickCount (msec seit Start des Rechners)
        !end_table

  !item [$0041] DWORD getDrivePath           ~! ab 02.99

        Die Funktion ermittelt den Windows-Pfad fÅr ein Magic-Laufwerk.

        !begin_table [l l]
        Parameter: !! d0: DriveNr (0 fÅr A:, 1 fÅr B:, ...)
        ~          !! a0: Textbuffer fÅr den Pfad
        ~          !! d1: Grîûe des Textbuffers
        return:    !! d0: 0:  nicht gefunden,
        ~          !! ~~~ 1:  Container-Laufwerk,
        ~          !! ~~~ 2:  xfs-Laufwerk (Windows-Laufwerk)
        ~          !! ~~~ 4:  Floppy-Laufwerk
        !end_table

  !item [$0042] DWORD setClipboardDir            ~! ab 02.99

        !begin_table [l l]
        Parameter:  !! a0: char *pPath // NULL: auf Default setzen
        return:     !! d0: 1
        !end_table

        Beispiel:
        !begin_verbatim
        movea.l stringadr,a0    *
        dc.w    $43bf,$0042     * mec1,Funktion $42 aufrufen
        tst.l   d0              * -1: Fkt. nicht implementiert
        jl  nichtimplementiert
        !end_verbatim


  !item [$0043] long getMouseWheel

        !begin_table [l l]
        Parameter: !! d0.l: 1: Position nach dem Auslesen zurÅcksetzen
                   !! ~~~~~~0: Position nach dem Auslesen nicht zurÅcksetzen
        return:    !! d0.l: aktuelle Position des Mausrades
        !end_table

        Beispiel:
        !begin_verbatim
        moveq   #1,d0       * Position nach dem Auslesen zurÅcksetzen
        dc.w    $43bf,$0043 * mec1,Funktion $43 aufrufen
        tst.l   d0          * Position seit letztem zurÅcksetzen geÑndert
        je  no_action
        <d0.l verarbeiten>
        !end_verbatim


  !item [$0045] long setCompiler         ~! ab 17.06.99

        !begin_table [l l]
         Parameter: !! d0.l: Auswahl, im Moment realisert:
           ~        !! d0 = 1: Compiler ein/ausschalten:
           ~        !! -------------------------
           ~        !! d1 = 0: Compiler aus,
           ~        !! d1 = 1: Compiler ein
           ~        !! d1 = -1: Modus erfragen (Nach meinen Erfahrungen
           ~        !! ~~~~~~~~~funtioniert dies nicht, soll aber in
           ~        !! ~~~~~~~~~der 6.20 funktionieren)
         return: !! alter Modus (0 oder 1).
        !end_table
!end_xlist
!end_enumerate

!end_node

!end_node
