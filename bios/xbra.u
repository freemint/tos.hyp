!iflang [english]

!begin_node XBRA procedure
!html_name xbra_main
!label Diverting vectors

The XBRA procedure ("eXtended BRAner") is based on an idea by (!I)Moshe
Braner(!i), and should be used by all programs that redirect vectors.

The principle is that each vector-redirecting program places the 
following structure directly before its own entry address (i.e. 
just before the address to which the vector was set):

!label XBRA structure
!begin_verbatim
typedef struct
{
    int8_t  xb_magic[4];   /* "XBRA" = 0x58425241         */
    int8_t  xb_id[4];      /* ID of four ASCII characters */
    int32_t xb_oldvec;     /* Old value of the vectors    */
} XBRA;
!end_verbatim

The element (!I)xb_magic(!i) permits a positive identification of the 
XBRA structure; (!I)xb_id(!i) is the ID of the particular program that has 
redirected the vector.

With the aid of this procedure it is easy for a program to ascertain 
whether it is already (!nolink [installed]) (though this can be done also via the 
cookie jar), and to remove itself again from the vector chain. It is 
important, however, that (!B)all(!)(!b) programs adhere to this 
procedure, as otherwise the vector chain will be interrupted.

(!B)Note about (!nolink [MagiC]):(!b) Programs that hook into any of the system vectors 
should also link themselves into the etv_term vector. If the program 
terminates abnormally, the operating system will jump first via the 
(!nolink [etv_term]) vector. In such a case one can then calmly draw back from 
all changed vectors; as MagiC uses its own (!nolink [etv_term]) vector for each 
application, this cannot lead to any collisions.

The XBRA procedure has won recognition over time, so that it's now  
considered bad programming style if one does (!I)not(!i) use it.

# !label XBRA-Liste
# Um Doppelbelegungen bei den XBRA-Kennungen zu vermeiden, wird von
# Julian Reschke die sogenannte (!I)"XBRA-Liste"(!i) gefÅhrt, in der alle
# offiziell gemeldeten Kennungen eingetragen werden.

# (!B)Tip:(!b) Quelltexte fÅr die wichtigsten Funktionen im Umgang mit dem
# XBRA-Verfahren befinden sich in verschiedenen Mailboxen.

See also: Cookie jar  ~
Cookie and XBRA list ~
(!link [Reset vector][Hooking into the reset vector])

!end_node

!else

!begin_node XBRA-Verfahren
!html_name xbra_main
!label Vektoren verbiegen

Das XBRA-Verfahren ("eXtended BRAner") geht auf eine Idee von (!I)Moshe
Braner(!i) zurÅck, und sollte von allen Programmen benutzt werden, die
Vektoren verbiegen.

Das Prinzip besteht darin, daû jedes vektorverbiegende Programm direkt
vor seiner eigenen Einsprungadresse (also genau vor der Adresse
auf die der Vektor gesetzt wurde), die folgende Struktur plaziert:

!label XBRA-Struktur
!begin_verbatim
typedef struct
{
    int8_t  xb_magic[4];   /* "XBRA" = 0x58425241       */
    int8_t  xb_id[4];      /* ID aus vier ASCII-Zeichen */
    int32_t xb_oldvec;     /* alter Wert des Vektors    */
} XBRA;
!end_verbatim

Die Komponente (!I)xb_magic(!i) erlaubt eine sichere Erkennung der
XBRA-Struktur; (!I)xb_id(!i) ist die ID des jeweiligen Programms, welches
den Vektor verbiegt.

Mit Hilfe dieses Verfahrens ist es fÅr ein Programm leicht mîglich
festzustellen, ob es schon installiert ist (das geht allerdings
auch Åber den Cookie-Jar), und sich wieder aus der Vektorkette zu
entfernen. Wichtig ist jedoch, daû sich (!B)alle (!)(!b) Programme an
dieses Verfahren halten, da sonst die Vektorkette unterbrochen wird.

(!B)Hinweis zu (!nolink [MagiC]):(!b) Programme, die sich in irgendwelche
Systemvektoren hÑngen, sollten sich auch in den etv_term-Vektor
einklinken. Falls das Programm abnormal beendet wird, springt das
Betriebssystem zunÑchst Åber den (!nolink [etv_term])-Vektor. Bei dieser Gelegenheit
kann man sich dann in Ruhe aus allen verÑnderten Vektoren zurÅckziehen; da
MagiC fÅr jede Applikation einen eigenen (!nolink [etv_term])-Vektor verwendet,
kann es dabei nicht zu Kollisionen kommen.

Das XBRA-Verfahren hat sich im laufe der Zeit durchgesetzt, so
daû es mittlerweile als schlechter Programmierstil gilt, wenn man
es (!I)nicht(!i) benutzt.

# !label XBRA-Liste
# Um Doppelbelegungen bei den XBRA-Kennungen zu vermeiden, wird von
# Julian Reschke die sogenannte (!I)"XBRA-Liste"(!i) gefÅhrt, in der alle
# offiziell gemeldeten Kennungen eingetragen werden.

# (!B)Tip:(!b) Quelltexte fÅr die wichtigsten Funktionen im Umgang mit dem
# XBRA-Verfahren befinden sich in verschiedenen Mailboxen.

Querverweis: Cookie-Jar  ~
Cookie- und XBRA-Liste ~
(!link [Reset-Vektor][Einklinken in den Reset-Vektor])

!end_node

!endif
