!begin_node The system variables
!html_name bios_sysvars

As the system variables and vectors represent the lowest level of 
the operating system, application programs should access these only 
when absolutely necessary. (!B)Explicitly:(!b)

!begin_itemize !compressed
!item Do not alter any system variables that may not be altered.
!item Do not use any system variables if a function of the operating 
      system could be called instead (Example: Mfpint).
!end_itemize

The following list contains all the (!nolink [TOS]) system variables:

!begin_xlist [xy_variable~~LONG $___]
!item [Variable~~~~~Address]
Description

!label _autopath
!label System variable, _autopath
!label AUTO folder, Access path for
!item [_autopath~~~~LONG 0x4ca]
Pointer to the access path for the AUTO-folder (unused and not officially
documented).

!label _bootdev
!label System variable, _bootdev
!label Booting drive, Number of
!item [_bootdev~~~~~WORD 0x446]
Normally contains the number of the drive that was used for booting. In
addition, this variable is also used during booting to select the 
boot-drive (but usually this only works when no hard disk driver is booted). So
if one sets the variable to 1, has no boot-capable hard drive connected and
executes a reset, booting will be from drive B! 

!label _bufl
!label System variable, _bufl
!label GEMDOS buffer lists
!label Buffer lists of GEMDOS
!item [_bufl~~~~~~~~LONG 0x4b2]
Two pointers to (!nolink [GEMDOS]) buffer lists.

!label _cmdload
!label System variable, _cmdload
!label COMMAND.PRG, Launching of
!item [_cmdload~~~~~WORD 0x482]
If this register is non-0, an attempt is made to start the program COMMAND.PRG
instead of GEM. The register may be set by a program in an executable bootsector.

!label _dskbufp
!label System variable, _dskbufp
!item [_dskbufp~~~~~LONG 0x4c6]
Pointer to a 1024-byte buffer for reading and writing to floppy disks or
hard drives (e.g. at boot-attempts). The pointer is also used by the VDI.

!label _drvbits
!label System variable, _drvbits
!label Drives of the BIOS, Mounted
!item [_drvbits~~~~~LONG 0x4c2]
Bit-table for the mounted drives of the (!nolink [BIOS]). Valid are:

Bit-0 = Drive A (!nl)
Bit-1 = Drive B (!nl)
Bit-2 = Drive C (etc.)

In (!nolink [TOS]) 1.00 the variable is not cleared at a reset. Therefore custom
drivers should clear the bits they have entered at a reset; otherwise  
it could happen that drive identifiers suddenly "disappear".


!label _frclock
!label System variable, _frclock
!item [_frclock~~~~~LONG 0x466]
Similar to _vbclock, with the difference that the count is not halted by vblsem.

!label _fverify
!label System variable, _fverify
!label Verify, Perform?
!label Verify, Switch on
!label Verify, Switch off
!item [_fverify~~~~~WORD 0x444]
Determines whether the (!nolink [BIOS]) should perform a 
Verify via Rwabs when writing to floppy disks, or not. Valid are:

0 = No Verify

Normally the Verify is switched on.

!label _hz_200
!label System variable, _hz_200
!item [_hz_200~~~~~~LONG 0x4ba]
Number of 200-Hz interrupts till now.

!label _longframe
!label System variable, _longframe
!label Stackframes of CPU
!label CPU, Stackframes of
!item [_longframe~~~WORD 0x59e]
If this flag is (!I)not(!i) null, then a CPU with long stackframes
(i.e. (!I)not(!i) a 68000 type) is (!nolink [installed]). This value is of interest,
for instance, if a routine is to be hooked into an exception vector, and
the values to be examined are passed on the stack. If this variable has the
value 0 than one will find the parameters at (!B)offset 6(!b), otherwise at 
offset 8.

!label _md
!label System variable, _md
!item [_md~~~~~~~~~~LONG 0x49e]
Not officially documented, and probably also unused.

!label _membot
!label System variable, _membot
!item [_membot~~~~~~LONG 0x432]
Lower end of the free ST-compatible memory region under (!nolink [GEMDOS]) (i.e.
the start of the original TPA). The variable is used by the (!nolink [BIOS]) 
function Getmpb.

!label _memtop
!label System variable, _memtop
!item [_memtop~~~~~~LONG 0x436]
Similar to _membot the end of the free ST-compatible memory region.

!label _nflops
!label System variable, _nflops
!label Floppy disk drives, Number of
!item [_nflops~~~~~~WORD 0x4a6]
Number of mounted floppy disk drives.

!label _p_cookies
!label System variable, _p_cookies
!item [_p_cookies~~~LONG 0x5a0]
Pointer to the cookie jar.

!label _prtabt
!label System variable, _prtabt
!item [_prtabt~~~~~~WORD 0x4f0]
Flag for aborting the printing process due to a timeout. It is unused, however.

!label _shell_p
!label System variable, _shell_p
!item [_shell_p~~~~~LONG 0x4f6]
This pointer is not used by the ROM, i.e. programs that use it themselves
have to clear it in the case of a reset and at a program termination.
Normally _shell_p is set by UNIX-like shells, and points to a routine that
handles a command line. The address of the character string is passed on the
stack (4(sp)), the return of the operation will lie in register D0.

!label _sysbase
!label System variable, _sysbase
!item [_sysbase~~~~~LONG 0x4f2]
Points to a OSHEADER structure.

!label _timr_ms
!label System variable, _timr_ms
!item [_timr_ms~~~~~WORD 0x442]
Time in milliseconds that normally passes between two ticks of the system timer.
This value is also returned by the (!nolink [BIOS]) function Tickcal.

!label _v_bas_ad
!label System variable, _v_bas_ad
!label Logical screen memory, Start of
!item [_v_bas_ad~~~~LONG 0x44e]
Pointer to the starting address of the logical screen, which on an ST has to
be aligned at a 256-byte boundary. With an STE and TT this is a 2- or 8-byte
boundary respectively.

!label _vbl_list
!label System variable, _vbl_list
!label Vertical Blank Routines
!item [_vbl_list~~~~LONG 0x4ce]
List of the initial vertical blank routines. One should always access only
via _vqlqueue.

!label _vbclock
!label System variable, _vbclock
!label Vertical blanks, Number of
!item [_vbclock~~~~~LONG 0x462]
Number of vertical blanks processed since the last reset.

!label _vblqueue
!label System variable, _vqlqueue
!item [_vblqueue~~~~LONG 0x456]
Pointer to the list of pointers to the deferred vertical blank handlers.

!label bell_hook
!label System variable, bell_hook
!item [bell_hook~~~~LONG 0x5ac]
Pointer to a routine for the output of the ping-sound (system bell). The
(!nolink [BIOS]) looks after the querying of the flag automatically 
in con_term and calls this routine only when the bell should really be sounded. The 
routine is called in supervisor-mode and terminated via RTS; it may alter the 
registers D0-D2 and A0-A2. (!nolink [BIOS]) calls from "within" the routine
are permitted (from (!nolink [TOS]) 1.06 on, from KAOS 1.4.2 on).

!label colorptr
!label System variable, colorptr
!item [colorptr~~~~~LONG 0x45a]
Pointer to a colour palette, which is loaded into the ST hardware colour
registers (from address 0xffff8240 onwards) at the next vertical blank. This
prevens an unattractive flickering on the screen. If there is a null 
in colorptr, then nothing happns. After the transfer of the colour values the
pointer is cleared.

!label con_state
!label System variable, con_state
!item [con_state~~~~LONG 0x4a8]
Internal pointer for screen output routines (not officially documented). 

!label conterm
!label System variable, conterm
!label CON:, Attribute bits of the device
!item [conterm~~~~~~BYTE 0x484]
Attribute bits for the (!nolink [BIOS]) device "CON:". Valid are:
!begin_xlist [Bit-n =] !compressed
!item [Bit-0 =]
Key-click on/off
!item [Bit-1 =]
Key-repeat on/off
!item [Bit-2 =]
Bell at ouput of CTRL-G
!item [Bit-3 =]
Cause Bconin to return the current value of Kbshift in the bits 24..31.
!end_xlist

!label criticret
!label System variable, criticret
!item [criticret~~~~LONG 0x48a]
oOfficially undocumented, and probably also unused.

!label defshiftmd
!label System variable, defshiftmd
!item [defshiftmd~~~BYTE 0x44a]
Default colour graphic resolution. Switches the computer to colour
operation (after a reset, by changing of the plugs or by switching on)
into the specified resolution.

!label end_os
!label System variable, end_os
!label Operating system, End of
!item [end_os~~~~~~~LONG 0x4fa]
Pointer to the first byte not used by (!nolink [TOS])-internal
variables (i.e. the first byte of free memory).

!label etv_critic
!label System variable, etv_critic
!item [etv_critic~~~LONG 0x404]
Logical (!nolink [GEMDOS]) vector 257. Should always be set only via Setexc.

!label etv_term
!label System variable, etv_term
!item [etv_term~~~~~LONG 0x408]
Logical (!nolink [GEMDOS]) vector 258. Should always be set via Setexc. Programs that hook
into any system vectors should also hook into (!I)this(!i) vector. If the
program is terminated in an abnormal manner, the operating system jumps 
first via this vector, so that one can withdraw cleanly from all changed
vectors. As MagiC uses its (!I)own(!i) etv_term vector for each application,
collisions can (!I)not(!i) arise there.

!label etv_timer
!label System variable, etv_timer
!item [etv_timer~~~~LONG 0x400]
Logical (!nolink [GEMDOS]) vector 256. Should always be set via Setexc.

!label etv_xtra
!label System variable, etv_xtra
!item [etv_xtra~~~~~LONG 0x40c]
Reserved for the  logical vectors 259-263 of GEMDOS, and presently unused.

!label exec_os
!label System variable, exec_os
!item [exec_os~~~~~~LONG 0x4fe]
Pointer to the first byte of the text segment of the shell-program.

!label flock
!label System variable, flock
!label DMA chip, Access to
!item [flock~~~~~~~~WORD 0x43e]
If there is a non-zero value here, then you must (!I)not(!i) access the DMA
chip. So DMA device drivers must first inquire whether the DMA chip has
been blocked and set flock themselves when they start work.

!label hdv_boot
!label System variable, hdv_boot
!label Boot sector, Loading of
!item [hdv_boot~~~~~LONG 0x47a]
Vector to the routine for loading the boot sector. This routine is used by the
(!nolink [BIOS]) to establish whether a boot-sector is present and 
establish whether there is a boot sector and if so, whether it is executable.

!label hdv_bpb
!label System variable, hdv_bpb
!label BPB, Ascertaining the
!item [hdv_bpb~~~~~~LONG 0x472]
Vector to routine that establishes the BPB of a (!nolink [BIOS]) drive. The
device number is passed on the stack (4(sp)).

!label hdv_init
!label System variable, hdv_init
!item [hdv_init~~~~~LONG 0x46a]
Vector to the initialisation routines for the floppy disk drives. It is read
out before reading the boot sectors, and hence can be altered only by
reset-resident programs or ROM-modules. The tasks include:
!begin_itemize !compressed
!item Initialisation of the diskette drives (_nflops is set accordingly).
!item Transfer of seekrate to the internal variables of the (!nolink [BIOS]).
!end_itemize

!label hdv_mediach
!label System variable, hdv_mediach
!label Media-change status, Establishment of
!item [hdv_mediach~~LONG 0x47e]
Vector to routine for establishing the media-change status of a
(!nolink [BIOS]) drive. The (!nolink [BIOS]) device number is passed
on the stack (4(sp)).

!label hdv_rw
!label System variable, hdv_rw
!item [hdv_rw~~~~~~~LONG 0x476]
Vector to the routine for reading and writing of blocks to (!nolink [BIOS])
drives. The same parameters are passed on the stack as for
Rwabs (starting with 4(sp); rwflag).

!label kcl_hook
!label System variable, kcl_hook
!label Key-clicks, Sound for
!item [kcl_hook~~~~~LONG 0x5b0]
Pointer to a routine for the output of the key-click sound. The
(!nolink [BIOS]) itself serves for the inquiry of the flag in con_term
and calls this routine only when the sound is to be issued. The routine is
called in supervisor mode, terminated via RTS, and may alter the registers
D0-D2 and A0-A2; it should not take up too much time. (From  (!nolink [TOS])
1.06 on, from KAOS 1.4.2 on)

!label memcntrl
!label System variable, memcntrl
!item [memcntrl~~~~~BYTE 0x424]
Contains the lowest four bits of the memory (!nolink [control]) register (0xffff8001) (!nl)
Some known values are:
!begin_table [l|l] 
Memory size !! Value
!hline
128 K         !! 0
512 K         !! 4
256 K (2 banks) !! 0
1 MB          !! 5
!end_table

!label memval2
!label System variable, memval2
!item [memval2~~~~~~LONG 0x43a]
Should hold the magical value 0x237698aa after a successful cold start. If
both memval2 as well as memvalid have the required value and from
(!nolink [TOS]) 1.02 on memval3 as well), then at the next reset only a 
warm start will be initiated.

!label memval3
!label System variable, memval3
!item [memval3~~~~~~LONG 0x51a]
See also memval and memval2. In this case the magical value is 0x5555aaaa.
(From (!nolink [TOS]) 1.02 on)

!label memvalid
!label System variable, memvalid
!item [memvalid~~~~~LONG 0x420]
Should contain the magical value 0x752019f3.

!label nvbls
!label System variable, nvbls
!item [nvbls~~~~~~~~WORD 0x454]
Number of entries that _vblqueue points to. Identical with the maximum number
of co!-residentally installable vertical blank routines (default value: 8).

!label palmode
!label System variable, palmode
!label TV standard, NTSC
!label TV standard, PAL
!item [palmode~~~~~~WORD 0x448]
Tells the Atari the television mode. The following apply:

0 = NTSC mode (60 Hz) (!nl)
1 = PAL mode~ (50 Hz)

In practice this system variable is ignored. 
A change of the picture repetition frequency 
is only possible via the corresponding hardware registers.

!label phystop
!label System variable, phystop
!item [phystop~~~~~~LONG 0x42e]
Pointer to the first byte above the physical end of the ST-compatible RAM  
region (physical top of ST-compatible RAM)

!label prt_cnt
!label System variable, prt_cnt
!label Alternate-Help, Counter for
!item [prt_cnt~~~~~~WORD 0x4ee]
Counter for the Alternate-Help key-presses. Valid are:
!begin_xlist [+0 =] !compressed
!item [-1 =]
Normal status
!item [~0 =]
Start hardcopy
!item [>0 =]
Cancel hardcopy and reset value to -1
!end_xlist
This variable also has to be set before a  call of Prtblk.

!label prv_aux
!label System variable, prv_aux
!item [prv_aux~~~~~~LONG 0x512]
Pointer to a routine for output to the  
serial port (likewise for hardcopy routine). 
The characer to be output lies in 6(sp).

!label prv_auxo
!label System variable, prv_auxo
!item [prv_auxo~~~~~LONG 0x50e]
Pointer to a routine for establishing the 
status of the serial ports (likewise for hardcopy function).

!label prv_lst
!label System variable, prv_lst
!item [prv_lst~~~~~~LONG 0x50a]
Pointer to a routine for output to the 
parallel port (likewise for hardcopy 
routine). The character to be output lies in 6(sp).

!label prv_lsto
!label System variable, prv_lsto
!item [prv_lsto~~~~~LONG 0x506]
Pointer to a routine for establishing the 
status of the parallel port (likewise for 
hardcopy routine).

!label pun_ptr
!label System variable, pun_ptr
!item [pun_ptr~~~~~~LONG 0x516]
After successful installation of an AHDI-
compatible hard disk driver this points  
to a PUN_INFO structure.

!label ramtop
!label System variable, ramtop
!label Fast-RAM, End of
!item [ramtop~~~~~~~LONG 0x5a4]
Pointer to the end of the Fast-RAM in 
Atari TT (not officially documented).

!label ramvalid
!label System variable, ramvalid
!item [ramvalid~~~~~LONG 0x5a8]
Magic value that shows whether ramtop holds 
a sensible value. Must be 0x1357bd13. Not officially documented.

!label resvalid
!label System variable, resvalid
!item [resvalid~~~~~LONG 0x426]
If this address at a reset contains the  
magic value 0x31415926, then the system 
will jump through resvector.

!label resvector
!label System variable, resvector
!item [resvector~~~~LONG 0x42a]
This is used during system initialisation. 
Contains the vector for a reset, provided 
resvalid contains the correct value. At the 
time of the call the hardware registers are 
not yet set, and the stack-pointer too has
not been initialised yet.

!label sav_context
!label System variable, sav_context
!item [sav_context~~LONG 0x4ae]
Should actually be a pointer to the memory 
region into which parts of the stack are 
saved during exceptions. Actually however
it is not used by (!nolink [TOS]), and one therefore 
has to access the variables directly at the address 0x380.

!label sav_row
!label System variable, sav_row
!item [sav_row~~~~~~WORD 0x4ac]
Internal buffer for temporary saving the 
cursor row position when using an Esc-Y 
VT-52 sequence (not officially documented).

!label savptr
!label System variable, sav_ptr
!item [savptr~~~~~~~LONG 0x4a2]
Pointer to temporary buffer to which 
internal registers of (!nolink [BIOS]) and (!nolink [XBIOS])
are saved.

!label scr_dump
!label System variable, scr_dump
!label Hardcopy routine, Pointer to
!item [scr_dump~~~~~LONG 0x502]
Pointer to the hardcopy routine. Is used by 
the (!nolink [XBIOS]) function Scrdmp.
Zeiger auf die Hardcopy-Routine. Wird von der XBIOS-Funktion Scrdmp benutzt.

!label screenpt
!label System variable, screenpt
!item [screenpt~~~~~LONG 0x45e]
Pointer to the top of the physical screen. Is transferred at the next
vertical blank after _v_bas_ad to the relevant hardware 
registers, bu not cleared subsequently. Therefore one should always work with 
Setscreen.

!label seekrate
!label System variable, seekrate
!label Floppy drive, Seekrate of
!item [seekrate~~~~~WORD 0x440]
Seek rate for the two floppy drives. Valid are:

0 = ~6 ms (!nl)
1 = 12 ms (!nl)
2 = ~2 ms (!nl)
3 = ~3 ms (!nl)

The variable is read out straight after system start by the (!nolink [BIOS]), and ignored 
afterwards. For altering the seek rate that is used actually, one
has to use the (!nolink [XBIOS]) function Floprate.

!label sshiftmd
!label System variable, sshiftmd
!item [sshiftmd~~~~~BYTE 0x44c]
Copy of the mode register of the shifter. Valid are:

0 = ~320 * 200 (four planes) (!nl)
1 = ~640 * 200 (two planes) (!nl)
2 = ~640 * 400 (one planes) (!nl)
3 = ~640 * 480 (four planes, TT only) (!nl)
4 = 1280 * 960 (one planes, TT only) (!nl)
5 = ~320 * 480 (eight planes, TT only)

All other values are reserved for future extensions.

!label swv_vec
!label System variable, swv_vec
!item [swv_vec~~~~~~LONG 0x46e]
Pointer to the routine that reacts to the 
connection of a black and white or colour 
(!nolink [monitor]) (at the start it points to the  
normal reset routine).

!label the_env
!label System variable, the_env
!label Environment strings, Pointer to
!item [the_env~~~~~~LONG 0x4be]
Pointer to the default environment strings (unused).

!label themd
!label System variable, themd
!label MD structure, Pointer to
!item [themd~~~~~~~~MD~~ 0x48e]
Pointer to the MD structure of the GEMDOS. This is set once only during initialisation
of the system, and must not be altered (and it would be if using Getmpb!). 

!label trp14ret
!label System variable, trp14ret
!item [trp14ret~~~~~LONG 0x486]
Officially not documented, and probably also unused.

!label vblsem
!label System variable, vblsem
!item [vblsem~~~~~~~WORD 0x452]
A value of 1 here means that the vertical blank handler is active.

!label xconin
!label System variable, xconin
!item [xconin~~~~~~~LONG 0x53e]
Eight vectors for Bconin routines. (From TOS 1.02 on)

!label xconout
!label System variable, xconout
!item [xconout~~~~~~LONG 0x57e]
Eight vectors for Bconout routines. (From TOS 1.02 on)

!label xconstat
!label System variable, xconstat
!item [xconstat~~~~~LONG 0x51e]
Eight vectors for Bconstat routines. (From TOS 1.02 on)

!label xcostat
!label System variable, xcostat
!item [xcostat~~~~~~LONG 0x55e]
Eight vectors for Bcostat routines. (From TOS 1.02 on)

!end_xlist

See also: (!nl)
(!link [Reset vector][Hooking into the reset vector])
~ The System Vectors ~ Program launch and TPA (!nl)
System variables, sorted numerically

!begin_node  System variables, sorted numerically

!begin_table [|l|l|l|] !hline
Variable !! (!nolink [Size]) !! Address
!hline
0x400 !! LONG !! etv_timer
0x404 !! LONG !! etv_critic
0x408 !! LONG !! etv_term
0x40c !! LONG !! etv_xtra
0x420 !! LONG !! memvalid
0x424 !! BYTE !! memcntrl
0x426 !! LONG !! resvalid
0x42a !! LONG !! resvector
0x42e !! LONG !! phystop
0x432 !! LONG !! _membot
0x436 !! LONG !! _memtop
0x43a !! LONG !! memval2
0x43e !! WORD !! flock
0x440 !! WORD !! seekrate
0x442 !! WORD !! _timr_ms
0x444 !! WORD !! _fverify
0x446 !! WORD !! _bootdev
0x448 !! WORD !! palmode
0x44a !! BYTE !! defshiftmd
0x44c !! BYTE !! sshiftmd
0x44e !! LONG !! _v_bas_ad
0x452 !! WORD !! vblsem
0x454 !! WORD !! nvbls
0x456 !! LONG !! _vblqueue
0x45a !! LONG !! colorptr
0x45e !! LONG !! screenpt
0x462 !! LONG !! _vbclock
0x466 !! LONG !! _frclock
0x46a !! LONG !! hdv_init
0x46e !! LONG !! swv_vec
0x472 !! LONG !! hdv_bpb
0x476 !! LONG !! hdv_rw
0x47a !! LONG !! hdv_boot
0x47e !! LONG !! hdv_mediach
0x482 !! WORD !! _cmdload
0x484 !! BYTE !! conterm
0x486 !! LONG !! trp14ret
0x48a !! LONG !! criticret
0x48e !! MD !! themd
0x49e !! LONG !! _md
0x4a2 !! LONG !! savptr
0x4a6 !! WORD !! _nflops
0x4a8 !! LONG !! con_state
0x4ac !! WORD !! sav_row
0x4ae !! LONG !! sav_context
0x4b2 !! LONG !! _bufl
0x4ba !! LONG !! _hz_200
0x4be !! LONG !! the_env
0x4c2 !! LONG !! _drvbits
0x4c6 !! LONG !! _dskbufp
0x4ca !! LONG !! _autopath
0x4ce !! LONG !! _vbl_list
0x4ee !! WORD !! prt_cnt
0x4f0 !! WORD !! _prtabt
0x4f2 !! LONG !! _sysbase
0x4f6 !! LONG !! _shell_p
0x4fa !! LONG !! end_os
0x4fe !! LONG !! exec_os
0x502 !! LONG !! scr_dump
0x506 !! LONG !! prv_lsto
0x50a !! LONG !! prv_lst
0x50e !! LONG !! prv_auxo
0x512 !! LONG !! prv_aux
0x516 !! LONG !! pun_ptr
0x51a !! LONG !! memval3
0x51e !! LONG !! xconstat
0x53e !! LONG !! xconin
0x55e !! LONG !! xcostat
0x57e !! LONG !! xconout
0x59e !! WORD !! _longframe
0x5a0 !! LONG !! _p_cookies
0x5a4 !! LONG !! ramtop
0x5a8 !! LONG !! ramvalid
0x5ac !! LONG !! bell_hook
0x5b0 !! LONG !! kcl_hook
!hline
!end_table

See also: (!link [System variables][The system variables])

!end_node

!end_node
