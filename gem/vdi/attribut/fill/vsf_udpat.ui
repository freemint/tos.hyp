!iflang [english]

!begin_node vsf_udpat

(!begin_liste) [Availability]

!item [Name:]
ØSet user-defined fill-patternÆ - Define a new fill-pattern.

!item [Opcode:]
112

!item [Syntax:]
void vsf_udpat ( int16_t handle, int16_t *pfill_pat, int16_t planes );

!item [Description:]
The call vsf_udpat sets up a new fill-pattern, freely defined by the user.
The following apply:

!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [pfill_pat]
Pointer to an array of 16 * (!I)planes(!i) WORDs that define the bit pattern
for a line of the fill
!item [planes]
Number of color planes
!end_xlist

(!B)Notes:(!b) Each line reproduces the fill-pattern for one color plane. The
first entry of a line corresponds here to the first line of the pattern, etc.

Patterns with multiple colors have to be stored in standard format and must
have the same number of planes as the device. Exception: If the device is a
HiColor or TrueColor device (direct color mapping) you always pass a pattern
width of 32-bit pixels (xrgb) and (!I)pfill_pat(!i) points to a 16 * 16 array
of LONGs.
               
If you use a pattern with multiple colors you should select color index 1 and
(!link [writing mode][Write mode]) REPLACE.

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
Supported by all drivers.

!item [Group:]
Fill attributes

!item [See also:]
(!link [Binding] [Bindings for vsf_udpat]) ~ vsf_interior

(!ende_liste)
!end_node



!begin_node Bindings for vsf_udpat
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vsf_udpat ( int16_t handle, int16_t *pfill_pat, int16_t planes );

!item [Binding:]
!begin_verbatim
void vsf_udpat (int16_t handle, int16_t *pfill_pat,
                int16_t planes)
{
   intin[0..16n-1] = pfill_pat[0..16n-1];

   contrl[0] = 112;
   contrl[1] = 0;
   contrl[3] = planes * 16;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl      !! contrl[0]    !! 112   # Function Opcode
contrl+2    !! contrl[1]    !! 0     # entry in ptsin
contrl+4    !! contrl[2]    !! 0     # entry in ptsout
contrl+6    !! contrl[3]    !! 16*n  # entry in intin
contrl+8    !! contrl[4]    !! 0     # entry in intout
contrl+12   !! contrl[6]    !! handle
intin       !! intin[0]     !! pfill_pat[0]
...         !! ...          !! ...
...         !! ...          !! ...
intin+32n-2 !! intin[16n-1] !! pfill_pat[16n-1]
!end_table

(!ende_liste)
!end_node

!else

!begin_node vsf_udpat

(!begin_liste) [Beschreibung]

!item [Name:]
ØSet User Defined Fill PatternÆ - definiert ein neues FÅllmuster.

!item [VDI-Nummer:]
112

!item [Deklaration:]
void vsf_udpat ( int16_t handle, int16_t *pfill_pat, int16_t planes );

!item [Beschreibung:]
Die Funktion definiert ein neues FÅllmÅster. Es gilt:

!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [pfill_pat]
Zeiger auf ein Feld mit (!I)planes(!i) Zeilen zu je 16 EintrÑgen.
!item [planes]
Anzahl der Farbebenen
!end_xlist

(!B)Hinweis:(!b) Jede Zeile gibt das FÅllmuster fÅr eine Farbebene wieder.
Der erste Eintrag in einer Zeile entspricht dabei der ersten Zeile des
Musters usw.

Mehrfarbige Muster werden im Standardformat Åbergeben und mÅssen die gleiche
Ebenenanzahl haben wie der Bildschirm. Die Ausnahme von dieser Regel sind
die Direct RGB-Modi (mehr als 8 Ebenen mit direkter RGB-Zuordnung) wie
True-Color. Hier wird das Muster immer als True-Color Muster mit
32-Bit-Pixeln (xRGB) Åbergeben.

Bei Mehrfarbmustern sollte man die FÅllfarbe auf 1 setzen und als
Schreibmodus REPLACE anwÑhlen.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Supported by all drivers.

!item [Gruppe:]
FÅlltyp-Attribute

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vsf_udpat]) ~ vsf_interior

(!ende_liste)
!end_node



!begin_node Bindings fÅr vsf_udpat
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vsf_udpat ( int16_t handle, int16_t *pfill_pat, int16_t planes );

!item [Umsetzung:]
!begin_verbatim
void vsf_udpat (int16_t handle, int16_t *pfill_pat,
                int16_t planes)
{
   intin[0..16n-1] = pfill_pat[0..16n-1];

   contrl[0] = 112;
   contrl[1] = 0;
   contrl[3] = planes * 16;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl      !! contrl[0]    !! 112   # Opcode der Funktion
contrl+2    !! contrl[1]    !! 0     # EintrÑge in ptsin
contrl+4    !! contrl[2]    !! 0     # EintrÑge in ptsout
contrl+6    !! contrl[3]    !! 16*n  # EintrÑge in intin
contrl+8    !! contrl[4]    !! 0     # EintrÑge in intout
contrl+12   !! contrl[6]    !! handle
intin       !! intin[0]     !! pfill_pat[0]
...         !! ...          !! ...
...         !! ...          !! ...
intin+32n-2 !! intin[16n-1] !! pfill_pat[16n-1]
!end_table

(!ende_liste)
!end_node

!endif
