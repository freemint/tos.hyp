!iflang [english]

!begin_node vrun_parallel

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Parallelogram color run(!ldouble) - Parallelogram colour run.

!item [Opcode:]
62

!item [Syntax:]
void vrun_parallel ( int16_t handle, int16_t *pts, int16_t *rgbs );

!item [Description:]
To define the parallelogram only three points are required.
The following apply:

!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [pts[0!]]
X-coordinate, and
!item [pts[1!]]
Y-coordinate of a parallelogram corner point
!item [pts[2!]]
X-coordinate, and
!item [pts[3!]]
Y-coordinate of a second corner point
!item [pts[4!]]
X-coordinate, and
!item [pts[5!]]
Y-coordinate of a third corner point
!item [rgbs]
RGB values, one for each corner
!end_xlist

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
Available only with MATRIX drivers in TC mode.

!item [Group:]
TC-VDI functions

!item [See also:]
(!link [Binding] [Bindings for vrun_parallel]) ~ vrun_rect ~ vrun_triangle

(!ende_liste)
!end_node



!begin_node Bindings for vrun_parallel
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vrun_parallel ( int16_t handle, int16_t *pts, int16_t *rgbs );

!item [Binding:]
!begin_verbatim
void vrun_parallel (int16_t handle, int16_t *pts, int16_t *rgbs)
{
   ptsin[0..5] = pts[0..5];

   intin[0..11] = rgbs[0..11];

   contrl[0] = 62;
   contrl[1] = 3;
   contrl[3] = 12;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]    !! 62    # Function Opcode
contrl+2  !! contrl[1]    !! 3     # entry in ptsin
contrl+4  !! contrl[2]    !! 0     # entry in ptsout
contrl+6  !! contrl[3]    !! 12    # entry in intin
contrl+8  !! contrl[4]    !! 0     # entry in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0..11] !! rgbs[0..11]
ptsin     !! ptsin[0..5]  !! pts[0..5]
!end_table

(!ende_liste)
!end_node

!else

!begin_node vrun_parallel

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Parallelogram Color Run(!ldouble) - Parallelogram color run.

!item [VDI-Nummer:]
62

!item [Deklaration:]
void vrun_parallel ( int16_t handle, int16_t *pts, int16_t *rgbs );

!item [Beschreibung:]
Zur Definition des Parallelogramms sind nur drei Punkte
erforderlich. Es gilt:

!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [pts[0!]]
x-Koordinate
!item [pts[1!]]
y-Koordinate des Eckpunktes
!item [pts[2!]]
x-Koordinate
!item [pts[3!]]
y-Koordinate eines zweiten Punktes
!item [pts[4!]]
x-Koordinate
!item [pts[5!]]
y-Koordinate eines dritten Punktes
!item [rgbs]
RGB-Farbintensit(!aumlaut)t, f(!uumlaut)r jeden Punkt
!end_xlist

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [Verf(!uumlaut)gbar:]
Nur verf(!uumlaut)gbar auf MATRIX Karte im TC Modus.

!item [Gruppe:]
TC-VDI-Funktionen

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r vrun_parallel]) ~ vrun_rect ~ vrun_triangle

(!ende_liste)
!end_node



!begin_node Bindings f(!uumlaut)r vrun_parallel
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vrun_parallel ( int16_t handle, int16_t *pts, int16_t *rgbs );

!item [Umsetzung:]
!begin_verbatim
void vrun_parallel (int16_t handle, int16_t *pts, int16_t *rgbs)
{
   ptsin[0..5] = pts[0..5];

   intin[0..11] = rgbs[0..11];

   contrl[0] = 62;
   contrl[1] = 3;
   contrl[3] = 12;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]    !! 62    # Opcode der Funktion
contrl+2  !! contrl[1]    !! 3     # Eintr(!aumlaut)ge in ptsin
contrl+4  !! contrl[2]    !! 0     # Eintr(!aumlaut)ge in ptsout
contrl+6  !! contrl[3]    !! 12    # Eintr(!aumlaut)ge in intin
contrl+8  !! contrl[4]    !! 0     # Eintr(!aumlaut)ge in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0..11] !! rgbs[0..11]
ptsin     !! ptsin[0..5]  !! pts[0..5]
!end_table

(!ende_liste)
!end_node

!endif
