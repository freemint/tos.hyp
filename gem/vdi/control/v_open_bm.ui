!iflang [english]

!begin_node v_open_bm
#!html_name v_open_bm

(!begin_liste) [Availability]

!item [Name:]
ØOpen bitmapÆ - Open an off-screen bitmap (modernized version)

!item [Opcode:]
100 (Sub-Opcode 3)

!item [Syntax:]
int16_t v_open_bm ( int16_t base_handle, GCBITMAP *bitmap, int16_t color_flags,
                 int16_t unit_flags, int16_t pixel_width, int16_t pixel_height );

!item [Description:]
The call v_open_bm serves for the creation of off-screen bitmaps. One can either
specify the size of a bitmap that it should allocate, or pass a bitmap to it.
The bitmap is managed in the same format as that of the screen, which makes fast
copying between the two possible.

v_open_bm is the modern variant of v_opnbm and works with the same bitmap and
pixel format description as vr_transfer_bits. The following apply:

!begin_xlist [pixel_height] !compressed
!item [Parameter]
Meaning
!item [~]
~
!item [base_handle]
graf_handle

!item [bitmap]
Pointer to GCBITMAP, or 0. (!nl)
If (!nolink [GCBITMAP]) is 0, then the GCBITMAP of the handle
(!I)base_handle(!i) will be used. Entries in the bitmap are evaluated as
follows:

!begin_xlist [px_format]
!item [Entry] Function


!item [addr]
Address of the bitmap, or 0 ((!nolink [VDI]) reserves the memory and later enters
the address here)

!item [width]
Width of a line in bytes, if (!I)addr(!i) is valid

!item [bits]
Bit-depth, corresponds to (!I)px_format(!i)


!item [px_format]
Pixel format, or 0 (pixel format will be taken on by (!I)base_handle(!i)) if all
following coordinates are set to 0 and the (!nolink [VDI]) reserves the memory; if
(!I)addr(!i) is 0, the dimensions will be taken from (!I)base_handle(!i)

!item [xmin]
Minimum discrete X-coordinate of the bitmap (0 as a rule)

!item [ymin]
Minimum discrete Y-coordinate of the bitmap (0 as a rule)

!item [xmax]
Maximum discrete X-coordinate of the bitmap + 1 (the width as a rule)

!item [ymax]
Maximum discrete Y-coordinate of the bitmap + 1 (the height as a rule)

!item [ctab] Is ignored

!item [itab] Is ignored

!item [reserved0] Must be 0!

!item [reserved1] Must be 0!
!end_xlist

!item [color_flags]
Treatment of the colour tables: (!nl)
If the lowest bit of (!I)color_flags(!i) is set then the bitmap uses the same
colour table as (!I)base_handle.(!i) If the bit is cleared, the bitmap will
have its own colour table and own inverse colour table created for it (which
should make the handling of screen caches or back!-ground buffers appreciably
easier for some programs); colour changes on the screen will then not alter
entries in the bitmap. Of (!I)color_flags(!i) only the lowest bit is used at
present; all other bits have to be 0. (!B)Note:(!b) If the bitmap and screen use
the same colour table, the colours may be altered only via the handle of the
screen (i.e. (!I)base_handle(!i)), as otherwise the colours will not be
entered in the hardware (CLUT).

!item [unit_flags]
Measurement unit of the pixel size

!item [pixel_width]
Pixel width, or 0

!item [pixel_height]
Pixel height, or 0
!end_xlist

Additionally, the pixel size is passed in (!I)pixel_width(!i) and
(!I)pixel_height(!i), so that the fonts may be scaled correctly. If one of
these two entries is 0, the task will be taken on by (!I)base_handle(!i).
The size specifi!-cations will be interpreted dependent on (!I)unit_flags:(!i)

  -1: Specification in dpi (!nl)
  ~0: Specification in microns (1/1000 mm) (!nl)
  ~1: Specification in 1/10 microns (1/10000 mm) (!nl)
  ~2: Specification in 1/100 microns (1/100000 mm) (!nl)
  ~3: Specification in 1/1000 microns (1/1000000 mm)

As (!I)ctab(!i) is ignored, a system colour table corres!-ponding to the colour
depth will be created for the bitmap in CSPACE_RGB (RGB) colour space. The
variable <zero> is  present for possible later extensions in this area, which
therefore has to be set to 0 at present.


!item [(!nolink [Return]) value:]
If the function is successful, a non-zero handle will be returned. If the
(!nolink [VDI]) has reserved memory for the bitmap and only an empty (or
only partially filled) GCBITMAP structure has been passed in the call, the
structure is initialized completely after the call. Programs may not alter
either the colour table nor the inverse colour table of the structure with a
direct access. All changes must be made with the colour functions under the
returned handle.
               
!item [Availability:]
As of EdDI Version 1.20.

!item [Group:]
Control functions

!item [See also:]
(!link [Binding] [Bindings for v_open_bm]) ~ NVDI ~ Off-screen bitmaps ~ v_clsbm

(!ende_liste)
!end_node



!begin_node Bindings for v_open_bm
#!html_name Bindings_for_v_open_bm

!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t v_open_bm ( int16_t base_handle, GCBITMAP *bitmap, int16_t color_flags,
                 int16_t unit_flags, int16_t pixel_width, int16_t pixel_height );

!item [Binding:]
!begin_verbatim
int16_t v_open_bm ( int16_t base_handle, GCBITMAP *bitmap,
                    int16_t color_flags, int16_t unit_flags,
                    int16_t pixel_width, int16_t pixel_height )
{
   intin[0] = color_flags;
   intin[1] = unit_flags;
   intin[2] = pixel_width;
   intin[3] = pixel_height;

   contrl[0] = 100;
   contrl[1] = 0;
   contrl[3] = 4;
   contrl[5] = 3;
   contrl[6] = base_handle;
   contrl[7..8] = bitmap;

   vdi ();

   return ( contrl[6] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]     !! 100   # Function opcode
contrl+2  !! contrl[1]     !! 0     # Entry in ptsin
contrl+4  !! contrl[2]     !! 0     # Entry in ptsout
contrl+6  !! contrl[3]     !! 4     # Entry in intin
contrl+8  !! contrl[4]     !! 1     # Entry in intout
contrl+10 !! contrl[5]     !! 3     # Sub-opcode
contrl+12 !! contrl[6]     !! base_handle
contrl+14 !! contrl[7..8]  !! bitmap
intin     !! intin[0]      !! color_flags
intin+2   !! intin[1]      !! unit_flags
intin+4   !! intin[2]      !! pixel_width
intin+6   !! intin[3]      !! pixel_height
intout    !! intout[0]     !! 1
!end_table

(!ende_liste)
!end_node

!else

!begin_node v_open_bm
#!html_name v_open_bm

(!begin_liste) [Beschreibung]

!item [Name:]
ØOpen BitmapÆ - îffnet eine Offscreen Bitmap

!item [VDI-Nummer:]
100 (Unterfunktion 3)

!item [Deklaration:]
int16_t v_open_bm ( int16_t base_handle, GCBITMAP *bitmap, int16_t color_flags,
                 int16_t unit_flags, int16_t pixel_width, int16_t pixel_height );

!item [Beschreibung:]
Die Funktion v_open_bm dient zur Erzeugung von Offscreen-Bitmaps. Man kann
ihr entweder die Grîûe eines Bitmap angeben, die Sie allozieren soll, oder
ihr eine Bitmap Åbergeben. Die Bitmap wird im gleichen Format wie die des
Bildschirms verwaltet, wodurch schnelles Kopieren zwischen beiden mîglich
ist.

v_open_bm ist die moderne Variante von v_opnbm und arbeitet mit
derselben Bitmap- und Pixelformatbeschreibung wie vr_transfer_bits.

!begin_xlist [pixel_height] !compressed
!item [Parameter]
Bedeutung
!item [~]
~
!item [base_handle]
graf_handle()

!item [bitmap]
Zeiger auf GCBITMAP oder 0. (!nl)
Wenn (!nolink [GCBITMAP]) 0 ist, wird die GCBITMAP des Handles (!I)base_handle(!i)
benutzt. Die EintrÑge in der Bitmap werden wie folgt ausgewertet:

!begin_xlist [px_format]
!item [Eintrag] Funktion


!item [addr]
Adresse der Bitmap oder 0 ((!nolink [VDI]) fordert den Speicher an und trÑgt die
Adresse nachher hier ein)

!item [width]
Breite einer Zeile in Bytes, wenn (!I)addr(!i) gÅltig ist

!item [bits]
Bittiefe, korrespondiert mit (!I)px_format(!i)


!item [px_format]
Pixelformat oder 0 (Pixelformat wird von (!I)base_handle(!i) Åbernommen)
wenn alle folgenden Koordinaten auf 0 gesetzt sind und das (!nolink [VDI]) den
Speicher anfordert [<addr> ist 0], werden die Ausmaûe von (!I)base_handle(!i)
Åbernommen

!item [xmin]
minimale diskrete x-Koordinate der Bitmap (in der Regel 0)

!item [ymin]
minimale diskrete y-Koordinate der Bitmap (in der Regel 0)

!item [xmax]
maximale diskrete x-Koordinate der Bitmap + 1 (in der Regel die Breite)

!item [ymax]
maximale diskrete y-Koordinate der Bitmap + 1 (in der Regel die Hîhe)

!item [ctab] wird ignoriert

!item [itab] wird ignoriert

!item [reserved0] muû 0 sein!

!item [reserved1] muû 0 sein!
!end_xlist

!item [color_flags]
Behandlung der Farbtabellen

Wenn das unterste Bit von (!I)color_flags(!i) gesetzt ist, benutzt
die Bitmap die gleiche Farbtabelle wie (!I)base_handle(!i). Ist das
Bit gelîscht, wird fÅr die Bitmap eine eigene Farbtabelle
und eine eigene inverse Farbtabelle angelegt (wodurch fÅr manche
Programme die Behandlung von Bildschirm-Caches oder Hintergrundpuffern
deutlich einfacher werden sollte). FarbverÑnderungen auf dem
Bildschirm Ñndern dann nicht die FarbeintrÑge der Bitmap.
Von (!I)color_flags(!i) wird z.Zt. nur das unterste Bit benutzt. Alle
anderen Bits mÅssen 0 sein.


Hinweise: Wenn Bitmap und Bildschirm die gleiche
Farbtabelle benutzen, dÅrfen die Farben nur Åber das Handle
des Bildschirms (also (!I)base_handle(!i)) verÑndert werden, da
andernfalls die Farben nicht in der Hardware (CLUT) eingetragen
werden.

!item [unit_flags]
Maûeinheit der Pixelausmaûe

!item [pixel_width]
Pixelbreite oder 0

!item [pixel_height]
Pixelhîhe oder 0
!end_xlist

ZusÑtzlich wird in (!I)pixel_width(!i) und
(!I)pixel_height(!i) die Pixelgrîûe Åbergeben, damit
die Fonts richtig skaliert werden kînnen. Falls einer der beiden
EintrÑge 0 ist, werden sie von (!I)base_handle(!i)
Åbernommen. Die Grîûen!-angaben werden abhÑngig von
(!I)unit_flags(!i) interpretiert:

  -1: Angaben in dpi (!nl)
  ~0: Angaben in Mikrometern (!nl)
  ~1: Angaben in 1/10 Mikrometern (!nl)
  ~2: Angaben in 1/100 Mikrometern (!nl)
  ~3: Angaben in 1/1000 Mikrometern

Da <ctab> ignoriert wird, wird fÅr die Bitmap die der
Bittiefe entsprechende Systemfarbtabelle im Farbraum CSPACE_RGB (RGB)
angelegt. FÅr mîgliche spÑtere Erweiterungen in diesem
Bereich ist die Variable <zero>, die daher jetzt auf 0 gesetzt
werden muû.

!item [Ergebnis:]
Wenn die Funktion erfolgreich ist, wird ein von 0 verschiedenes
Handle zurÅckgeliefert. Wenn das VDI den Speicher fÅr die
Bitmap angefordert hat und beim Aufruf eine leere (oder nur teilweise
gefÅllte) GCBITMAP-Struktur Åbergeben wurde, ist die
Struktur nach dem Aufruf vollstÑndig initialisiert. Programme
dÅrfen weder die Farbtabelle noch die inverse Farbtabelle der
Struktur durch direkten Zugriff Ñndern. Alle VerÑnderungen
mÅssen durch die Farbfunktionen unter dem zurÅckgelieferten
Handle erfolgen.

!item [VerfÅgbar:]
ab EdDi-Version 1.20

!item [Gruppe:]
Kontrollfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr v_open_bm]) ~ NVDI ~ Off-Screen-Bitmaps ~ v_clsbm

(!ende_liste)
!end_node



!begin_node Bindings fÅr v_open_bm
#!html_name Bindings_for_v_open_bm

!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
int16_t v_open_bm ( int16_t base_handle, GCBITMAP *bitmap, int16_t color_flags,
                 int16_t unit_flags, int16_t pixel_width, int16_t pixel_height );

!item [Umsetzung:]
!begin_verbatim
int16_t v_open_bm ( int16_t base_handle, GCBITMAP *bitmap,
                    int16_t color_flags, int16_t unit_flags,
                    int16_t pixel_width, int16_t pixel_height )
{
   intin[0] = color_flags;
   intin[1] = unit_flags;
   intin[2] = pixel_width;
   intin[3] = pixel_height;

   contrl[0] = 100;
   contrl[1] = 0;
   contrl[3] = 4;
   contrl[5] = 3;
   contrl[6] = base_handle;
   contrl[7..8] = bitmap;

   vdi ();

   return ( contrl[6] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]     !! 100   # Opcode der Funktion
contrl+2  !! contrl[1]     !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]     !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]     !! 4     # EintrÑge in intin
contrl+8  !! contrl[4]     !! 1     # EintrÑge in intout
contrl+10 !! contrl[5]     !! 3     # Unterfunktion
contrl+12 !! contrl[6]     !! base_handle
contrl+14 !! contrl[7..8]  !! bitmap
intin     !! intin[0]      !! color_flags
intin+2   !! intin[1]      !! unit_flags
intin+4   !! intin[2]      !! pixel_width
intin+6   !! intin[3]      !! pixel_height
intout    !! intout[0]     !! 1
!end_table

(!ende_liste)
!end_node

!endif
