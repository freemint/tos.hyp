!iflang [english]

!begin_node v_getbitmap_info

(!begin_liste) [Availability]

!item [Name:]
ØGet character bitmap informationÆ - Obtain placement information about the
bitmap of a vector character.

!item [Opcode:]
239

!item [Syntax:]
void v_getbitmap_info ( int16_t handle, int16_t ch, fix31 *advx, fix31 *advy,
                        fix31 *xoff, fix31 *yoff, int16_t *width,
                        int16_t *height, int16_t **bitmap );

!item [Description:]
The call v_getbitmap_info returns a pointer to the character's bitmap and
provides information about the character placement, size and alignment.

!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [ch]
Character to return info about
!item [advx]
X-advance in 1/65536 pixels
!item [advy]
Y-advance in 1/65536 pixels
!item [xoff]
X-offset in 1/65536 pixels
!item [yoff]
Y-offset in 1/65536 pixels
!item [width]
Bitmap width in pixels
!item [height]
Bitmap height in pixels
!item [bitmap]
Pointer to the bitmap
!end_xlist

(!B)Notes:(!b) (!I)advx/y(!i) represent the offset vectors for the correct
placement of the next character. (!I)x/yoff(!i) are offset vectors of the
top left corner of the bitmap relative to the position of the character cell,
and are necessary because most bitmaps are smaller than the character cell
containing them.

To get reproducible output even without NVDI, any text
(!link [effects][Text effects]) should be switched off. As the pointer to the
bitmap points to the character cache as a rule, one should copy the bitmap
directly after the call (tip: inhibit (!nolink [AES]) context switching with
wind_update!) - otherwise the pointer could be invalid already.

Additionally one should not call v_getbitmap_info for very large characters (e.g.
300 pts or more), as these, depending on the cache size, may not be capable of
being built up completely; in this case the bitmap contains only a part of the
character.

You should not use this function to write your own text output function - this
function would not be faster than v_ftext and you would not be able to do pair
kerning. Use v_ftext!


!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
As of SpeedoGDOS 4.00 and as of NVDI 3.00. (The call also existed in FSMGDOS but
with a completely different calling format; Atari changed it, as no FSMGDOS
program utilized it at the time.)

!item [Group:]
Inquire functions

!item [See also:]
(!link [Binding] [Bindings for v_getbitmap_info]) ~ vst_effects ~ SpeedoGDOS ~
NVDI

(!ende_liste)
!end_node



!begin_node Bindings for v_getbitmap_info
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void v_getbitmap_info ( int16_t handle, int16_t ch, fix31 *advx, fix31 *advy,
                        fix31 *xoff, fix31 *yoff, int16_t *width,
                        int16_t *height, int16_t **bitmap );

!item [Binding:]
!begin_verbatim
void v_getbitmap_info (int16_t handle, int16_t ch,
                       fix31 *advx, fix31 *advy,
                       fix31 *xoff, fix31 *yoff,
                       int16_t *width, int16_t *height,
                       int16_t **bitmap)
{
   intin[0] = ch;

   contrl[0] = 239;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();

   *width  = intout[0];
   *height = intout[1];
   *advx   = intout[2..3];
   *advy   = intout[4..5];
   *xoff   = intout[6..7];
   *yoff   = intout[8..9];
   *bitmap = intout[10..11];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]      !! 239   # Function Opcode
contrl+2  !! contrl[1]      !! 0     # Entry in ptsin
contrl+4  !! contrl[2]      !! 0     # Entry in ptsout
contrl+6  !! contrl[3]      !! 1     # Entry in intin
contrl+8  !! contrl[4]      !! 12    # Entry in intout
contrl+12 !! contrl[6]      !! handle
intin     !! intin[0]       !! ch
intout    !! intout[0]      !! width
intout+2  !! intout[1]      !! height
intout+4  !! intout[2..3]   !! advx
intout+8  !! intout[4..5]   !! advy
intout+12 !! intout[6..7]   !! xoff
intout+16 !! intout[8..9]   !! yoff
intout+20 !! intout[10..11] !! bitmap
!end_table

(!ende_liste)
!end_node

!else

!begin_node v_getbitmap_info

(!begin_liste) [Beschreibung]

!item [Name:]
ØGet character bitmap informationÆ - Informationen Åber ein Vektorzeichen
ermitteln

!item [VDI-Nummer:]
239

!item [Deklaration:]
void v_getbitmap_info ( int16_t handle, int16_t ch, fix31 *advx, fix31 *advy,
                        fix31 *xoff, fix31 *yoff, int16_t *width,
                        int16_t *height, int16_t **bitmap );

!item [Beschreibung:]
Die Funktion liefert Informationen Åber ein Zeichen eines
Vektorzeichensatzes.

!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [ch]
gewÅnschtes Zeichen
!item [advx]
x-Position 
!item [advy]
y-Position fÅr darauffolgendes Zeichen
!item [xoff]
x-Offset 
!item [yoff]
y-Offset innerhalb der Pixel-Darstellung
!item [width]
Breite 
!item [height]
Hîhe der Pixeldarstellung
!item [bitmap]
Zeiger auf die Bitmap des Zeichens
!end_xlist

(!B)Hinweis:(!b) Um auch ohne NVDI nachvollziehbare Ausgaben zu bekommen,
sollten die Texteffekte ausgeschaltet sein. Da der Zeiger auf die Bitmap in
der Regel in den Zeichencache verweist, sollte man sich die Bitmap direkt
nach dem Aufruf kopieren (Tip: AES-Kontextswitch durch wind_update
verhindern!) - andernfalls kînnte der Zeiger schon wieder ungÅltig sein.

Auûerdem sollte man v_getbitmap_info nicht fÅr enorm groûe Zeichen (z.B.
300 pt und mehr) aufrufen, da diese je nach Cache-Grîûe evtl. nicht mehr
komplett aufgebaut werden kînnen. Die Bitmap enthÑlt in diesem Fall nur
einen Teil des Zeichens.

Man sollte diese Funktion nicht miûbrauchen, um eine eigene Textausgabe zu
bauen - es lohnt sich nicht und Pair-Kerning wÑre auch nicht mîglich.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.

!item [VerfÅgbar:]
ab SpeedoGDOS 4.00 und ab NVDI 3.00

!item [Gruppe:]
Auskunftsfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr v_getbitmap_info]) ~ vst_effects ~ SpeedoGDOS ~
NVDI

(!ende_liste)
!end_node



!begin_node Bindings fÅr v_getbitmap_info
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void v_getbitmap_info ( int16_t handle, int16_t ch, fix31 *advx, fix31 *advy,
                        fix31 *xoff, fix31 *yoff, int16_t *width,
                        int16_t *height, int16_t **bitmap );

!item [Umsetzung:]
!begin_verbatim
void v_getbitmap_info (int16_t handle, int16_t ch, fix31 *advx,
                       fix31 *advy, fix31 *xoff, fix31 *yoff,
                       int16_t *width, int16_t *height,
                       int16_t **bitmap)
{
   intin[0] = ch;

   contrl[0] = 239;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();

   *width  = intout[0];
   *height = intout[1];
   *advx   = intout[2..3];
   *advy   = intout[4..5];
   *xoff   = intout[6..7];
   *yoff   = intout[8..9];
   *bitmap = intout[10..11];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]      !! 239   # Opcode der Funktion
contrl+2  !! contrl[1]      !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]      !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]      !! 1     # EintrÑge in intin
contrl+8  !! contrl[4]      !! 12    # EintrÑge in intout
contrl+12 !! contrl[6]      !! handle
intin     !! intin[0]       !! ch
intout    !! intout[0]      !! width
intout+2  !! intout[1]      !! height
intout+4  !! intout[2..3]   !! advx
intout+8  !! intout[4..5]   !! advy
intout+12 !! intout[6..7]   !! xoff
intout+16 !! intout[8..9]   !! yoff
intout+20 !! intout[10..11] !! bitmap
!end_table

(!ende_liste)
!end_node

!endif
