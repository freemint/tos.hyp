!iflang [english]

!begin_node vqt_width

(!begin_liste) [Availability]

!item [Name:]
ØInquire character cell widthÆ - Obtain the width of a character cell.

!item [Opcode:]
117

!item [Syntax:]
int16_t vqt_width ( int16_t handle, int8_t character, int16_t *cell_width,
                 int16_t *left_delta, int16_t *right_delta );

!item [Description:]
The call vqt_width obtains the horizontal extent of a specified character in the
current font as well as of the character cell, in pixels. The following apply:

!begin_xlist !compressed [right_delta]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [character]
Index of specified character
!item [cell_width]
Cell width of the character
!item [left_delta]
Left character alignment delta
!item [right_delta]
Right character alignment delta
!end_xlist

(!B)Note:(!b)
Special effects and rotation do (!I)not(!i) apply.

If one applies this function to a vector font, one only obtains the rounded-off
step-size for the specified (!I)character(!i) as remainders are not taken into
account. This step-size can be used (!I)only(!i) in connection with v_gtext. If
one tries to apply these step-sizes to v_ftext, then wrong character positions
will be calculated. It is recommended you use vqt_advance instead when inquiring
about outline fonts.
!image (!picture_path)cl_width_en

To check whether a font is monospaced or proportional, you should use
vqt_ext_name which returns extended font information (under NVDI only).

The values in (!I)left_delta(!i) and (!I)right_delta(!i) correspond
exactly to the positions in the Horizontal offset table. If this specification
is missing in the font header (which is the case for most bitmap fonts), then the
return will be 0.

!item [(!nolink [Return]) value:]
The function returns the index of (!I)character(!i), or -1 if an error has
occurred.

!item [Availability:]
Supported by all drivers.

!item [Group:]
Inquire functions

!item [See also:]
(!link [Binding] [Bindings for vqt_width]) ~ vst_effects

(!ende_liste)
!end_node



!begin_node Bindings for vqt_width
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t vqt_width ( int16_t handle, int8_t character, int16_t *cell_width,
                 int16_t *left_delta, int16_t *right_delta );

!item [Binding:]
!begin_verbatim
int16_t vqt_width (int16_t handle, int8_t character,
                   int16_t *cell_width, int16_t *left_delta,
                   int16_t *right_delta)
{
   intin[0] = character;

   contrl[0] = 117;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();

   *cell_width  = ptsout[0];
   *left_delta  = ptsout[2];
   *right_delta = ptsout[4];

   return ( intout[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0] !! 117   # Function Opcode
contrl+2  !! contrl[1] !! 0     # Entry in ptsin
contrl+4  !! contrl[2] !! 3     # Entry in ptsout
contrl+6  !! contrl[3] !! 1     # Entry in intin
contrl+8  !! contrl[4] !! 1     # Entry in intout
contrl+12 !! contrl[6] !! handle
intin     !! intin[0]  !! character
intout    !! intout[0] !! Return Value
ptsout    !! ptsout[0] !! cell_width
ptsout+2  !! ptsout[1] !! 0
ptsout+4  !! pstout[2] !! left_delta
ptsout+6  !! ptsout[3] !! 0
ptsout+8  !! ptsout[4] !! right_delta
ptsout+10 !! ptsout[5] !! 0
!end_table

(!ende_liste)
!end_node

!else

!begin_node vqt_width

(!begin_liste) [Beschreibung]

!item [Name:]
ØInquire Character Cell WidthÆ - ermittelt die Breite einer Zeichenzelle.

!item [VDI-Nummer:]
117

!item [Deklaration:]
int16_t vqt_width ( int16_t handle, int8_t character, int16_t *cell_width,
                 int16_t *left_delta, int16_t *right_delta );

!item [Beschreibung:]
Die Funktion ermittelt die horizontalen Ausmaûe eines Zeichens des akuellen
Zeichensatzes sowie der Zeichenzelle. Es gilt:

!begin_xlist !compressed [right_delta]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [character]
Zeichennummer
!item [cell_width]
Zeichenzellenbreite (bzgl. x-Achse)
!item [left_delta]
Abstand des linken Zeichenzellenrands zum linken Zeichenrand bzgl. der
x-Achse
!item [right_delta]
Abstand des rechten Zeichenzellenrands zum rechten Zeichenrand bzgl. der
y-Achse
!end_xlist

(!B)Hinweis:(!b) Texteffekte und Drehungen werden von der Funktion
(!I)nicht(!i) beachtet.

Wendet man die Funktion auf einen Vektorfont an, wird fÅr das Zeichen
(!I)character(!i) die gerundete Schrittweite zurÅckgegeben. Diese
Schrittweite kann (!I)nur(!i) im Zusammenhang mit v_gtext benutzt werden.
Versucht man diese Schrittweiten auf v_ftext anzuwenden, wird man falsche
Zeichenpositionen berechnen.

!image (!picture_path)cl_width

Um festzustellen, ob ein Font Ñquidistant (monospaced) oder proportional
ist, sollten nicht alle Zeichenpaare Åber vqt_width verglichen, sondern
zuerst ÅberprÅft werden, ob vqt_name() hierÅber Informationen zurÅckgibt.

Die Werte in (!I)left_delta(!i) und (!I)right_delta(!i) entsprechen exakt
den Positionen in der Horizontal-Offset-Table. Fehlt diese Angabe im
Zeichensatzkopf (was bei den meisten Bitmap-Fonts der Fall ist), so erhÑlt
man als Ergebnis eine Null.

!item [Ergebnis:]
Die Funktion liefert den Wert -1, falls die Ausmaûe aus irgendeinem Grund
nicht berechnet werden konnten.

!item [VerfÅgbar:]
Supported by all drivers.

!item [Gruppe:]
Auskunftsfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vqt_width]) ~ vst_effects

(!ende_liste)
!end_node



!begin_node Bindings fÅr vqt_width
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
int16_t vqt_width ( int16_t handle, int8_t character, int16_t *cell_width,
                 int16_t *left_delta, int16_t *right_delta );

!item [Umsetzung:]
!begin_verbatim
int16_t vqt_width (int16_t handle, int8_t character,
                   int16_t *cell_width, int16_t *left_delta,
                   int16_t *right_delta)
{
   intin[0] = character;

   contrl[0] = 117;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();

   *cell_width  = ptsout[0];
   *left_delta  = ptsout[2];
   *right_delta = ptsout[4];

   return ( intout[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0] !! 117   # Opcode der Funktion
contrl+2  !! contrl[1] !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2] !! 3     # EintrÑge in ptsout
contrl+6  !! contrl[3] !! 1     # EintrÑge in intin
contrl+8  !! contrl[4] !! 1     # EintrÑge in intout
contrl+12 !! contrl[6] !! handle
intin     !! intin[0]  !! character
intout    !! intout[0] !! Return-Wert
ptsout    !! ptsout[0] !! cell_width
ptsout+2  !! ptsout[1] !! 0
ptsout+4  !! pstout[2] !! left_delta
ptsout+6  !! ptsout[3] !! 0
ptsout+8  !! ptsout[4] !! right_delta
ptsout+10 !! ptsout[5] !! 0
!end_table

(!ende_liste)
!end_node

!endif
