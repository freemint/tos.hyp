!iflang [english]

!begin_node FONT_HDR
#!html_name FONT_HDR

!label Bitmap fonts, Header for

The following structure describes the file-header for a bitmap font
in the (!I)Digital Research(!i) standard format. In this format the font
is organised as a wide, monochrome raster image; the width of the
raster is the sum of all character widths, the raster height corres-
ponds to the height of a single character. (!B)From this follows:(!b) The
left edge of a character does (!I)not(!i) necessarily have to fall on a
byte boundary; only the end of each raster line is filled with NULL-
bits so that the next line falls on a WORD boundary again.

!begin_verbatim
typedef struct font_hdr
{
   int16_t     font_id;        /* Font number                        */
   int16_t     point;          /* Size in points                     */
   int8_t      name[32];       /* Name of the font                   */
   uint16_t    first_ade;      /* First character in font            */
   uint16_t    last_ade;       /* Last character in font             */
   uint16_t    top;            /* Distance: Top line    <-> Baseline */
   uint16_t    ascent;         /* Distance: Ascent line <-> Baseline */
   uint16_t    half;           /* Distance: Half line   <-> Baseline */
   uint16_t    descent;        /* Distance: Descent line<-> Baseline */
   uint16_t    bottom;         /* Distance: Bottom line <-> Baseline */
   uint16_t    max_char_width; /* Largest character width            */
   uint16_t    max_cell_width; /* Largest character cell width       */
   uint16_t    left_offset;    /* Left offset for italic (skewed)    */
   uint16_t    right_offset;   /* Right offset for italic (skewed)   */
   uint16_t    thicken;        /* Thickening factor for bold         */
   uint16_t    ul_size;        /* Width of underline                 */
   uint16_t    lighten;        /* Mask for light (0x5555)            */
   uint16_t    skew;           /* Mask for italic (0x5555)           */
   uint16_t    flags;          /* Various flags:
                                  Set for system font
                                   Bit 1: Set if horizontal offset
                                          table is in use
                                   Bit 2: Set if Motorola format
                                   Bit 3: Set if non-proportional    */
   uint8_t     *hor_table;     /* Pointer to horizontal offset table */
   uint16_t    *off_table;     /* Pointer to character offset table  */
   uint16_t    *dat_table;     /* Pointer to font image              */
   uint16_t    form_width;     /* Width of the font image            */
   uint16_t    form_height;    /* Height of the font image           */
   font_hdr    *next_font;     /* Pointer to next font header        */
} FONT_HDR;
!end_verbatim

(!B)Note:(!b) As (!nolink [GEM]) was originally developed on the PC, all data is normally
in the (!I)Intel format(!i), so that on computers with Motorola processors we
have to swap the upper and lower bytes of all words. (!B)Warning:(!b) To be
able to interrogate the Motorola/Intel flag (bit 2 of the component
(!I)flags(!i)), one must actually know already in which format the font is
present. The solution to this problem: Start from the assumption that
bit 10 of the flag will never be used and test whether bit 2 of the
67th byte of the header is set (because then the font is present in
the Motorola format).

!label Character offset table
(!B)The character offset table(!b) contains entries of 16-bit values that
hold the horizontal pixel offsets for each character within the font
raster. So for the index one must use the character's ASCII code
minus the ASCII code of the first character in the font (component
(!I)first_ade(!i)). The width of a character results from the difference to
the offset value of the next higher character; so that this formula
works for the last character as well, the table always has one more
entry than the number of characters available.

!label Horizontal offset table
(!B)The horizontal offset table(!b) contains positive or negative offset
values that are added to the X-poisition before the output of a
character; however, this is supported only for a few fonts.

Last but not least one should point out that a normal application
should never have to deal with this format; this infomation is of
importance only for developers of font editors or GDOS versions.

See also: (!nl)
(!link [GDOS][About the GDOS]) ~ 
NVDI ~ SpeedoGDOS ~
(!link [Vector fonts][Details about vector fonts]) ~ vst_alignment ~ vst_load_fonts ~
vst_unload_fonts ~ vqt_fontheader
!end_node

!else

!begin_node FONT_HDR
#!html_name FONT_HDR

!label Bitmap-Fonts, Header bei

Die folgende Struktur beschreibt den Datei-Header fÅr einen Bitmap
Zeichensatz im (!I)Digital Research(!i) Standardformat. In diesem Format
wird der Font als breites, monochromes Rasterbild organisiert; die Breite
des Rasters ist die Summe aller Zeichenbreiten, die Rasterhîhe entspricht
der Hîhe eines einzelnen Zeichens. (!B)Daraus folgt:(!b) Der linke Rand
eines Zeichens muss (!I)nicht(!i) unbedingt auf eine Bytegrenze fallen; nur
am Ende jeder Rasterzeile wird soweit mit Null-Bits aufgefÅllt, bis der
nÑchste Zeilenbeginn wieder auf eine Wortgrenze fÑllt.

!begin_verbatim
typedef struct font_hdr
{
   int16_t     font_id;        /* Zeichensatz-Nummer                    */
   int16_t     point;          /* Grîûe in Punkten                      */
   int8_t      name[32];       /* Name des Zeichensatzes                */
   uint16_t    first_ade;      /* erstes Zeichen im Zeichensatz         */
   uint16_t    last_ade;       /* letztes Zeichen im Zeichensatz        */
   uint16_t    top;            /* Abstand: Topline     <-> Baseline     */
   uint16_t    ascent;         /* Abstand: Ascentline  <-> Baseline     */
   uint16_t    half;           /* Abstand: Halfline    <-> Baseline     */
   uint16_t    descent;        /* Abstand: Descentline <-> Baseline     */
   uint16_t    bottom;         /* Abstand: Bottomline  <-> Baseline     */
   uint16_t    max_char_width; /* grîûte Zeichenbreite                  */
   uint16_t    max_cell_width; /* grîûte Zeichenzellenbreite            */
   uint16_t    left_offset;    /* linker Offset fÅr Kursivschrift       */
   uint16_t    right_offset;   /* rechter Offset fÅr Kursivschrift      */
   uint16_t    thicken;        /* Verbreiterungsfaktor fÅr Fettschrift  */
   uint16_t    ul_size;        /* Dicke der Unterstreichung             */
   uint16_t    lighten;        /* Maske fÅr helle Schrift (0x5555)      */
   uint16_t    skew;           /* Maske fÅr Kursivschrift (0x5555)      */
   uint16_t    flags;          /* verschiedene Flags:
                                  gesetzt falls System-Font
                                  Bit-1: gesetzt falls Horizontal
                                         Offset-Table benutzt wird
                                  Bit-2: gesetzt falls Motorola-Format
                                  Bit-3: gesetzt falls nicht proport.   */
   uint8_t    *hor_table;      /* Zeiger auf Horizontal-Offset-Table    */
   uint16_t    *off_table;     /* Zeiger auf Character-Offset-Table     */
   uint16_t    *dat_table;     /* Zeiger auf Fontimage                  */
   uint16_t    form_width;     /* Breite des Zeichensatz-Image          */
   uint16_t    form_height;    /* Hîhe des Zeichensatz-Image            */
   font_hdr *next_font;        /* Zeiger auf nÑchsten Font-Header       */
} FONT_HDR;
!end_verbatim

(!B)Hinweis:(!b) Da das (!nolink [GEM]) ursprÅnglich auf dem PC entwickelt wurde, liegen
alle Daten normalerweise im (!I)Intel-Format(!i) vor, so daû auf Maschinen
mit Motorola-Prozessoren bei allen Wîrtern oberes und unteres Byte
vertauscht werden mÅssen. (!B)Achtung:(!b) Um das Motorola/Intel-Flag
(Bit-2 der Komponente (!I)flags(!i)) abfragen zu kînnen, muss eigentlich
schon bekannt sein, in welchem Format der Zeichensatz vorliegt. Die Lîsung
des Problems: Davon ausgehen, dass Bit-10 der Flags niemals benutzt sein
wird, und testen, ob Bit-2 im 67-ten Byte des Headers gesetzt ist (denn dann
liegt der Zeichensatz im Motorola-Format vor).

!label Character-Offset-Table
(!B)Die Character-Offset-Table(!b) besitzt EintrÑge von 16-Bit-Werten, die
den horizontalen Pixeloffset fÅr jedes Zeichen innerhalb des Fontrasters
angibt. Als Index muss man also den ASCII-Code abzÅglich des ASCII-Codes des
ersten Zeichens im Zeichensatz benutzen (Komponente (!I)first_ade(!i)). Die
Breite eines Zeichens ergibt sich aus der Differenz zum Offsetwert des
nÑchsthîheren Zeichens; damit diese Formel auch fÅr das letzte Zeichen
funktioniert, enthÑlt die Tabelle Åbrigens stets einen Eintrag mehr, als
Zeichen verfÅgbar sind.

!label Horizontal-Offset-Table
(!B)Die Horizontal-Offset-Table(!b) enthÑlt positive oder negative
Offsetwerte die vor der Ausgabe eines Zeichens auf die x-Position addiert
werden; sie wird allerdings nur bei wenigen ZeichensÑtzen unterstÅtzt.

Last but not least sei darauf hingewiesen, daû sich eine normale Anwendung
niemals mit diesem Format befassen muû; lediglich fÅr Entwickler von
Zeichensatzeditoren oder GDOS-Versionen sind diese Informationen wichtig.

Querverweis: (!nl)
(!link [GDOS][Das GDOS]) ~ NVDI ~ SpeedoGDOS ~
(!link [Vektorfonts][Details zu Vektorschriften]) ~ vst_alignment ~ vst_load_fonts ~
vst_unload_fonts ~ vqt_fontheader
!end_node

!endif
