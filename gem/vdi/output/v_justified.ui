!iflang [english]

!begin_node v_justified
#!html_name v_justified

(!begin_liste) [Availability]

!item [Name:]
ØJustified graphics textÆ - Outputs positioned graphic text.

!item [Opcode:]
11 (GDP 10)

!item [Syntax:]
void v_justified ( int16_t handle, int16_t x, int16_t y, int8_t *string, int16_t length,
                   int16_t word_space, int16_t char_space, [int16_t *char_width] );

!item [Description:]
The call v_justified outputs graphic text on a workstation, lengthening or
shortening the text string to a specified length by modifying the inter-word or
inter-character spacing. If using a vector font, the requested width of the
string refers to the sum of the character widths; it does not take remainder
data or characters extending outside the edges of the em-square into account.
The following apply:
               
!begin_xlist [char_space] !compressed
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [x]
X-coordinate, (!U)and(!u)
!item [y]
Y-coordinate of the text start point
!item [string]
Character string as ASCII-codes (NULL-terminated)
!item [length]
Requested length of the string, in X-axis  pixels
!item [word_space]
Inter-word spacing:
!begin_xlist [<>0 =] !compressed
!item [~~0 =]
Do not allow (!nolink [VDI]) to modify inter-word spacing
!item [<>0 =]
Allow (!nolink [VDI]) to modify inter-word spacing
!end_xlist
!item [char_space]
Inter-character spacing:
!begin_xlist [<>0 =] !compressed
!item [~~0 =]
Do not allow (!nolink [VDI]) to modify inter-character spacing
!item [<>0 =]
Allow (!nolink [VDI]) to modify inter-character spacing
!end_xlist
!end_xlist

The text will be aligned left and right with reference to the start point and
the length. To bring the text to the desired length, one has the choice of
stretching the word and/or the character interspaces.

The (!link [text attributes][Attributes, Text]) and the
(!link [writing mode][Write mode]) will be respected. Characters that are
missing in the font will be substituted by a replacement symbol (e.g. the
question-mark).

For vector fonts the length specification refers to the sum of the character
widths - overhangs to left and right are not taken into account.

From (!nolink [GEM])/3 on the function was changed appreciably. The parameter
(!I)char_width(!i) was added. It returns the number of pixels of each character
in the output character string. With this, there has also been a change in the
parameters of (!I)word_space(!i) and (!I)char_space(!i) as follows:
               
!begin_xlist [char_space] !compressed
!item [Parameter]
Meaning
!item [~]
~
!item [word_space]
Inter-word spacing:
!begin_xlist [0x0000 =] !compressed
!item [0x0000 =]
No stretching of interspaces, no output information returned
!item [0x0001 =]
Stretch interspaces, no output information returned
!item [0x8000 =]
No stretching of interspaces, output information ((!I)char_space(!i))
is returned
!item [0x8001 =]
Stretch interspaces, output information ((!I)char_space(!i)) is returned
!end_xlist
!item [char_space]
Inter-character spacing
!begin_xlist [0x0000 =] !compressed
!item [0x0000 =]
No stretching of interspaces
!item [0x0001 =]
Stretch interspaces
!end_xlist
!end_xlist


!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
Supported by all drivers. This function comprises one of the 10
(!nolink [VDI]) GDP's (Generalized Drawing Primitives). Although all current
drivers support all GDP's, their availability is not guaranteed and may vary.
To check for a particular GDP refer to the table returned by v_opnvwk or
v_opnwk.
               
!item [Group:]
Output functions

!item [See also:]
(!link [Binding] [Bindings for v_justified]) ~ vswr_mode  ~ vs_color ~
vst_alignment ~ vst_height ~ vst_point ~ vst_rotation ~ vst_font ~
vst_color ~ vst_effects

(!ende_liste)
!end_node



!begin_node Bindings for v_justified
#!html_name Bindings_for_v_justified

!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void v_justified ( int16_t handle, int16_t x, int16_t y, int8_t *string, int16_t length,
                   int16_t word_space, int16_t char_space, [int16_t *char_width] );

!item [Binding:]
!begin_verbatim
void v_justified (int16_t handle, int16_t x, int16_t y,
                  int8_t *string, int16_t length,
                  int16_t word_space, int16_t char_space,
                  [int16_t *char_width] )
{
   int16_t *tmp;

   ptsin[0]  = x;
   ptsin[1]  = y;
   ptsin[2]  = length;
   ptsin[3]  = 0;

   intin[0] = word_space;
   intin[1] = char_space;

   tmp = &(intin[2]);
   while (*tmp++ = *string++)
      ;

   contrl[0] = 11;
   contrl[1] = 2;
   contrl[3] = (int16_t) (tmp-&(intin))-1;

   contrl[4] = 0;  /* If word_space equals 0x0000 or 0x0001 */
   contrl[4] = n;  /* If word_space equals 0x8000 or 0x8001 */

   contrl[5] = 10;
   contrl[6] = handle;

   vdi ();

   /* If word_space equals 0x8000 or 0x8001 */
   char_with[0..n-1] = intout[0..n-1];

}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]     !! 11    # Function Opcode
contrl+2  !! contrl[1]     !! 2     # entry in ptsin
contrl+4  !! contrl[2]     !! 0     # entry in ptsout
contrl+6  !! contrl[3]     !! n+2   # entry in intin
contrl+8  !! contrl[4]     !! 0     # entry in intout;
~         !! ~             !! ~~~~~~~ word_space is 0x0000 or 0x0001
contrl+8  !! contrl[4]     !! n     # entry in intout;
~         !! ~             !! ~~~~~~~ number is 0x8000 or 0x8001
contrl+10 !! contrl[5]     !! 10    GDP-Nummer
contrl+12 !! contrl[6]     !! handle
intin     !! intin[0]      !! word_space
intin+2   !! intin[1]      !! char_space
intin+4   !! intin[2..n+1] !! string[0..n-1]
ptsin     !! ptsin[0]      !! x
ptsin+2   !! ptsin[1]      !! y
ptsin+4   !! ptsin[2]      !! length
ptsin+6   !! ptsin[3]      !! 0
intout    !! intout[0..n-1] !! char_with[0..n-1]
~         !! ~              !! ~~~~~~~ if word_space is 0x8000 or 0x8001
!end_table

(!ende_liste)
!end_node

!else

!begin_node v_justified
#!html_name v_justified

(!begin_liste) [Beschreibung]

!item [Name:]
ØJustified Graphics TextÆ - Positionierter Graphiktext.

!item [VDI-Nummer:]
11 (GDP 10)

!item [Deklaration:]
void v_justified ( int16_t handle, int16_t x, int16_t y, int8_t *string, int16_t length,
                   int16_t word_space, int16_t char_space, [int16_t *char_width] );

!item [Beschreibung:]
Die Funktion gibt einen String auf einer Workstation aus. Es gilt:

!begin_xlist [char_space] !compressed
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [x]
x-Koordinate
!item [y]
y-Koordinate des Punktes fÅr die (!nolink [Textausrichtung])
!item [string]
Adresse der Zeichenkette
!item [length]
LÑnge des Textes bzgl. der x-Achse
!item [word_space]
WortzwischenrÑume
!begin_xlist [<>0 =] !compressed
!item [~~0 =]
keine Dehnung der ZwischenrÑume
!item [<>0 =]
Dehnung der ZwischenrÑume
!end_xlist
!item [char_space]
ZeichenzwischenrÑume
!begin_xlist [<>0 =] !compressed
!item [~~0 =]
keine Dehnung der ZwischenrÑume
!item [<>0 =]
Dehnung der ZwischenrÑume
!end_xlist
!end_xlist

Der Text wird links und rechts bezogen auf den Startpunkt und die LÑnge
justiert. Um den Text auf die erforderliche LÑnge zu bringen, hat man die
Wahl zwischen Dehnung der Wort- und/oder ZeichenzwischenrÑume.

(!B)Hinweis:(!b) Die Text-Attribute und der Schreibmodus werden
berÅcksichtigt. Im Zeichensatz fehlende Zeichen werden durch ein
Ersatzsymbol (z.B. das Fragezeichen) ersetzt.

Bei Vektorfonts bezieht sich die LÑngenangabe auf die Summation der
Zeichenbreiten - öberhÑnge nach links und rechts werden nicht
berÅcksichtigt.

Ab GEM/3 wurde die Funktion erheblich verÑndert. Der Parameter (!I)char_width(!i) wurde neu aufgenommen.
Er gibt die Anzahl der Pixel jedes Buchstabens der ausgegebenen Zeichenkette zurÅck. Dabei habe sich
auch die Parameter (!I)word_space(!i) und (!I)char_space(!i) wie folgt geÑndert:
!begin_xlist [char_space] !compressed
!item [Parameter]
Bedeutung
!item [~]
~
!item [word_space]
WortzwischenrÑume
!begin_xlist [0x0000 =] !compressed
!item [0x0000 =]
keine Dehnung der Zwischen!-rÑume, keine Ausgabeinformationen
!item [0x0001 =]
Dehnung der ZwischenrÑume, keine Ausgabeinformationen
!item [0x8000 =]
keine Dehnung der Zwischen!-rÑume, Ausgabeinformationen ((!I)char_space(!i)) werden zurÅckgegeben
!item [0x8001 =]
Dehnung der ZwischenrÑume, Ausgabeinformationen ((!I)char_space(!i)) werden
zurÅckgegeben
!end_xlist
!item [char_space]
ZeichenzwischenrÑume
!begin_xlist [0x0000 =] !compressed
!item [0x0000 =]
keine Dehnung der ZwischenrÑume
!item [0x0001 =]
Dehnung der ZwischenrÑume
!end_xlist
!end_xlist


!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Supported by all drivers. This function composes one of the
10 VDI GDP's (Generalized Drawing Primitives). Although all
current drivers support all GDP's, their availability is
not guaranteed and may vary. To check for a particular GDP
refer to the table returned by v_opnvwk or v_opnwk.

!item [Gruppe:]
Ausgabefunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr v_justified]) ~ vswr_mode  ~  vs_color  ~
vst_alignment ~ vst_height ~ vst_point ~  vst_rotation ~ vst_font ~
vst_color ~  vst_effects

(!ende_liste)
!end_node



!begin_node Bindings fÅr v_justified
#!html_name Bindings_for_v_justified

!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void v_justified ( int16_t handle, int16_t x, int16_t y, int8_t *string, int16_t length,
                   int16_t word_space, int16_t char_space, [int16_t *char_width] );

!item [Umsetzung:]
!begin_verbatim
void v_justified (int16_t handle, int16_t x, int16_t y,
                  int8_t *string, int16_t length,
                  int16_t word_space, int16_t char_space,
                  [int16_t *char_width] )
{
   int16_t *tmp;

   ptsin[0]  = x;
   ptsin[1]  = y;
   ptsin[2]  = length;
   ptsin[3]  = 0;

   intin[0] = word_space;
   intin[1] = char_space;

   tmp = &(intin[2]);
   while (*tmp++ = *string++)
      ;

   contrl[0] = 11;
   contrl[1] = 2;
   contrl[3] = (int16_t) (tmp-&(intin))-1;

   contrl[4] = 0;  /* if word_space equals 0x0000 or 0x0001 */
   contrl[4] = n;  /* if word_space equals 0x8000 or 0x8001 */

   contrl[5] = 10;
   contrl[6] = handle;

   vdi ();

   /* if word_space equals 0x8000 or 0x8001 */
   char_with[0..n-1] = intout[0..n-1];

}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]     !! 11    # Opcode der Funktion
contrl+2  !! contrl[1]     !! 2     # EintrÑge in ptsin
contrl+4  !! contrl[2]     !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]     !! n+2   # EintrÑge in intin
contrl+8  !! contrl[4]     !! 0     # EintrÑge in intout;
~         !! ~             !! ~~~~~~~ if word_space 0x0000 or 0x0001
contrl+8  !! contrl[4]     !! n     # EintrÑge in intout;
~         !! ~             !! ~~~~~~~ if word_space 0x8000 or 0x8001
contrl+10 !! contrl[5]     !! 10    GDP-Nummer
contrl+12 !! contrl[6]     !! handle
intin     !! intin[0]      !! word_space
intin+2   !! intin[1]      !! char_space
intin+4   !! intin[2..n+1] !! string[0..n-1]
ptsin     !! ptsin[0]      !! x
ptsin+2   !! ptsin[1]      !! y
ptsin+4   !! ptsin[2]      !! length
ptsin+6   !! ptsin[3]      !! 0
intout    !! intout[0..n-1] !! char_with[0..n-1]
~         !! ~              !! ~~~~~~~ if word_space 0x8000 or 0x8001
!end_table

(!ende_liste)
!end_node

!endif
