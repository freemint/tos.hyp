!iflang [english]

!begin_node v_etext

(!begin_liste) [Availability]

!item [Name:]
Ø?Æ - Output text graphically at a given position.

!item [Opcode:]
11 (GDP 11)

!item [Syntax:]
void v_etext( int16_t handle, int16_t x, int16_t y, const char *string, int16_t *offsets);

!item [Description:]
The call v_etext writes each character of a text string relative to the
specified starting position. It is used typically to override the driver's
default method of justification. This function applies to printers and
plotters only.

!begin_xlist !compressed [offsets]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [count]
Number of points
!item [x]
X-coordinate of starting position
!item [y]
Y-coordinate of starting position
!item [string]
Address of NULL-terminated text string
!item [offsets]
Address of int16_t array of position offsets. (!nl)

Each offset is a (!I)x,y(!i) pair of signed integers that indicate the
position of the next character in the string relative to the
starting position. The first offset pair affects the position of the first
character in the string. Some drivers ignore the (!I)y(!i) component of each
pair, in which case (!I)y(!i) is assumed to equal zero.
!end_xlist

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
(!nolink [GEM])/3 Release 3.1

!item [Group:]
Output functions

!item [See also:]
(!link [Binding] [Bindings for v_etext]) 

(!ende_liste)
!end_node



!begin_node Bindings for v_etext
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void v_etext( int16_t handle, int16_t x, int16_t y, int16_t *string, int16_t *offsets);

!item [Binding:]
!begin_verbatim
void v_etext( int16_t handle, int16_t x, int16_t y,
              int16_t *string, int16_t *offsets)
{
   ptsin[0]  = x;
   ptsin[1]  = y;
   ptsin[2]  = offsets[0];
   ptsin[3]  = offsets[2];
   .
   .
   ptsin[2n+1]  = offsets[2n-1];
   
   i = 0;
   while (intin[i++] = *string++)
      ;

   contrl[0] = 11;
   contrl[1] = length og string + 1 ;
   contrl[3] = length of string;
   contrl[4] = 11;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]      !! 11    # Function Opcode
contrl+2  !! contrl[1]      !! n + 1 # Entry in ptsin
contrl+4  !! contrl[2]      !! 0     # Entry in ptsout
contrl+6  !! contrl[3]      !! n     # Entry in intin
contrl+8  !! contrl[4]      !! 0     # Entry in intout
contrl+10 !! contrl[5]      !! 11
contrl+12 !! contrl[6]      !! handle
intin     !! intin[0..n-1] !! string[0..n-1]
ptsin     !! ptsin[0]      !! x
ptsin+2   !! ptsin[1]      !! y
ptsin+4   !! ptsin[2..2n+1]   !! offsets[0..2n-1]
!end_table

(!ende_liste)
!end_node

!else

!begin_node v_etext

(!begin_liste) [Beschreibung]

!item [Name:]
Ø?Æ - Text grafisch ausgaben

!item [VDI-Nummer:]
11 (GDP 11)

!item [Deklaration:]
void v_etext( int16_t handle, int16_t x, int16_t y, const char *string, int16_t *offsets);

!item [Beschreibung:]
This function writes each character of a text string relative to the specified
starting position. It is typically used to override the driver's default
method of justification. This function applies to printers and plotters only.

!begin_xlist !compressed [offsets]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [count]
Anzahl der Punkte
!item [x]
x-coordinate of starting position
!item [y]
y-coordinate of starting position
!item [string]
Address of null-terminated text string
!item [offsets]
Address of int16_t array of position offsets

Each offset is an (!I)x,y(!i) pair of signed integers that indicate the 
position of the next character in the string relative to the
starting position. The first offset pair affects the position of
the first character in the string. Some driver ignore the (!I)y(!i)
component of each pair, in which case (!I)y(!i) is assumed to equal
zero.
!end_xlist

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
(!nolink [GEM])/3 Release 3.1

!item [Gruppe:]
Ausgabefunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr v_etext]) 

(!ende_liste)
!end_node



!begin_node Bindings fÅr v_etext
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void v_etext( int16_t handle, int16_t x, int16_t y, int16_t *string, int16_t *offsets);

!item [Umsetzung:]
!begin_verbatim
void v_etext( int16_t handle, int16_t x, int16_t y,
              int16_t *string, int16_t *offsets)
{
   ptsin[0]  = x;
   ptsin[1]  = y;
   ptsin[2]  = offsets[0];
   ptsin[3]  = offsets[2];
   .
   .
   ptsin[2n+1]  = offsets[2n-1];
   
   i = 0;
   while (intin[i++] = *string++)
      ;

   contrl[0] = 11;
   contrl[1] = length og string + 1 ;
   contrl[3] = length of string;
   contrl[4] = 11;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]      !! 11    # Opcode der Funktion
contrl+2  !! contrl[1]      !! n + 1 # EintrÑge in ptsin
contrl+4  !! contrl[2]      !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]      !! n     # EintrÑge in intin
contrl+8  !! contrl[4]      !! 0     # EintrÑge in intout
contrl+10 !! contrl[5]      !! 11
contrl+12 !! contrl[6]      !! handle
intin     !! intin[0..n-1] !! string[0..n-1]
ptsin     !! ptsin[0]      !! x
ptsin+2   !! ptsin[1]      !! y
ptsin+4   !! ptsin[2..2n+1]   !! offsets[0..2n-1]
!end_table

(!ende_liste)
!end_node

!endif
