!iflang [english]

!begin_node v_gtext

(!begin_liste) [Availability]

!item [Name:]
ØGraphic textÆ - Output a graphic text.

!item [Opcode:]
8

!item [Syntax:]
void v_gtext ( int16_t handle, int16_t x, int16_t y, int8_t *string );

!item [Description:]
The call v_gtext outputs graphically a NULL-terminated text string on a
workstation. The following apply:

!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [x]
X-coordinate, (!U)and(!u)
!item [y]
Y-coordinate of alignment point of text
!item [string]
Character string as ASCII-codes (NULL-terminated)
!end_xlist

(!B)Notes:(!b) The speed of the output can be increased if the following points
are respected:
!begin_itemize !compressed
!item Output with byte alignment.
!item Preferably do not use (!nolink [clipping]).
!item With non-proportional, 8 pixel wide fonts output in Replace mode and
without clipping, else in Transparent mode.
!end_itemize

The (!link [text attributes][Attributes, Text]) and the
(!link [writing mode][Write mode]) will be respected. If a vector font has been
selected, then neither pair nor track (!link [kerning][Kerning]) will be
respected; thus it may be better to fall back on the v_ftext function.
In addition, character positioning is pixel-by-pixel, i.e. vqt_width supplies
the required step sizes.

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
Supported by all drivers.

!item [Group:]
Output functions

!item [See also:]
(!link [Binding] [Bindings for v_gtext]) ~ vswr_mode ~ vs_color ~ vst_alignment ~
vst_height ~ vst_point ~ vst_rotation ~ vst_font ~
vst_color ~ vst_effects ~ v_ftext

(!ende_liste)
!end_node



!begin_node Bindings for v_gtext
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void v_gtext ( int16_t handle, int16_t x, int16_t y, int8_t *string );

!item [Binding:]
!begin_verbatim
void v_gtext (int16_t handle, int16_t x, int16_t y,
              int8_t *string)
{
   int16_t i;

   ptsin[0]  = x;
   ptsin[1]  = y;

   i = 0;
   while (intin[i++] = *string++)
      ;

   contrl[0] = 8;
   contrl[1] = 1;
   contrl[3] = -i;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]     !! 8     # Function Opcode
contrl+2  !! contrl[1]     !! 1     # Entry in ptsin
contrl+4  !! contrl[2]     !! 0     # Entry in ptsout
contrl+6  !! contrl[3]     !! n     # Entry in intin
contrl+8  !! contrl[4]     !! 0     # Entry in intout
contrl+12 !! contrl[6]     !! handle
intin     !! intin[0..n-1] !! string[0..n-1]
ptsin     !! ptsin[0]      !! x
ptsin+2   !! ptsin[1]      !! y
!end_table

(!ende_liste)
!end_node

!else

!begin_node v_gtext

(!begin_liste) [Beschreibung]

!item [Name:]
ØGraphic TextÆ - gibt einen Text aus.

!item [VDI-Nummer:]
8

!item [Deklaration:]
void v_gtext ( int16_t handle, int16_t x, int16_t y, int8_t *string );

!item [Beschreibung:]
Die Funktion gibt einen Text auf einer Workstation aus. Es gilt:

!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [x]
x-Koordinate
!item [y]
y-Koordinate des Textes
!item [string]
Adresse der Zeichenkette
!end_xlist

(!B)Hinweis:(!b) Die Geschwindigkeit der Ausgabe lÑût sich beschleunigen,
wenn folgende Punkte beachtet werden:

!begin_itemize !compressed
!item auf Bytegrenzen justiert ausgeben.
!item mîglichst kein Clipping benutzen.
!item bei nichtproportionalen, acht Pixel breiten ZeichensÑtzen im
      Replace-Modus und ohne (!nolink [Clipping]), sonst im Transparent-Modus
      ausgeben.
!end_itemize

Die Text-Attribute und der Schreibmodus werden beachtet. Ist ein Vektorfont
eingestellt, so wird weder Pair- noch Track-Kerning beachtet; daher sollte
ggfs. besser auf die v_ftext-Funktion zurÅckgegriffen werden. Die
Zeichenpositionierung erfolgt auûerdem pixelweise, d.h. vqt_width() liefert
hierfÅr die passenden Schrittgrîûen.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Supported by all drivers.

!item [Gruppe:]
Ausgabefunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr v_gtext]) ~ vswr_mode ~ vs_color ~ vst_alignment ~
vst_height ~ vst_point ~  vst_rotation ~ vst_font ~
vst_color  ~  vst_effects ~ v_ftext

(!ende_liste)
!end_node



!begin_node Bindings fÅr v_gtext
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void v_gtext ( int16_t handle, int16_t x, int16_t y, int8_t *string );

!item [Umsetzung:]
!begin_verbatim
void v_gtext (int16_t handle, int16_t x, int16_t y,
              int8_t *string)
{
   int16_t i;

   ptsin[0]  = x;
   ptsin[1]  = y;

   i = 0;
   while (intin[i++] = *string++)
      ;

   contrl[0] = 8;
   contrl[1] = 1;
   contrl[3] = -i;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]     !! 8     # Opcode der Funktion
contrl+2  !! contrl[1]     !! 1     # EintrÑge in ptsin
contrl+4  !! contrl[2]     !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]     !! n     # EintrÑge in intin
contrl+8  !! contrl[4]     !! 0     # EintrÑge in intout
contrl+12 !! contrl[6]     !! handle
intin     !! intin[0..n-1] !! string[0..n-1]
ptsin     !! ptsin[0]      !! x
ptsin+2   !! ptsin[1]      !! y
!end_table

(!ende_liste)
!end_node

!endif
