!iflang [english]

!begin_node v_create_ctab

(!begin_liste) [Availability]

!item [Name:]
ØCreate color tableÆ

!item [Opcode:]
206 (Sub-Opcode 8)

!item [Syntax:]
COLOR_TAB *v_create_ctab( int16_t handle, int32_t color_space, uint32_t px_format );

!item [Description:]
The call v_create_ctab creates a color table in the color space
(!I)color_space(!i) for a bitmap with (!I)px_format & PX_BITS(!i) bits.
The color table is initialized with the standard colors for this
bit-depth. The application can write to the color table and alter the color
entries; however if the colors are altered, one has to obtain a new ID by
calling rev_get_ctab_id and enter this in the structure element <map_id>.
Otherwise false colors will be output.
               
After use the color table can be cleared with v_delete_ctab.

!begin_xlist !compressed [color_space]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier

!item [color_space]
Color space (at present only 0 for the color space set, or CSPACE_RGB)

!item [px_format]
Pixel format (only the lower 8 bits will be evaluated, i.e. bits per pixel)

!end_xlist


!item [(!nolink [Return]) value:]
The function returns a pointer to the color table.

!item [Availability:]
As of NVDI 5.00.

!item [Group:]
Color table functions

!item [See also:]
(!link [Binding] [Bindings for v_create_ctab])

(!ende_liste)
!end_node



!begin_node Bindings for v_create_ctab
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
COLOR_TAB *v_create_ctab( int16_t handle, int32_t color_space, uint32_t px_format );

!item [Binding:]
!begin_verbatim
COLOR_TAB *v_create_ctab( int16_t handle, int32_t color_space, 
                          uint32_t px_format )
{
   intin[0..1] = color_space; 
   intin[2..3] = px_format; 

   contrl[0] = 206;
   contrl[1] = 0;
   contrl[3] = 4;
   contrl[5] = 8;
   contrl[6] = handle;

   vdi ();

   return ( (uint32_t) intout[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]    !! 206   # Function opcode
contrl+2  !! contrl[1]    !! 0     # Entry in ptsin
contrl+4  !! contrl[2]    !! 0     # Entry in ptsout
contrl+6  !! contrl[3]    !! 4     # Entry in intin
contrl+8  !! contrl[4]    !! 2     # Entry in intout
contrl+10 !! contrl[5]    !! 8     # Sub-opcode
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0..1]  !! color_space
intin+4   !! intin[2..3]  !! px_format
intout    !! intout[0..1] !! Return value
!end_table

(!ende_liste)
!end_node

!else

!begin_node v_create_ctab

(!begin_liste) [Beschreibung]

!item [Name:]
ØCreate Color TableÆ - Farbtabelle erzeugen

!item [VDI-Nummer:]
206 (Unterfunktion 8)

!item [Deklaration:]
COLOR_TAB *v_create_ctab( int16_t handle, int32_t color_space, uint32_t px_format );

!item [Beschreibung:]
Diese Funktion legt eine Farbtabelle im Farbraum (!I)color_space(!i) fÅr eine
Bitmap mit (!I)px_format & PX_BITS(!i) Bits an. Die Farbtabelle ist mit den
Standardfarben fÅr diese Bittiefe initialisiert. Die Applikation kann die
Farbtabelle beschreiben und die FarbeintrÑge Ñndern. Wenn die Farben geÑndert
werden muû aber Åber v_get_ctab_id eine neue Kennung angefordert werden und im
Strukturelement <map_id> eingetragen werden. Andernfalls wÅrde mit Fehlfarben
ausgegeben werden.

Die Farbtabelle kann nach Gebrauch mit v_delete_ctab freigegeben
werden.

!begin_xlist !compressed [color_space]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation

!item [color_space]
Farbraum (z.Zt.nur 0 fÅr eingestellten Farbraum oder CSPACE_RGB)

!item [px_format]
Pixelformat (nur die unteren 8 Bit werden ausgewertet, d.h. Bits pro Pixel)

!end_xlist


!item [Ergebnis:]
Die Funktion liefert den Zeiger auf die Farbtabelle zurÅck.

!item [VerfÅgbar:]
ab NVDI 5.00

!item [Gruppe:]
Farbtabellenfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr v_create_ctab])

(!ende_liste)
!end_node



!begin_node Bindings fÅr v_create_ctab
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
COLOR_TAB *v_create_ctab( int16_t handle, int32_t color_space, uint32_t px_format );

!item [Umsetzung:]
!begin_verbatim
COLOR_TAB *v_create_ctab( int16_t handle, int32_t color_space, 
                          uint32_t px_format )
{
   intin[0..1] = color_space; 
   intin[2..3] = px_format; 

   contrl[0] = 206;
   contrl[1] = 0;
   contrl[3] = 4;
   contrl[5] = 8;
   contrl[6] = handle;

   vdi ();

   return ( (uint32_t) intout[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]    !! 206   # Opcode der Funktion
contrl+2  !! contrl[1]    !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]    !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]    !! 4     # EintrÑge in intin
contrl+8  !! contrl[4]    !! 2     # EintrÑge in intout
contrl+10 !! contrl[5]    !! 8     # Sub-Opcode
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0..1]  !! color_space
intin+4   !! intin[2..3]  !! px_format
intout    !! intout[0..1] !! RÅckgabewert
!end_table

(!ende_liste)
!end_node

!endif
