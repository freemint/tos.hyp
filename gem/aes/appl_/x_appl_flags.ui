!iflang [english]

!begin_node x_appl_flags
(!begin_liste) [Availability]
!item [Name:]
ØControl execution flagsÆ - (Geneva)

!item [Opcode:]
28928

!item [Syntax:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );

!item [Description:]
The call x_appl_flags controls the execution flags that are used when
determining how an application gets run. It works in two modes, globally and
for a particular application.
!begin_xlist [Mode 0]
!item [Mode 0:]  (!B)Get by index (!b) (!nl)
Get the 'nth' block of (!nolink [global]) application flags. If (!I)index(!i)
is zero, the Default flags will be retrieved. If (!I)flags(!i) is not NULL, the
flags will be copied into the (!nolink [APPFLAGS]) structure pointed to by the
(!I)flags(!i) parameter.

!item [Mode 1:]  (!B)Set by index (!b) (!nl)
Set the 'nth' block of (!nolink [global]) application flags. If (!I)flags(!i) is not
NULL, the flags will be copied from the (!nolink [APPFLAGS]) structure pointed
to by the (!I)flags(!i) parameter. If (!I)index(!i) is zero, the Default flags
will be set, in which case the (!I)name(!i) and (!I)desc(!i) fields of the
APPFLAGS are not altered. If (!I)index(!i) is less than zero, a new APPFLAGS
structure will be added to the end of the (!nolink [global]) list, and it will
be given the contents of (!I)flags.(!i)

!item [Mode 2:]  (!B)Delete by index (!b) (!nl)
Delete the 'nth' block of (!nolink [global]) application flags. The (!I)index(!i)
parameter must be a number greater than zero (since the Default flags cannot be
deleted.) The (!I)flags(!i) parameter is not used in this mode.

!item [Mode 3:]  (!B)Get by application ID (!b) (!nl)
Get the application flags for a particular process. (!I)index(!i) must be a valid
application ID. If (!I)flags(!i) is not NULL, the flags will be copied into the
(!nolink [APPFLAGS]) structure pointed to by the (!I)flags(!i) parameter.

!item [Mode 4:] (!B)Set by application ID (!b) (!nl)
Set the application flags for a particular process. (!I)index(!i) must be a valid
application ID. If (!I)flags(!i) is not NULL, the flags will be set for the
application.

!label X_APF_SEARCH
!item [Mode 5:] (!B)(X_APF_SEARCH)(!b) (since Update 004) (!nl)
Use the APPFLAGS (!I)name(!i) element to search for the set of flags that would
be used by Geneva were it to run the application with that name. Note that the
(!I)name(!i) element is overwritten in the process. The (!I)index(!i) parameter
is not used.

(!B)Example:(!b) Get the flags for FOO.PRG and force it to run in
single-tasking mode:
!begin_verbatim
APPFLAGS a;
SHWRCMD shwrcmd;

strcpy( a.name, "FOO.PRG" );
x_appl_flags( X_APF_SEARCH, 0, &a );
a.flags.s.multitask = 0;
shwrcmd.name = "FOO.PRG";
shwrcmd.app_flags = a.flags.l;
shel_write( XSHD_FLAGS|XSHW_RUNANY, 0, 0, 
       (char *)&shwrcmd, "" );
!end_verbatim
!end_xlist
(!B)Note:(!b) Changing the multitask attribute of an application in this manner
will have no effect, since this can only be changed before the application is
launched.

Descriptions of each of the available flags can be found in the section of the
manual describing the Task Manager's "Flags" dialog.
               
!item [(!nolink [Return]) value:]
0: Out of memory (mode 1) (!nl)
   Flags not found (all modes)

!item [Availability:]
The function is available only under Geneva.

!item [Group:]
Application library

!item [See also:]
(!link [Binding] [Bindings for x_appl_flags])
(!ende_liste)



!begin_node Bindings for x_appl_flags
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );
!item [Binding:]
!begin_verbatim
int16_t x_appl_flags( int16_t getset, int16_t index,
                      APPFLAGS *flags )
{
   int_in[0]  = getset;
   int_in[1]  = index;
   addr_in[0] = flags;
   return ( crys_if(28928) );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control !! control[0] !! 28928  # Function opcode
control+2 !! control[1] !! 2      # Entry in int_in
control+4 !! control[2] !! 1      # Entry in int_out
control+6 !! control[3] !! 1      # Entry in addr_in
control+8 !! control[4] !! 0      # Entry in addr_out
int_in !! int_in[0] !! getset
int_in+2 !! int_in[1] !! index
addr_in  !! addr_in[0] !! flags
int_out !! int_out[0] !! Return value
!end_table
(!ende_liste)
!end_node
!end_node

!else

!begin_node x_appl_flags
(!begin_liste) [Beschreibung]
!item [Name:]
ØControl execution flagsÆ - (Geneva)

!item [AES-Nummer:]
28928
!item [Deklaration:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );

!item [Beschreibung:]
The call x_appl_flags controls the execution flags that are used when
determining how an application gets run. It works in two modes, globally and
for a particular application.
!begin_xlist [Mode 0]
!item [Mode 0:]  (!B)Get by index (!b) (!nl)
Get the 'nth' block of (!nolink [global]) application flags. If (!I)index(!i)
is zero, the Default flags will be retrieved. If (!I)flags(!i) is not NULL, the
flags will be copied into the (!nolink [APPFLAGS]) structure pointed to by the
(!I)flags(!i) parameter.

!item [Mode 1:]  (!B)Set by index (!b) (!nl)
Set the 'nth' block of (!nolink [global]) application flags. If (!I)flags(!i) is not
NULL, the flags will be copied from the (!nolink [APPFLAGS]) structure pointed
to by the (!I)flags(!i) parameter. If (!I)index(!i) is zero, the Default flags
will be set, in which case the (!I)name(!i) and (!I)desc(!i) fields of the
APPFLAGS are not altered. If (!I)index(!i) is less than zero, a new APPFLAGS
structure will be added to the end of the (!nolink [global]) list, and it will
be given the contents of (!I)flags.(!i)

!item [Mode 2:]  (!B)Delete by index (!b) (!nl)
Delete the 'nth' block of (!nolink [global]) application flags. The (!I)index(!i)
parameter must be a number greater than zero (since the Default flags cannot be
deleted.) The (!I)flags(!i) parameter is not used in this mode.

!item [Mode 3:]  (!B)Get by application ID (!b) (!nl)
Get the application flags for a particular process. (!I)index(!i) must be a valid
application ID. If (!I)flags(!i) is not NULL, the flags will be copied into the
(!nolink [APPFLAGS]) structure pointed to by the (!I)flags(!i) parameter.

!item [Mode 4:] (!B)Set by application ID (!b) (!nl)
Set the application flags for a particular process. (!I)index(!i) must be a valid
application ID. If (!I)flags(!i) is not NULL, the flags will be set for the
application.

!label X_APF_SEARCH
!item [Mode 5:] (!B)(X_APF_SEARCH)(!b) (since Update 004) (!nl)
Use the APPFLAGS (!I)name(!i) element to search for the set of flags that would
be used by Geneva were it to run the application with that name. Note that the
(!I)name(!i) element is overwritten in the process. The (!I)index(!i) parameter
is not used.

(!B)Example:(!b) Get the flags for FOO.PRG and force it to run in
single-tasking mode:
!begin_verbatim
APPFLAGS a;
SHWRCMD shwrcmd;

strcpy( a.name, "FOO.PRG" );
x_appl_flags( X_APF_SEARCH, 0, &a );
a.flags.s.multitask = 0;
shwrcmd.name = "FOO.PRG";
shwrcmd.app_flags = a.flags.l;
shel_write( XSHD_FLAGS|XSHW_RUNANY,
            0, 0, (char *)&shwrcmd, "" );
!end_verbatim
!end_xlist
(!B)Note:(!b) Changing the multitask attribute of an application in this manner
will have no effect, since this can only be changed before the application is
launched.

Descriptions of each of the available flags can be found in the section of the
manual describing the Task Manager's "Flags" dialog.
               
!item [Ergebnis:]
0: Out of memory (mode 1) (!nl)
   Flags not found (all modes)

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
(!link [Applikationen][Applikationsfunktionen])
!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_appl_flags])
(!ende_liste)



!begin_node Bindings fÅr x_appl_flags
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );
!item [Umsetzung:]
!begin_verbatim
int16_t x_appl_flags( int16_t getset, int16_t index,
                      APPFLAGS *flags )
{
   int_in[0]  = getset;
   int_in[1]  = index;
   addr_in[0] = flags;
   return ( crys_if(28928) );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control !! control[0] !! 28928  # Opcode der Funktion
control+2 !! control[1] !! 2      # EintrÑge in int_in
control+4 !! control[2] !! 1      # EintrÑge in int_out
control+6 !! control[3] !! 1      # EintrÑge in addr_in
control+8 !! control[4] !! 0      # EintrÑge in addr_out
int_in !! int_in[0] !! getset
int_in+2 !! int_in[1] !! index
addr_in  !! addr_in[0] !! flags
int_out !! int_out[0] !! Return-Wert
!end_table
(!ende_liste)
!end_node
!end_node

!endif
