!iflang [english]

!begin_node x_appl_font
(!begin_liste) [Availability]
!item [Name:]
ØChange font and window bordersÆ - (Geneva)

!item [Opcode:]
28929
!item [Syntax:]
int16_t x_appl_font( int16_t getset, int16_t zero, XFONTINFO *info );

!item [Description:]
The call x_appl_font changes the characteristics of the large font used by
Geneva, and also the window widget borders.

This function gives one (!nolink [control]) over what font is used to display
characters in the menu bar, dialogs, etc.

When Geneva first runs, it checks to see if the font ID saved in GENEVA.CNF is
anything other than 1 (for a system font). If so, and GDOS is present, it loads
all available fonts, and uses the correct font. If the particular font is not
available, it reverts to the system font.

Regardless of the font's availability, the closest point size to the one specified
is used. The window widgets will have a width which is equal to the width of one
character in the font, plus the value specified by the user. A similar calculation
is used for the widget height.

When any element in the structure pointed to by (!I)info(!i) is -2, the default value
for that element (as though there had been no GENEVA.CNF file when Geneva loaded)
is used; in the case of a (!I)getset(!i) value of zero (get), this default value is
returned in the (!I)info(!i) structure.

When (!I)getset(!i) is 1 and any element is -1, that element will cause Geneva to
ignore the setting, leaving the old value in tact.

Setting these values will have no immediate effect. The GENEVA.CNF file must be re-saved,
and Geneva must be restarted before a change can be noticed.

This example:

!begin_verbatim
XFONTINFO info = { -2, -2, -2, -2 };
x_appl_font( 0, 0, &info ); /* Get default values */
x_appl_font( 1, 0, &info ); /* Set to these values */

Is the same as:

XFONTINFO info = { -2, -2, -2, -2 };
x_appl_font( 1, 0, &info ); /* Set to default values */

Set it to something else:

XFONTINFO info = { 1,     /* Select the system font */
                  10,     /* 10 point (8 x 16) */
                   5,     /* Widget width = 8+5 pixels */
                   4 };   /* Widget height = 16+4 pixels */
x_appl_font( 1, 0, &info );
!end_verbatim
Cautions:
!begin_itemize
   !item Only Monospaced fonts should be used.
   !item  While Geneva will work properly with any size font, some programs may
   not function properly with larger or smaller fonts. This is especially true
   when it comes to fonts which are more than 8 pixels wide.
!end_itemize

The parameter (!I)zero(!i) is reserved for future expansion. Must always be 0.

!item [(!nolink [Return]) value:]
Return value of the function is unknown at present.

!item [Availability:]
The function is available only under Geneva.

!item [Group:]
Application library

!item [See also:]
(!link [Binding] [Bindings for x_appl_font])
(!ende_liste)



!begin_node Bindings for x_appl_font
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t x_appl_font( int16_t getset, int16_t zero, XFONTINFO *info );
!item [Binding:]
!begin_verbatim
int16_t x_appl_font( int16_t getset, int16_t zero,
                     XFONTINFO *info );
{
   int_in[0]  = getset;
   int_in[1]  = zero;
   addr_in[0] = info;
   return ( crys_if(28929) );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control !! control[0] !! 28929  # Function opcode
control+2 !! control[1] !! 2      # Entry in int_in
control+4 !! control[2] !! 1      # Entry in int_out
control+6 !! control[3] !! 1      # Entry in addr_in
control+8 !! control[4] !! 0      # Entry in addr_out
int_in !! int_in[0] !! getset
int_in+2 !! int_in[1] !! zero
addr_in  !! addr_in[0] !! info
int_out !! int_out[0] !! Return value
!end_table
(!ende_liste)
!end_node
!end_node

!else

!begin_node x_appl_font
(!begin_liste) [Beschreibung]
!item [Name:]
ØChange font and window bordersÆ - (Geneva)

!item [AES-Nummer:]
28929
!item [Deklaration:]
int16_t x_appl_font( int16_t getset, int16_t zero, XFONTINFO *info );

!item [Beschreibung:]
Change the characteristics of the large font used by Geneva, and also
the window gadget borders.

This function gives one control over what font is used to display characters
in the menu bar, dialogs, etc.

When Geneva first runs, it checks to see if the font ID saved in GENEVA.CNF
is anything other than 1 (for a system font). If so, and GDOS is present, it
loads all available fonts, and uses the correct font. If the particular font
is not available, it reverts to the system font.

Regardless of the font's availability, the closest point size to the one specified
is used. The window gadgets will have a width which is equal to the width of one
character in the font, plus the value specified by the user. A similar
calculation is used for the gadget height.

When any element in the structure pointed to by info is -2, the default value for
that element (as though there had been no GENEVA.CNF file when Geneva loaded) is
used; in the case of a (!I)getset(!i) value of zero (get), this default value is returned
in the info structure.

When (!I)getset(!i) is 1 and any element is -1, that element will cause Geneva to ignore
the setting, leaving the old value in tact.

Setting these values will have no immediate effect. The GENEVA.CNF file must be
re-saved, and Geneva must be restarted before a change can be noticed.

This example:
!begin_verbatim
XFONTINFO info = { -2, -2, -2, -2 };
x_appl_font( 0, 0, &info ); /* get default values */
x_appl_font( 1, 0, &info ); /* set to these values */

Is the same as:

XFONTINFO info = { -2, -2, -2, -2 };
x_appl_font( 1, 0, &info ); /* set to default values */

Set it to something else:

XFONTINFO info = { 1,    /* Select the system font */
                  10,    /* 10 point (8 x 16) */
                   5,    /* Gadget width = 8 + 5 pixels */
                   4 };  /* Gadget height = 16 + 4 pixels */
x_appl_font( 1, 0, &info );
!end_verbatim
Cautions:
!begin_itemize
   !item Only monospaced fonts should be used.
   !item  While Geneva will work properly with any size font, some programs may
     not function properly with larger or smaller fonts. This is
     especially true when it comes to fonts which are more than 8 pixels
     wide.
!end_itemize

The parameter (!I)zero(!i) is reserved for future expansion. Must always be 0.

!item [Ergebnis:]
Return value of the function is unknown at present.

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
(!link [Applikationen][Applikationsfunktionen])
!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_appl_font])
(!ende_liste)



!begin_node Bindings fÅr x_appl_font
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t x_appl_font( int16_t getset, int16_t zero, XFONTINFO *info );
!item [Umsetzung:]
!begin_verbatim
int16_t x_appl_font( int16_t getset, int16_t zero,
                     XFONTINFO *info );
{
   int_in[0]  = getset;
   int_in[1]  = zero;
   addr_in[0] = info;
   return ( crys_if(28929) );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control !! control[0] !! 28929  # Opcode der Funktion
control+2 !! control[1] !! 2      # EintrÑge in int_in
control+4 !! control[2] !! 1      # EintrÑge in int_out
control+6 !! control[3] !! 1      # EintrÑge in addr_in
control+8 !! control[4] !! 0      # EintrÑge in addr_out
int_in !! int_in[0] !! getset
int_in+2 !! int_in[1] !! zero
addr_in  !! addr_in[0] !! info
int_out !! int_out[0] !! Return-Wert
!end_table
(!ende_liste)
!end_node
!end_node

!endif
