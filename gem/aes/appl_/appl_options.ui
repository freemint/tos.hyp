!iflang [english]

!begin_node appl_options
(!begin_liste) [Availability]
!item [Name:]
ØApplication optionsÆ - Set or get application options.
!item [Opcode:]
137

!item [Syntax:]
int16_t appl_options(int16_t mode,
                int16_t aopts0, int16_t aopts1, int16_t aopts2, int16_t aopt3,
                int16_t *out0, int16_t *out1, int16_t *out2, int16_t *out3);

!item [Description:]
The purpose of the appl_options function is to let application set/get options
available to it, such as the extended objc_edit mode.

!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!label AOPT_CLEAR
!label AOPT_SET
!item [mode]
Selects the mode. If mode is AOPT_CLEAR (0), then the selected options found in
(!I)aopt0(!i) - (!I)aopt3(!i) are cleared, disabling them. If AOPT_SET (1), then the
selected option bit is set, enabling them.
                           
!label AO0_WF_SLIDER
!label AO0_OBJC_EDIT
!item [aopt0]
The first group of 16 options which have the following meaning:
!begin_xlist !compressed [bit 0]
  !item [Bit 0] - AO0_WF_SLIDER (!nl)
                If this bit is set, blah, blah, yeah.
  !item [Bit 1] - AO0_OBJC_EDIT  (!nl)
                If this options is enabled, objc_edit... blah
!end_xlist

!item [aopt1]
The second group of 16 options, none of which is defined yet. Always reads 0.

!item [aopt2]
The third group of 16 options, none of which is defined yet. Always reads 0.

!item [aopt3]
The third group of 16 options, none of which is defined yet. Always reads 0.

!item [out0]

!item [out1]

!item [out2]

!item [out3]

!end_xlist

!item [(!nolink [Return]) value:]
Return 1 = OK or 0 = error.

!item [Availability:]
The presence of the function can be checked with (!link [appl_getinfo][%apgi_98])
(opcode 98).

!item [Group:]
Application library

!item [See also:]
(!link [Binding] [Bindings for appl_options])
(!ende_liste)



!begin_node Bindings for appl_options
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t appl_options(int16_t mode,
                int16_t aopts0, int16_t aopts1, int16_t aopts2, int16_t aopt3,
                int16_t *out0, int16_t *out1, int16_t *out2, int16_t *out3);

!item [Binding:]
!begin_verbatim
int16_t appl_options(int16_t mode,
                int16_t aopts0, int16_t aopts1,
                int16_t aopts2, int16_t aopt3,
                int16_t *out0, int16_t *out1,
                int16_t *out2, int16_t *out3)
{
   int_in[0]  = mode;
   int_in[1]  = aopts0;
   int_in[2]  = aopts1;
   int_in[3]  = aopts2;
   int_in[4]  = aopts3;

   crys_if(137);

  *out0 = int_out[1];
  *out1 = int_out[2];
  *out2 = int_out[3];
  *out3 = int_out[4];

  return ( int_out[0] );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control !! control[0]   !! 137   # Function opcode
control+2 !! control[1] !! 5     # Entry in int_in
control+4 !! control[2] !! 5     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in !! int_in[0] !! mode
int_in+2 !! int_in[1] !! aopts0
int_in+4 !! int_in[2] !! aopts1
int_in+6 !! int_in[3] !! aopts2
int_in+8 !! int_in[4] !! aopts3
int_out !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! out0
int_out+4 !! int_out[2] !! out1
int_out+6 !! int_out[3] !! out2
int_out+8 !! int_out[4] !! out3
!end_table
(!ende_liste)
!end_node
!end_node

!else

!begin_node appl_options
(!begin_liste) [Beschreibung]
!item [Name:]
Ø-Æ -

!item [AES-Nummer:]
137

!item [Deklaration:]
int16_t appl_options(int16_t mode,
                int16_t aopts0, int16_t aopts1, int16_t aopts2, int16_t aopt3,
                int16_t *out0, int16_t *out1, int16_t *out2, int16_t *out3);

!item [Beschreibung:]
Its purpose is to let application set/get options available to it, such as the
extended objc_edit mode.

!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!label AOPT_CLEAR
!label AOPT_SET
!item [mode]
Selects the mode. If mode is AOPT_CLEAR (0), then the selected
options found in aopt0 - aopt3 is cleared, disabling then.
If AOPT_SET (1) then the selected option bit is set, enabling
them.

!label AO0_WF_SLIDER
!label AO0_OBJC_EDIT
!item [aopt0]
The first 16 of options which have the following meaning;
!begin_xlist !compressed [bit 0]
  !item [Bit 0] - AO0_WF_SLIDER (!nl)
                If this bit is set, blah, blah, yeah.
  !item [Bit 1] - AO0_OBJC_EDIT  (!nl)
                If this options is enabled, objc_edit()... blah
!end_xlist

!item [aopt1]
The second group of 16 options, none of which is defined yet.
Always reads 0.

!item [aopt2]
The third group of 16 options, none of which is defined yet.
Always reads 0.

!item [aopt3]
The third group of 16 options, none of which is defined yet.
Always reads 0.

!item [out0]

!item [out1]

!item [out2]

!item [out3]

!end_xlist

!item [Ergebnis:]
Return 1 = OK or 0 = error.

!item [VerfÅgbar:]
Das Vorhandensein der Funktion ist Åber (!link [appl_getinfo][%apgi_98]) (Opcode 98)
nachprÅfbar.

!item [Gruppe:]
(!link [Applikationen][Applikationsfunktionen])

!item [Querverweis:]
(!link [Binding] [Bindings fÅr appl_options])
(!ende_liste)



!begin_node Bindings fÅr appl_options
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t appl_options(int16_t mode,
                int16_t aopts0, int16_t aopts1, int16_t aopts2, int16_t aopt3,
                int16_t *out0, int16_t *out1, int16_t *out2, int16_t *out3);

!item [Binding:]
!begin_verbatim
int16_t appl_options(int16_t mode,
                int16_t aopts0, int16_t aopts1,
                int16_t aopts2, int16_t aopt3,
                int16_t *out0, int16_t *out1,
                int16_t *out2, int16_t *out3)
{
   int_in[0]  = mode;
   int_in[1]  = aopts0;
   int_in[2]  = aopts1;
   int_in[3]  = aopts2;
   int_in[4]  = aopts3;

   crys_if(137);

  *out0 = int_out[1];
  *out1 = int_out[2];
  *out2 = int_out[3];
  *out3 = int_out[4];

  return ( int_out[0] );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control !! control[0]   !! 137   # Opcode der Funktion
control+2 !! control[1] !! 5     # EintrÑge in int_in
control+4 !! control[2] !! 5     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in !! int_in[0] !! mode
int_in+2 !! int_in[1] !! aopts0
int_in+4 !! int_in[2] !! aopts1
int_in+6 !! int_in[3] !! aopts2
int_in+8 !! int_in[4] !! aopts3
int_out !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! out0
int_out+4 !! int_out[2] !! out1
int_out+6 !! int_out[3] !! out2
int_out+8 !! int_out[4] !! out3
!end_table
(!ende_liste)
!end_node
!end_node

!endif
