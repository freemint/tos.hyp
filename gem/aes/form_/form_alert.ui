!iflang [english]

!begin_node form_alert

(!begin_liste) [Availability]

!item [Name:]
ØForm alert boxÆ - Display an alert box.

!item [Opcode:]
52

!item [Syntax:]
int16_t form_alert ( int16_t fo_adefbttn, CONST int8_t *fo_astring );

!item [Description:]
The call form_alert displays a standardized alert box on the screen and returns
the index of the button with which the alert box was exited. During this the
(!nolink [AES]) saves the background and restores it after the alert box is
closed.

The parameter (!I)fo_adefbttn(!i) determines the index of the default exit button
of the alert box. The following apply:

!begin_table [l|l]
Value !! Meaning
!hline
0 !! No default button
1 !! First button
2 !! Second button
3 !! Third button
!end_table

The parameter (!I)fo_astring(!i) is a pointer to the formatted string that
determines the appearance of the alert box. The format is '[n][lines][buttons]'
where (!I)n(!i) is the index number of the icon to be included:

!begin_xlist !compressed [n Meaning]
!item [n  Meaning]
Icon
!item [~]
~
!item [0  No icon]
~ (!nl)
!item [1  Exclamation mark]

!image (!picture_path)rufen

!item [2  Question mark]

!image (!picture_path)frage

!item [3  Stop sign]

!image (!picture_path)stop

!item [4  Info icon, as of (!nolink [AES]) 4.10]

!image (!picture_path)info

!item [5   Diskette icon, as of (!nolink [AES]) 4.10]

!image (!picture_path)disk

!item [6  Bomb, (!nolink [XaAES])]

!image (!picture_path)alert_bomb

!item [7  System, (!nolink [XaAES])]

!image (!picture_path)alert_system

!end_xlist

(!B)Note:(!b) The available icons should not be used in an arbitrary manner,
but should suit the situation in each case, i.e.:
!begin_itemize
!item The (!B)exclamation mark(!b) should be used for any kind of message that
      the user should just confirm briefly.
!item The (!B)question mark(!b) serves for all queries that should be answered
      before an action takes place (e.g. the deletion of a file).
!item The (!B)stop sign(!b) should be employed for serious problems which it is
      imperative that the user knows about.
!end_itemize

The component (!I)lines(!i) describes the individual text lines that are to
appear in the alert box. There can be up to five text lines, each with a
maximum of 30 characters, which are separated from each other by a
'|' character.

The component (!I)buttons(!i) describes the texts for up to three buttons with up
to 10 characters each, which are separated by a '|' character from each other.

(!B)Note:(!b) All (!nolink [AES]) versions below 1.06 have problems formatting
alert strings padded with spaces; to make alerts look right with all
(!nolink [AES]) versions, do not pad any line or button with spaces, apart from
adding one space to the longest text line of an alert (to prevent the last
character touching the right border in some (!nolink [AES]) versions).

!begin_description
!item [MagiC:] Due to the compatibility to (!nolink [GEM])/3, alert boxes
here can contain up to 40 characters per text line and 20 characters per button.
In addition, all alert boxes may be operated completely via the keyboard, with
the function key [F1] servicing the left, [F2] the centre and [F3] the right
button.

!item [ViewMAX/2] and later parse the 'default button' parameter as two bytes;
the low byte is the default button and the high byte is the Cancel button (ESC
is a shortcut for it). This style of parameter will crash earlier
(!nolink [GEM]) versions.

!item [Under Geneva], the alert string can contain left bracket ('[') characters
within the text of the buttons. These denote the keyboard equivalents to be
used for the buttons. For example, this defines an alert with the equivalents
[Alternate][H] and [Alternate][Y]:

  form_alert( 1, "[1][Hi there!][[Hi!|B[ye!]" );

If an alert button does not contain a pre-defined keyboard equivalent, it
will be considered for an automatic keyboard equivalent.

(!B)Note:(!b) DO NOT use this type of alert string when running without Geneva,
as this will have some unpredictable results.

Additionally, if an alert would normally not have a default button, Geneva always
forces the rightmost button to be the default. For example:

form_alert( 2, "[1][Hi!][OK]" );   /* OK is the default */
!end_description

!item [(!nolink [Return]) value:]
This will be the index of the button with which the alert box was quit; the
button at far left has the index 1, and so on in sequence.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Form library

!item [See also:]
(!link [Binding] [Bindings for form_alert])

(!ende_liste)



!begin_node Bindings for form_alert
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t form_alert ( int16_t fo_adefbttn, CONST int8_t *fo_astring );

!item [Binding:]
!begin_verbatim
int16_t form_alert (int16_t fo_adefbttn,
                    CONST int8_t *fo_astring)
{
   int_in[0]  = fo_adefbttn;
   addr_in[0] = fo_astring;

   return ( crys_if(52) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 52    # Function opcode
control+2 !! control[1] !! 1     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! fo_adefbttn
addr_in   !! addr_in[0] !! fo_astring
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node form_alert

(!begin_liste) [Beschreibung]

!item [Name:]
ØForm alert boxÆ - zeichnet eine Alarmbox.

!item [AES-Nummer:]
52

!item [Deklaration:]
int16_t form_alert ( int16_t fo_adefbttn, CONST int8_t *fo_astring );

!item [Beschreibung:]
Die Funktion stellt eine Alarmbox auf dem Bildschirm dar und gibt die Nummer
des Buttons zurÅck, mit dem die Alarmbox verlassen wurde. Der
Bildschirmhintergrund wird dabei vom AES gesichert.

Der Parameter (!I)fo_adefbttn(!i) bestimmt die Nummer des Defaultbuttons der
darzustellenden Alarmbox. Es gilt:

!begin_table [l|l]
Wert !! Bedeutung
!hline
0 !! kein Defaultbutton
1 !! erster Button
2 !! zweiter Button
3 !! dritter Button
!end_table

Der Parameter (!I)fo_astring(!i) ist ein Zeiger auf den String, der das
Aussehen der Alarmbox bestimmt. Das verwendete Format ist
"[n][lines][buttons]" wobei (!I)n(!i) die Nummer des einzublendenden
Icons ist:

!begin_xlist !compressed [n Bedeutung]
!item [n  Bedeutung]
Symbole
!item [~]
~
!item [0  kein Icon]
~ (!nl)
!item [1  Ausrufezeichen]

!image (!picture_path)rufen

!item [2  Fragezeichen]

!image (!picture_path)frage

!item [3  Stopschild]

!image (!picture_path)stop

!item [4  Info-Icon, ab AES 4.10]

!image (!picture_path)info

!item [5  Diskettensymbol, ab AES 4.10]

!image (!picture_path)disk

!item [6  Bombe, (!nolink [XaAES])]

!image (!picture_path)alert_bomb

!item [7  System, (!nolink [XaAES])]

!image (!picture_path)alert_system

!end_xlist

(!B)Hinweis:(!b) Die zur VerfÅgung stehenden Icons sollten nicht willkÅrlich
eingesetzt werden, sondern zur jeweiligen Situation passen, d.h:

!begin_itemize
!item das (!B)Ausrufezeichen(!b) sollte fÅr alle Arten von Mitteilungen
      benutzt werden, die der Benutzer nur kurz bestÑtigen soll.
!item das (!B)Fragezeichen(!b) dient fÅr alle Abfragen, die vor einer
      Aktion ausgefÅhrt werden sollten (z.B. das Lîschen einer Datei).
!item das (!B)Stopschild(!b) sollte bei wichtigen Problemen eingesetzt
      werden, die der Benutzer unbedingt zur Kenntnis nehmen muss.
!end_itemize

Die Komponente (!I)lines(!i) beschreibt die einzelnen Textzeilen. Es sind
hîchstens fÅnf Textzeilen mit maximal 30 Zeichen, die durch das Zeichen '|'
getrennt werden, erlaubt.

Die Komponente (!I)buttons(!i) beschreibt die Texte fÅr hîchstens drei
Buttons, die durch das Zeichen '|' getrennt werden.

!begin_description
!item [MagiC:] Aufgrund der KompatibilitÑt zu GEM/3 kînnen
Alertboxen hier bis zu 40 Zeichen pro Textzeile, und 20 Zeichen pro Button
enthalten. DarÅberhinaus sind alle (!nolink [Alertboxen]) komplett Åber die Tastatur
bedienbar, mit der Funktionstaste F1 den linken, F2 den mittleren und mit F3 den
rechten Button.

!item [ViewMAX/2] and later parse the "default button" parameter as two bytes; the 
low byte is the default button and the high byte is the cancel button 
(ESC is a shortcut for it). This style of parameter will crash earlier GEM 
versions.

!item [Under Geneva], the alert string can contain left bracket ("[") characters
within the text of the buttons. These denote the keyboard equivalents to
be used for the buttons. For example, this defines an alert with the
equivalents [Alternate][H] and [Alternate][Y]:

  form_alert( 1, "[1][Hi there!][[Hi!|B[ye!]" );

If an alert button does not contain a pre-defined keyboard equivalent, it
will be considered for an automatic keyboard equivalent.

Note:DO NOT use this type of alert string when running without Geneva, as
this will have unpredictable results.

Additionally, if an alert would normally not have a default button, Geneva
always forces the rightmost button to be the default. For example:

form_alert( 2, "[1][Hi!][OK]" );   /* OK is the default */
!end_description

!item [Ergebnis:]
Als Ergebnis wird die Nummer des Buttons geliefert, mit dem die Alertbox
verlassen wurde; dabei besitzt der ganz links stehende Button den Wert 1.

!item [VerfÅgbar:]
In allen (!nolink [AES]) Versionen.

!item [Gruppe:]
(!link [Formulare][Formularfunktionen])

!item [Querverweis:]
(!link [Binding] [Bindings fÅr form_alert])

(!ende_liste)



!begin_node Bindings fÅr form_alert
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t form_alert ( int16_t fo_adefbttn, CONST int8_t *fo_astring );

!item [Umsetzung:]
!begin_verbatim
int16_t form_alert (int16_t fo_adefbttn, 
                    CONST int8_t *fo_astring)
{
   int_in[0]  = fo_adefbttn;
   addr_in[0] = fo_astring;

   return ( crys_if(52) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 52    # Opcode der Funktion
control+2 !! control[1] !! 1     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! fo_adefbttn
addr_in   !! addr_in[0] !! fo_astring
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
