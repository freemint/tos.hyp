!iflang [english]

!begin_node lbox_create

(!begin_liste) [Availability]

!item [Name:]
ØList Box CreateÆ - Create a list box

!item [Opcode:]
170

!item [Syntax:]
LIST_BOX *lbox_create ( OBJECT *tree, SLCT_ITEM slct, SET_ITEM set,
                        LBOX_ITEM *items, int16_t visible_a, int16_t first_a,
                        int16_t *ctrl_objs, int16_t *objs, int16_t flags,
                        int16_t pause_a, void *user_data, DIALOG *dialog,
                        int16_t visible_b, int16_t first_b, int16_t entries_b,
                        int16_t pause_b );
                                   
!item [Description:]
The function lbox_create allocates memory for a list box and initializes the
objects.

!begin_xlist !compressed [user_data]
!item [Parameter]
Meaning
!item [~]
~
!item [tree]
Pointer to the object tree of the dialog
!item [slct]
Pointer to selection routine
!item [set]
Pointer to set routine
!item [items]
Pointer to linked list with LBOX_ITEMs or NULL
!item [visible_a]
Number of visible entries (Slider A)
!item [first_a]
Index of the first visible entry (Slider A)
!item [ctrl_objs]
Pointer to a field with the object indices of the buttons and slider (5 entries)
!begin_xlist !compressed [ctrl_obj~0~ =]
!item [ctrl_objs[0!] =]
Object index of the BOX or IBOX, that contains the actual list box object
!item [ctrl_objs[1!] =]
Object index of the buttons for scrolling upwards or left
!item [ctrl_objs[2!] =]
Object index of the buttons for scrolling downwards or right
!item [ctrl_objs[3!] =]
Object index of the slider background box
!item [ctrl_objs[4!] =]
Object index of the slider box
!end_xlist
(!nl)
(!B)If the list box has 2 sliders,(!b) (!I)ctrl_objs[5-8](!i) contain the
numbers of the objects for Slider B:
!begin_xlist !compressed [ctrl_obj~0~ =]
!item [ctrl_objs[5!] =]
Object index of the button for scrolling upwards or left
!item [ctrl_objs[6!] =]
Object index of the button for scrolling downwards or right
!item [ctrl_objs[7!] =]
Object index of the slider background box
!item [ctrl_objs[8!] =]
Object index of the slider box
!end_xlist
!item [objs]
Pointer to a field with the object indices  of the list box items
((!I)entries(!i)).
!begin_xlist !compressed [objs_entries-1_~~]
!item [objs[0!]]
= Number of the first object
!item [objs[entries-1!]]
= Number of the last object
!end_xlist
The objects should normally have TOUCHEXIT status.
                             
!item [flags]
(!link [Various flags] [Flags for the behaviour of the list box])
!item [pause_a]
Delay during scrolling in ms (Slider A)
!item [user_data]
Pointer for application
!item [dialog]
Pointer to the window dialog structure or 0L
!item [visible_b]
Number of visible items (Slider B)
!item [first_b]
First visible item (Slider B)
!item [entries_b]
Number of items (Slider B)
!item [pause_b]
Delay during scrolling in ms (Slider B)
!end_xlist

(!B)Note:(!b) The initialization is performed by calling the routine
(!I)set(!i) for each of the objects specified in (!I)objs.(!i) Calling this
function does (!I)not(!i) draw the list box.

The buttons, the slider and the slider background should have a TOUCHEXIT
status. If the list box contains only buttons and no slider,
(!I)ctrl_objs(!i)[3/4] or [7/8] must contain -1.

Independent of the main scroll direction, the list box can have a second slider
as well if the entries them!-selves should also be scrolled sideways; this can
be sensible for a vertical list box with text entries that are wider than the
box itself, for instance.

Both (!I)slct(!i) and (!I)set(!i) are functions whose parameters are passed on
the stack. The functions may alter registers d0-d2/a0-a2.

(!I)slct(!i) is always called whenever an entry is selected or deselected. The
variable (!I)selected(!i) in the LBOX_ITEM structure already contains the new
status of the object when (!I)slct(!i) is called.


!item [(!nolink [Return]) value:]
The function returns a pointer to the structure of the list box (or the value
NULL in case of error).

!item [Availability:]
The presence of this call should be checked for using
(!link [appl_getinfo][%apgi_7]) (Opcode 7).

!item [Group:]
List boxes

!item [See also:]
(!link [Binding] [Bindings for lbox_create]) ~ lbox_delete ~ lbox_do

(!ende_liste)



!begin_node Bindings for lbox_create
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
LIST_BOX *lbox_create ( OBJECT *tree, SLCT_ITEM slct, SET_ITEM set,
                        LBOX_ITEM *items, int16_t visible_a, int16_t first_a,
                        int16_t *ctrl_objs, int16_t *objs, int16_t flags,
                        int16_t pause_a, void *user_data, DIALOG *dialog,
                        int16_t visible_b, int16_t first_b, int16_t entries_b,
                        int16_t pause_b );

!item [Binding:]
!begin_verbatim
LIST_BOX *lbox_create ( OBJECT *tree, SLCT_ITEM slct,
                        SET_ITEM set,
                        LBOX_ITEM *items, int16_t visible_a,
                        int16_t first_a, int16_t *ctrl_objs,
                        int16_t *objs, int16_t flags, 
                        int16_t pause_a, void *user_data,
                        DIALOG *dialog, int16_t visible_b,
                        int16_t first_b, int16_t entries_b, 
                        int16_t pause_b )
{
   addr_in[0] = tree;
   addr_in[1] = slct;
   addr_in[2] = set;
   addr_in[3] = items;
   addr_in[4] = ctrl_objs;
   addr_in[5] = objs;
   addr_in[6] = user_data;
   addr_in[7] = dialog;

   int_in[0]  = visible_a;
   int_in[1]  = first_a;
   int_in[2]  = flags;
   int_in[3]  = pause_a;

   int_in[4]  = visible_b;
   int_in[5]  = first_b;
   int_in[6]  = entries_b;
   int_in[7]  = pause_b;

   crys_if (170);

   return ( addr_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control    !! control[0]  !! 170   # Function opcode
control+2  !! control[1]  !! 4/8   # Entry in int_in
control+4  !! control[2]  !! 0     # Entry in int_out
control+6  !! control[3]  !! 8     # Entry in addr_in
control+8  !! control[4]  !! 1     # Entry in addr_out
addr_in    !! addr_in[0]  !! tree
addr_in+4  !! addr_in[1]  !! slct
addr_in+8  !! addr_in[2]  !! set
addr_in+12 !! addr_in[3]  !! items
addr_in+16 !! addr_in[4]  !! ctrl_objs
addr_in+20 !! addr_in[5]  !! objs
addr_in+24 !! addr_in[6]  !! user_data
addr_in+28 !! addr_in[7]  !! dialog
int_in     !! int_in[0]   !! visible_a
int_in+2   !! int_in[1]   !! first_a
int_in+4   !! int_in[2]   !! flags
int_in+6   !! int_in[3]   !! pause_a
int_in+8   !! int_in[4]   !! visible_b
int_in+10  !! int_in[5]   !! first_b
int_in+12  !! int_in[6]   !! entries_b
int_in+14  !! int_in[7]   !! pause_b
addr_out   !! addr_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node lbox_create

(!begin_liste) [Beschreibung]

!item [Name:]
ØList Box CreateÆ - Initialisieren einer Listbox.

!item [AES-Nummer:]
170

!item [Deklaration:]
LIST_BOX *lbox_create ( OBJECT *tree, SLCT_ITEM slct, SET_ITEM set,
                        LBOX_ITEM *items, int16_t visible_a, int16_t first_a,
                        int16_t *ctrl_objs, int16_t *objs, int16_t flags,
                        int16_t pause_a, void *user_data, DIALOG *dialog,
                        int16_t visible_b, int16_t first_b, int16_t entries_b,
                        int16_t pause_b );
                                   
!item [Beschreibung:]
Die Funktion legt Speicherplatz fÅr eine Listbox an, und initialisiert deren
Objekte. Es gilt:

!begin_xlist !compressed [user_data]
!item [Parameter]
Bedeutung
!item [~]
~
!item [tree]
Zeiger auf den Objektbaum des Dialogs
!item [slct]
Zeiger auf die Auswahlroutine
!item [set]
Zeiger auf die Set-Routine
!item [items]
Zeiger auf eine verkette Liste der Listbox-Elemente (oder NULL)
!item [visible_a]
Anzahl sichtbarer EintrÑge (Slider A)
!item [first_a]
erstes sichtbares Element (Slider A)
!item [ctrl_objs]
Zeiger auf ein Feld mit den Objektnummern der Buttons und der Slider. Es
gilt:
!begin_xlist !compressed [ctrl_obj~0~ =]
!item [ctrl_objs[0!] =]
Box der Scroll-Objekte
!item [ctrl_objs[1!] =]
Scrolling nach oben/links
!item [ctrl_objs[2!] =]
dto. nach unten/rechts
!item [ctrl_objs[3!] =]
Slider-Hintergrund
!item [ctrl_objs[4!] =]
Slider-Box
!end_xlist
Falls die Listbox 2 Slider besitzt, enthalten (!I)ctrl_objs[5-8](!i) die
Nummern der Objekte von Slider B:
!begin_xlist !compressed [ctrl_obj~0~ =]
!item [ctrl_objs[5!] =]
Scrolling nach oben/links
!item [ctrl_objs[6!] =]
dto. nach unten/rechts
!item [ctrl_objs[7!] =]
Slider-Hintergrund
!item [ctrl_objs[8!] =]
Slider-Box
!end_xlist
!item [objs]
Zeiger auf ein Feld mit den Objektnummern der Listbox-EintrÑge (insgesamt
(!I)entries(!i) EintrÑge). Es gilt:
!begin_xlist !compressed [objs_entries-1_~~]
!item [objs[0!]]
= erstes Objekt
!item [objs[entries-1!]]
= letztes Objekt
!end_xlist
Die Objekte sollten normalerweise den Status TOUCHEXIT besitzen.
                             
!item [flags]
(!link [verschiedene Flags] [Flags fÅr das Verhalten der Listbox])
!item [pause_a]
Verzîgerung beim Scrolling in ms (Slider A)
!item [user_data]
Zeiger fÅr die Applikation
!item [dialog]
Zeiger auf die Fensterdialog-Struktur, oder NULL
!item [visible_b]
Anzahl sichtbarer Elemente (Slider B)
!item [first_b]
erstes sichtbares Element (Slider B)
!item [entries_b]
Anzahl der Elemente (Slider B)
!item [pause_b]
Verzîgerung beim Scrolling in ms (Slider B)
!end_xlist

(!B)Hinweis:(!b) Das Initialisieren erfolgt dadurch, daû fÅr jedes der in
(!I)objs(!i) angegebenen Objekte die Routine (!I)set(!i) aufgerufen wird.
Durch den Aufruf dieser Funktion wird die Listbox (!I)nicht(!i) gezeichnet.
Die Buttons, der Slider und dessen Hintergrund sollten den Status TOUCHEXIT
besitzen. Falls die Listbox nur Buttons und keinen Slider besitzt mÅssen
(!I)ctrl_objs[3](!i) und (!I)ctrl_objs[4](!i) (bzw. [7/8]) den Wert -1
enthalten.

UnabhÑngig von der Hauptscrollrichtung kann die Listbox noch einen zweiten
Slider haben, wenn die Elemente selber noch gescrollt werden sollen; dies
kann z.B. bei einer vertikalen Listbox mit Textelementen, die breiter als
die Box selbst sind, sinnvoll sein.

(!B)Achtung:(!b) Sowohl (!I)slct(!i) als auch (!I)set(!i) sind Funktionen,
deren Parameter auf dem Stack Åbergeben werden. Die Funktionen dÅrfen die
Register d0-d2 und a0-a2 verÑndern. (!I)slct(!i) wird immer dann aufgerufen,
wenn ein Eintrag ausgewÑhlt oder aufgehoben wird. Die Variable
(!I)selected(!i) aus der LBOX_ITEM Struktur enthÑlt beim Aufruf von
(!I)slct(!i) bereits den neuen Status des Objekts.

!item [Ergebnis:]
Die Funktion liefert einen Zeiger auf die Struktur der Listbox (oder im
Fehlerfall den Wert NULL) zurÅck.

!item [VerfÅgbar:]
Das Vorhandensein dieser Funktion kann per (!link [appl_getinfo][%apgi_7]) (Opcode 7)
festgestellt werden.

!item [Gruppe:]
Listboxen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr lbox_create])  ~ lbox_delete ~  lbox_do

(!ende_liste)



!begin_node Bindings fÅr lbox_create
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
LIST_BOX *lbox_create ( OBJECT *tree, SLCT_ITEM slct, SET_ITEM set,
                        LBOX_ITEM *items, int16_t visible_a, int16_t first_a,
                        int16_t *ctrl_objs, int16_t *objs, int16_t flags,
                        int16_t pause_a, void *user_data, DIALOG *dialog,
                        int16_t visible_b, int16_t first_b, int16_t entries_b,
                        int16_t pause_b );

!item [Umsetzung:]
!begin_verbatim
LIST_BOX *lbox_create ( OBJECT *tree, SLCT_ITEM slct,
                        SET_ITEM set,
                        LBOX_ITEM *items, int16_t visible_a,
                        int16_t first_a, int16_t *ctrl_objs,
                        int16_t *objs, int16_t flags, 
                        int16_t pause_a, void *user_data,
                        DIALOG *dialog, int16_t visible_b,
                        int16_t first_b, int16_t entries_b, 
                        int16_t pause_b )
{
   addr_in[0] = tree;
   addr_in[1] = slct;
   addr_in[2] = set;
   addr_in[3] = items;
   addr_in[4] = ctrl_objs;
   addr_in[5] = objs;
   addr_in[6] = user_data;
   addr_in[7] = dialog;

   int_in[0]  = visible_a;
   int_in[1]  = first_a;
   int_in[2]  = flags;
   int_in[3]  = pause_a;

   int_in[4]  = visible_b;
   int_in[5]  = first_b;
   int_in[6]  = entries_b;
   int_in[7]  = pause_b;

   crys_if (170);

   return ( addr_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control    !! control[0]  !! 170   # Opcode der Funktion
control+2  !! control[1]  !! 4/8   # EintrÑge in int_in
control+4  !! control[2]  !! 0     # EintrÑge in int_out
control+6  !! control[3]  !! 8     # EintrÑge in addr_in
control+8  !! control[4]  !! 1     # EintrÑge in addr_out
addr_in    !! addr_in[0]  !! tree
addr_in+4  !! addr_in[1]  !! slct
addr_in+8  !! addr_in[2]  !! set
addr_in+12 !! addr_in[3]  !! items
addr_in+16 !! addr_in[4]  !! ctrl_objs
addr_in+20 !! addr_in[5]  !! objs
addr_in+24 !! addr_in[6]  !! user_data
addr_in+28 !! addr_in[7]  !! dialog
int_in     !! int_in[0]   !! visible_a
int_in+2   !! int_in[1]   !! first_a
int_in+4   !! int_in[2]   !! flags
int_in+6   !! int_in[3]   !! pause_a
int_in+8   !! int_in[4]   !! visible_b
int_in+10  !! int_in[5]   !! first_b
int_in+12  !! int_in[6]   !! entries_b
int_in+14  !! int_in[7]   !! pause_b
addr_out   !! addr_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
