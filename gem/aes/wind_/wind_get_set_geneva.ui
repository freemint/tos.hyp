!iflang [english]

!begin_node wind_get and wind_set mode in Geneva

In all cases, the wind_get function can be used to retrieve the
following information for a particular window. wind_set can be used
to set the values.

!begin_description

!label X_WF_MENU, wind_get
!label X_WF_MENU, wind_set
!item [X_WF_MENU (0x1100)] (!nl)

Setting this attribute causes a menu bar to appear below the
window's name and information bars. The (!I)wi_sw1(!i) parameter should
have the high-WORD of the address of the object tree containing
the menu. (!I)wi_sw2(!i) contains the low-WORD of the address. If a NULL
pointer is passed, the menu bar will be blank.

Example:
!begin_verbatim
      int handle;
      OBJECT *menu;

      handle = wind_create( MOVER|X_MENU, 20, 20, 200, 200 );
      if( handle>0 ) {
         wind_set( handle, X_WF_MENU, menu );
         wind_open( handle, 20, 20, 200, 200 );
      }
!end_verbatim


!label X_WF_DIALOG, wind_get
!label X_WF_DIALOG, wind_set
!item [X_WF_DIALOG (0x1200)] (!nl)
     This option allows a program to create dialog boxes within
     windows. It is generally used in conjunction with the X_MU_DIALOG
     event type.

     The (!I)wi_sw1(!i) parameter should have the high-WORD of the address of
     the object tree containing the dialog. (!I)wi_sw2(!i) contains the low-
     WORD of the address. If a NULL address is passed, there will be
     no dialog associated with the window, and it will receive events
     normally.

     If the window does not have horizontal or vertical sliders, then
     the size of the root object of the dialog will automatically be
     sized to fit the entire working area of the window. If the window
     has sliders, then the dialog will automatically scroll and update
     as the user operates them. No action is necessary on the part of
     the program.

     If the window is open when this call occurs, the entire dialog is
     always redrawn and the sliders, if present, are updated. All
     slider updates can be turned off by clearing the X_WTFL_SLIDERS
     attribute for the window, by way of the x_wind_tree function.

     Refer to the section describing shel_write for information on
     how to cause a windowed dialog to scroll by sending a message to
     Geneva.

     Example:

!begin_verbatim
      int handle;
      OBJECT dial = { -1, -1, -1, G_BOX, 0, 0, 
                              0x021131L, 0, 0, 1000, 1000 };
                              /* a large, filled rectangle */


      handle = wind_create( MOVER|SIZER|CLOSER|UPARROW|DNARROW|\
        VSLIDE|LFARROW|RTARROW|HSLIDE, 20, 20, 200, 200 );

      if( handle>0 ) {
        wind_set( handle, X_WF_DIALOG, d
        wind_set( handle, X_WF_DIALHT, 10 );  /* vert. scroll jump */
        wind_set( handle, X_WF_DIALWID, 10 ); /* horiz. scroll jump */
        wind_open( handle, 20, 20, 200, 200 );
      }
!end_verbatim


!label X_WF_DIALWID, wind_get
!label X_WF_DIALWID, wind_set
!item [X_WF_DIALWID (0x1300)] (!nl)

     This option is used in conjunction with the X_WF_DIALOG option.
     It controls the interval at which scrolling by the user occurs.
     For instance, a value of 10 will cause the left and right scroll
     arrows to scroll the dialog within the window by 10 pixels at a
     time. The default value is 1.

     Since, by default, Geneva will use a blit operation to move most
     of a windowed dialog's contents when scrolling, unpredictable
     redraw errors can occur when redrawing the unblitted area of a
     dialog if the dialog uses a patterned fill and X_WF_DIALWID is
     not a multiple of 16 pixels.


!label X_WF_DIALHT, wind_get
!label X_WF_DIALHT, wind_set
!item [X_WF_DIALHT (0x1400)] (!nl)
     This option is used in conjunction with the X_WF_DIALOG option.
     It controls the interval at which scrolling by the user occurs.
     For instance, a value of 10 will cause the up and down scroll
     arrows to scroll the dialog within the window by 10 pixels at a
     time. The default value is 1.

     Since, by default, Geneva will use a blit operation to move most
     of a windowed dialog's contents when scrolling, unpredictable
     redraw errors can occur when redrawing the unblitted area of a
     dialog if the dialog uses a patterned fill and X_WF_DIALWID is
     not a multiple of 16 pixels.


!label X_WF_DFLTDESK, wind_get
!label X_WF_DFLTDESK, wind_set
!item [X_WF_DFLTDESK (0x1500)] (!nl)
     This option allows a program to redefine the default desktop, so
     that it will be something other than the normal grey pattern. The
     (!I)wi_sw1(!i) parameter should have the high-WORD of the address of the
     object tree containing the new object tree. (!I)wi_sw2(!i) cont address
     pattern) desktop will become the new default. The (!I)wi_sw3(!i)
     parameter must contain the total number of objects in the object
     tree which contains the new desktop.

     If the application which has changed the default desktop
     terminates, the default grey pattern is reinstated automatically.


!label X_WF_MINMAX, wind_get
!label X_WF_MINMAX, wind_set
!item [X_WF_MINMAX (0x1600)] (!nl)
     This option allows a program to change the minimum and maximum
     sizes to which the user can resize a particular window.

     By default, Geneva calculates a minimum window size that is large
     enough to contain all of the window widgets without overlapping.
     The maximum size always defaults to the working area of the
     entire desktop.

     The (!I)wi_sw1(!i) and (!I)wi_sw2(!i) parameters are the minimum window width
     and height, respectively, and (!I)wi_sw3(!i) and (!I)wi_sw4(!i) are the maximum
     width and height of the window. Passing a value of -1 in any of
     these parameters in a call to wind_set will cause no change to
     occur in that one value.


!label X_WF_HSPLIT, wind_get
!label X_WF_HSPLIT, wind_set
!item [X_WF_HSPLIT (0x1700)] (!nl)
     This option reflects the location of the horizontal split bar of
     a window.

     The (!I)wi_sw1(!i) parameter is the new location of the bar, in pixels.
     If the value is zero, the bar will be all the way to the left
     edge; if it is -1 (which is the default) it will be all the way
     to the right.

     Return value from wind_get:

!begin_xlist !compressed
!item [wi_gw1 =] Split bar position
!item [wi_gw2 =] Size, in pixels, of the upper window region
!item [wi_gw3 =] Size of the lower window region
!end_xlist

     (!B)Note:(!b) The value returned by (!nolink [wind_get]) may not be equal to the
     value supplied to wind_set if the user has either changed the
     size of the window, or if the value was too large or not large
     enough to exceed the minimum bar position. See the function
     x_wind_create and the X_WF_SPLMIN option, below, for more
     information.


!label X_WF_VSPLIT, wind_get
!label X_WF_VSPLIT, wind_set
!item [X_WF_VSPLIT (0x1800)] (!nl)
     This option reflects the location of the vertical split bar of
     a window.

     The (!I)wi_sw1(!i) parameter is the new location of the bar, in pixels.
     If the value is zero, the bar will be at the very top; if it is
     -1 (which is the default) it will be at the very bottom.

     Return value from wind_get:
!begin_xlist !compressed
!item [wi_gw1 =] Split bar position
!item [wi_gw2 =] Size, in pixels, of the left window region
!item [wi_gw3 =] Size of the right window region
!end_xlist

     Note that the value returned to (!nolink [wind_get]) may not be equal to the
     value supplied by wind_set if the user has either changed the
     size of the window, or if the value was too large or not large
     enough to exceed the minimum bar position. See the function
     x_wind_create and the X_WF_SPLMIN option, below, for more
     information.


!label X_WF_SPLMIN, wind_get
!label X_WF_SPLMIN, wind_set
!item [X_WF_SPLMIN (0x1900)] (!nl)
     This option controls the minimum sizes of the areas defined by
     the horizontal and vertical split bars.

!begin_xlist !compressed
!item [wi_sw1 =] Minimum width of region to left of horizontal split
!item [wi_sw2 =] Minimum width of region to right of horizontal split
!item [wi_sw3 =] Minimum height of region above vertical split
!item [wi_sw4 =] Minimum height of region below vertical split

!end_xlist
     When the user drags a split bar, these values are checked. He
     will not be able to drag the bar if the window is too small
     to fit two regions having these sizes. When a wind_set call is
     made to set the position of one of the split bars, they will be
     'snapped' to one edge or the other if the position is less than
     1/2 of the minimum distance away from the edge. Furthermore,
     when the window is made smaller, the positions of the split bars
     are automatically changed so as to satisfy these minimum values.
     For this reason, a program should never assume that they have
     not changed.

     Passing a value of -1 in any of these parameters in a call to
     wind_set will cause no change to occur in that one value.


!label X_WF_HSLIDE2, wind_get
!label X_WF_HSLIDE2, wind_set
!item [X_WF_HSLIDE2 (0x1A00)] (!nl)
     This option gets or sets the position of the second horizontal
     slider (which appears to the right of a horizontal split bar) in
     a manner identical to WF_HSLIDE.


!label X_WF_VSLIDE2, wind_get
!label X_WF_VSLIDE2, wind_set
!item [X_WF_VSLIDE2 (0x1B00)] (!nl)
     This option gets or sets the position of the second vertical
     slider (which appears below a vertical split bar) in a manner
     identical to WF_VSLIDE.


!label X_WF_HSLSIZE2, wind_get
!label X_WF_HSLSIZE2, wind_set
!item [X_WF_HSLSIZE2 (0x1C00)] (!nl)
     This option gets or sets the size of the second horizontal slider
     (which appears to the right of a horizontal split bar) in a
     manner identical to WF_HSLSIZE.


!label X_WF_VSLSIZE2, wind_get
!label X_WF_VSLSIZE2, wind_set
!item [X_WF_VSLSIZE2 (0x1D00)] (!nl)
     This option gets or sets the size of the second vertical slider
     (which appears below a vertical split bar) in a manner identical
     to WF_VSLSIZE.


!label X_WF_DIALFLGS, wind_get
!label X_WF_DIALFLGS, wind_set
!label X_WD_ACTIVE
!label X_WD_BLITSCRL
!label X_WD_KEYS
!item [X_WF_DIALFLGS (0x1E00)] (!nl)
     This option gets/sets flags related to the way dialogs within
     windows are processed. Currently, only the following three bits
     are used. All other bits are reserved for future use:

!begin_description

!item [X_WD_ACTIVE (bit 0)] (!nl)
          When this bit is off, no mouse or keyboard events will be
          processed. This is a good way to temporarily lock a windowed
          dialog while presenting the user with a sub-dialog that asks
          for other input (like the 'Find' option in the Task
          Manager's 'Flags' dialog.) This attribute defaults to On.

  !item [X_WD_BLITSCRL (bit 1)] (!nl)
          If this flag is set, which it is by default, a windowed
          dialog will be scrolled in real time by way of a blit
          operation. Care should be taken when displaying object
          trees which use fill patterns, because if the X_WF_DIALWID
          or X_WF_DIALHT are not an even increment of 16, the fill
          pattern may not match up correctly when the user scrolls
          the window. If this flag is off, the entire dialog will be
          redrawn every time its position changes. In this case, the
          scroll increment does not matter.


!item [X_WD_KEYS (bit 2) (since Update 004)] (!nl)
          When set, any keypresses that would otherwise be processed
          as part of the dialog are instead passed through to the
          application.

          An example is when NeoDesk is run with the desktop in a
          window. Normally, things like [Shift]-[C] would be treated
          like a keypress in a dialog without any editable field and
          ignored. When this bit is set, the keypress will instead go
          to the application.
!end_description


!label X_WF_OBJHAND, wind_get
!label X_WF_OBJHAND, wind_set
!item [X_WF_OBJHAND (0x1F00) (since Update 003)] (!nl)
     When an application wants to intercept some or all of the button
     events that would otherwise be interpreted by Geneva to mean that
     a window widget has been clicked on, this wind_set mode can be
     used to provide Geneva with the address of a routine which
     instructs Geneva to either ignore the event, or to process it as
     normal. This allows the programmer to redefine the operation of
     window widgets, and to define his own actions for new widgets
     which have been added with the x_wind_tree function.

     The routine is passed the handle of the window containing the
     object and the index of the object within the window's object
     tree. If the user routine returns a 0, then Geneva will generate
     an X_WM_OBJECT message and send it to the application. If the
     routine returns a 1, then Geneva will process the action as a
     normal event and act accordingly.

     IMPORTANT: The application's object handler routine must not use
     any (!nolink [AES]) functions.

     The following example declares an object handler which allows
     the action of the vertical scroll bar to be redefined:

!begin_verbatim
       /* change this to "int cdecl objhand..." for Pure C */
int objhand( int handle, int obj )
{  /* handle parameter is not used */
  if( obj==WGVSMLSL ) return 0;   /* this is the vertical slider */
  return 1;                       /* otherwise, process as normal */
}

main()
{
 int handle, message[8];

  handle = wind_create( NAME|MOVER|VSLIDE|UPARROW|DNARROW,
      50, 50, 150, 150 );

  if( handle > 0 )
  {
    wind_set( handle, X_WF_OBJHAND, &objhand );
    wind_open( handle, 50, 50, 150, 150 );
  }

  ...

  evnt_mesag( message );

  switch( message[0] )
  {

    case X_WM_OBJECT:
      if( message[3]==handle && message[4]==WGVSMLSL )
         /* do something new with the slider */
  }
}
!end_verbatim

     If wind_set( X_WF_OBJHAND ) is passed a NULL pointer instead of
     a pointer to a function, object handling is discontinued for that
     window.

     Note that in order for Geneva to determine that the mouse has
     been clicked on an object in a window's tree structure, it must
     be of type EXIT or TOUCHEXIT. Geneva's default window widgets
     already have these attributes set correctly.

     wind_get can also be used to get a pointer to the current object
     handler routine. A NULL pointer means that there is no object
     handler defined.


!label X_WF_DIALEDIT, wind_get
!label X_WF_DIALEDIT, wind_set
!item [X_WF_DIALEDIT (0x2000) (since Update 003)] (!nl)
     When a windowed dialog has been defined with wind_set mode
     X_WF_DIALOG, these two options can be used to get or set the
     index of the object which currently has the edit cursor. This
     can be helpful when an application changes the contents of a
     text field while the dialog is still displayed, or when it
     needs to hide the object that currently has the edit cursor.

     wind_get( X_WF_DIALEDIT ) will return the index of the object
     which currently has the edit cursor in the (!I)wi_gw1(!i) parameter,
     and the position of the edit cursor within the object's text in
     the (!I)wi_gw2(!i) parameter.

     wind_set( X_WF_DIALEDIT ) changes the object ((!I)wi_sw1(!i)) and the
     edit index ((!I)wi_sw2(!i)). If the object is 0, then the edit cursor
     will simply be turned off; otherwise it will be moved to the new
     object. If the index is 0, the cursor will be positioned before
     the leftmost character in the field; if it is a number > 0, it
     will be further to the right. If the index is -1, then the cursor
     will be automatically moved to the rightmost position.


!label X_WF_DCOLSTAT, wind_get
!label X_WF_DCOLSTAT, wind_set
!item [X_WF_DCOLSTAT (0x2100) (since Update 004)] (!nl)
     This mode gets or sets a window widget's default colours and
     ob_state value. Unlike WF_DCOLOR, this option gives full (!nolink [control])
     over all of Geneva's extended window widgets.

     For wind_set, the (!I)wi_sw1(!i) parameter contains the index of the
     window widget to change, taken from the list of WGCLOSE through
     WGSIZE, as outlined in xwind.h. (!I)wi_sw2(!i) contains the colour for
     the widget when the window is on top, (!I)wi_sw3(!i) is for an untopped
     window. (!I)wi_sw4(!i) contains the ob_state WORD of the object. If any
     of these values is set to -1, then no change occurs.

     For wind_get, the (!I)wi_sw1(!i) parameter must be a pointer to a WORD
     containing the index of the widget being inquired about, the
     same way WF_COLOR and WFDCOLOR work.

     (!B)Example:(!b) Turn the 3D attribute on for the mover bar
!begin_verbatim
      int top, untop, state, gadget;

      gadget = WGMOVE;
      wind_get( 0, X_WF_DCOLSTAT, &gadget, &top, &untop, &state );
      state |= X_MAGIC|X_DRAW3D;
      wind_set( 0, X_WF_DCOLSTAT, gadget, -1, -1, state );
!end_verbatim

!end_description

!end_node

!else


!begin_node wind_get und wind_set mode von Geneva

In all cases, the wind_get function can be used to retrieve the
following information for a particular window. wind_set can be used
to set the values.

!begin_description

!label X_WF_MENU, wind_get
!label X_WF_MENU, wind_set
!item [X_WF_MENU (0x1100)] (!nl)

Setting this attribute causes a menu bar to appear below the
window's name and information bars. The (!I)wi_sw1(!i) parameter should
have the high-WORD of the address of the object tree containing
the menu. (!I)wi_sw2(!i) contains the low-WORD of the address. If a NULL
pointer is passed, the menu bar will be blank.

Example:
!begin_verbatim
      int handle;
      OBJECT *menu;

      handle = wind_create( MOVER|X_MENU, 20, 20, 200, 200 );
      if( handle>0 ) {
         wind_set( handle, X_WF_MENU, menu );
         wind_open( handle, 20, 20, 200, 200 );
      }
!end_verbatim


!label X_WF_DIALOG, wind_get
!label X_WF_DIALOG, wind_set
!item [X_WF_DIALOG (0x1200)] (!nl)
     This option allows a program to create dialog boxes within
     windows. It is generally used in conjunction with the X_MU_DIALOG
     event type.

     The (!I)wi_sw1(!i) parameter should have the high-WORD of the address of
     the object tree containing the dialog. (!I)wi_sw2(!i) contains the low-
     WORD of the address. If a NULL address is passed, there will be
     no dialog associated with the window, and it will receive events
     normally.

     If the window does not have horizontal or vertical sliders, then
     the size of the root object of the dialog will automatically be
     sized to fit the entire working area of the window. If the window
     has sliders, then the dialog will automatically scroll and update
     as the user operates them. No action is necessary on the part of
     the program.

     If the window is open when this call occurs, the entire dialog is
     always redrawn and the sliders, if present, are updated. All
     slider updates can be turned off by clearing the X_WTFL_SLIDERS
     attribute for the window, by way of the x_wind_tree function.

     Refer to the section describing shel_write for information on
     how to cause a windowed dialog to scroll by sending a message to
     Geneva.

     Example:

!begin_verbatim
      int handle;
      OBJECT dial = { -1, -1, -1, G_BOX, 0, 0, 0x021131L, 0, 
                       0, 1000, 1000 };
                              /* a large, filled rectangle */


      handle = wind_create( MOVER|SIZER|CLOSER|UPARROW|DNARROW|\
        VSLIDE|LFARROW|RTARROW|HSLIDE, 20, 20, 200, 200 );

      if( handle>0 ) {
        wind_set( handle, X_WF_DIALOG, d
        wind_set( handle, X_WF_DIALHT, 10 );  /* vert. scroll jump */
        wind_set( handle, X_WF_DIALWID, 10 ); /* horiz. scroll jump */
        wind_open( handle, 20, 20, 200, 200 );
      }
!end_verbatim


!label X_WF_DIALWID, wind_get
!label X_WF_DIALWID, wind_set
!item [X_WF_DIALWID (0x1300)] (!nl)

     This option is used in conjunction with the X_WF_DIALOG option.
     It controls the interval at which scrolling by the user occurs.
     For instance, a value of 10 will cause the left and right scroll
     arrows to scroll the dialog within the window by 10 pixels at a
     time. The default value is 1.

     Since, by default, Geneva will use a blit operation to move most
     of a windowed dialog's contents when scrolling, unpredictable
     redraw errors can occur when redrawing the unblitted area of a
     dialog if the dialog uses a patterned fill and X_WF_DIALWID is
     not a multiple of 16 pixels.


!label X_WF_DIALHT, wind_get
!label X_WF_DIALHT, wind_set
!item [X_WF_DIALHT (0x1400)] (!nl)
     This option is used in conjunction with the X_WF_DIALOG option.
     It controls the interval at which scrolling by the user occurs.
     For instance, a value of 10 will cause the up and down scroll
     arrows to scroll the dialog within the window by 10 pixels at a
     time. The default value is 1.

     Since, by default, Geneva will use a blit operation to move most
     of a windowed dialog's contents when scrolling, unpredictable
     redraw errors can occur when redrawing the unblitted area of a
     dialog if the dialog uses a patterned fill and X_WF_DIALWID is
     not a multiple of 16 pixels.


!label X_WF_DFLTDESK, wind_get
!label X_WF_DFLTDESK, wind_set
!item [X_WF_DFLTDESK (0x1500)] (!nl)
     This option allows a program to redefine the default desktop, so
     that it will be something other than the normal grey pattern. The
     (!I)wi_sw1(!i) parameter should have the high-WORD of the address of the
     object tree containing the new object tree. (!I)wi_sw2(!i) cont address
     pattern) desktop will become the new default. The (!I)wi_sw3(!i)
     parameter must contain the total number of objects in the object
     tree which contains the new desktop.

     If the application which has changed the default desktop
     terminates, the default grey pattern is reinstated automatically.


!label X_WF_MINMAX, wind_get
!label X_WF_MINMAX, wind_set
!item [X_WF_MINMAX (0x1600)] (!nl)
     This option allows a program to change the minimum and maximum
     sizes to which the user can resize a particular window.

     By default, Geneva calculates a minimum window size that is large
     enough to contain all of the window widgets without overlapping.
     The maximum size always defaults to the working area of the
     entire desktop.

     The (!I)wi_sw1(!i) and (!I)wi_sw2(!i) parameters are the minimum window width
     and height, respectively, and (!I)wi_sw3(!i) and (!I)wi_sw4(!i) are the maximum
     width and height of the window. Passing a value of -1 in any of
     these parameters in a call to wind_set will cause no change to
     occur in that one value.


!label X_WF_HSPLIT, wind_get
!label X_WF_HSPLIT, wind_set
!item [X_WF_HSPLIT (0x1700)] (!nl)
     This option reflects the location of the horizontal split bar of
     a window.

     The (!I)wi_sw1(!i) parameter is the new location of the bar, in pixels.
     If the value is zero, the bar will be all the way to the left
     edge; if it is -1 (which is the default) it will be all the way
     to the right.

     Return value from wind_get:

!begin_xlist !compressed
!item [wi_gw1 =] Split bar position
!item [wi_gw2 =] Size, in pixels, of the upper window region
!item [wi_gw3 =] Size of the lower window region
!end_xlist

     (!B)Note:(!b) The value returned by (!nolink [wind_get]) may not be equal to the
     value supplied to wind_set if the user has either changed the
     size of the window, or if the value was too large or not large
     enough to exceed the minimum bar position. See the function
     x_wind_create and the X_WF_SPLMIN option, below, for more
     information.


!label X_WF_VSPLIT, wind_get
!label X_WF_VSPLIT, wind_set
!item [X_WF_VSPLIT (0x1800)] (!nl)
     This option reflects the location of the vertical split bar of
     a window.

     The (!I)wi_sw1(!i) parameter is the new location of the bar, in pixels.
     If the value is zero, the bar will be at the very top; if it is
     -1 (which is the default) it will be at the very bottom.

     Return value from wind_get:
!begin_xlist !compressed
!item [wi_gw1 =] Split bar position
!item [wi_gw2 =] Size, in pixels, of the left window region
!item [wi_gw3 =] Size of the right window region
!end_xlist

     Note that the value returned to (!nolink [wind_get]) may not be equal to the
     value supplied by wind_set if the user has either changed the
     size of the window, or if the value was too large or not large
     enough to exceed the minimum bar position. See the function
     x_wind_create and the X_WF_SPLMIN option, below, for more
     information.


!label X_WF_SPLMIN, wind_get
!label X_WF_SPLMIN, wind_set
!item [X_WF_SPLMIN (0x1900)] (!nl)
     This option controls the minimum sizes of the areas defined by
     the horizontal and vertical split bars.

!begin_xlist !compressed
!item [wi_sw1 =] Minimum width of region to left of horizontal split
!item [wi_sw2 =] Minimum width of region to right of horizontal split
!item [wi_sw3 =] Minimum height of region above vertical split
!item [wi_sw4 =] Minimum height of region below vertical split

!end_xlist
     When the user drags a split bar, these values are checked. He
     will not be able to drag the bar if the window is too small
     to fit two regions having these sizes. When a wind_set call is
     made to set the position of one of the split bars, they will be
     'snapped' to one edge or the other if the position is less than
     1/2 of the minimum distance away from the edge. Furthermore,
     when the window is made smaller, the positions of the split bars
     are automatically changed so as to satisfy these minimum values.
     For this reason, a program should never assume that they have
     not changed.

     Passing a value of -1 in any of these parameters in a call to
     wind_set will cause no change to occur in that one value.


!label X_WF_HSLIDE2, wind_get
!label X_WF_HSLIDE2, wind_set
!item [X_WF_HSLIDE2 (0x1A00)] (!nl)
     This option gets or sets the position of the second horizontal
     slider (which appears to the right of a horizontal split bar) in
     a manner identical to WF_HSLIDE.


!label X_WF_VSLIDE2, wind_get
!label X_WF_VSLIDE2, wind_set
!item [X_WF_VSLIDE2 (0x1B00)] (!nl)
     This option gets or sets the position of the second vertical
     slider (which appears below a vertical split bar) in a manner
     identical to WF_VSLIDE.


!label X_WF_HSLSIZE2, wind_get
!label X_WF_HSLSIZE2, wind_set
!item [X_WF_HSLSIZE2 (0x1C00)] (!nl)
     This option gets or sets the size of the second horizontal slider
     (which appears to the right of a horizontal split bar) in a
     manner identical to WF_HSLSIZE.


!label X_WF_VSLSIZE2, wind_get
!label X_WF_VSLSIZE2, wind_set
!item [X_WF_VSLSIZE2 (0x1D00)] (!nl)
     This option gets or sets the size of the second vertical slider
     (which appears below a vertical split bar) in a manner identical
     to WF_VSLSIZE.


!label X_WF_DIALFLGS, wind_get
!label X_WF_DIALFLGS, wind_set
!label X_WD_ACTIVE
!label X_WD_BLITSCRL
!label X_WD_KEYS
!item [X_WF_DIALFLGS (0x1E00)] (!nl)
     This option gets/sets flags related to the way dialogs within
     windows are processed. Currently, only the following three bits
     are used. All other bits are reserved for future use:

!begin_description

!item [X_WD_ACTIVE (bit 0)] (!nl)
          When this bit is off, no mouse or keyboard events will be
          processed. This is a good way to temporarily lock a windowed
          dialog while presenting the user with a sub-dialog that asks
          for other input (like the 'Find' option in the Task
          Manager's 'Flags' dialog.) This attribute defaults to On.

  !item [X_WD_BLITSCRL (bit 1)] (!nl)
          If this flag is set, which it is by default, a windowed
          dialog will be scrolled in real time by way of a blit
          operation. Care should be taken when displaying object
          trees which use fill patterns, because if the X_WF_DIALWID
          or X_WF_DIALHT are not an even increment of 16, the fill
          pattern may not match up correctly when the user scrolls
          the window. If this flag is off, the entire dialog will be
          redrawn every time its position changes. In this case, the
          scroll increment does not matter.


!item [X_WD_KEYS (bit 2) (since Update 004)] (!nl)
          When set, any keypresses that would otherwise be processed
          as part of the dialog are instead passed through to the
          application.

          An example is when NeoDesk is run with the desktop in a
          window. Normally, things like [Shift]-[C] would be treated
          like a keypress in a dialog without any editable field and
          ignored. When this bit is set, the keypress will instead go
          to the application.
!end_description


!label X_WF_OBJHAND, wind_get
!label X_WF_OBJHAND, wind_set
!item [X_WF_OBJHAND (0x1F00) (since Update 003)] (!nl)
     When an application wants to intercept some or all of the button
     events that would otherwise be interpreted by Geneva to mean that
     a window widget has been clicked on, this wind_set mode can be
     used to provide Geneva with the address of a routine which
     instructs Geneva to either ignore the event, or to process it as
     normal. This allows the programmer to redefine the operation of
     window widgets, and to define his own actions for new widgets
     which have been added with the x_wind_tree function.

     The routine is passed the handle of the window containing the
     object and the index of the object within the window's object
     tree. If the user routine returns a 0, then Geneva will generate
     an X_WM_OBJECT message and send it to the application. If the
     routine returns a 1, then Geneva will process the action as a
     normal event and act accordingly.

     IMPORTANT: The application's object handler routine must not use
     any (!nolink [AES]) functions.

     The following example declares an object handler which allows
     the action of the vertical scroll bar to be redefined:

!begin_verbatim
       /* change this to "int cdecl objhand..." for Pure C */
       int objhand( int handle, int obj )
       {  /* handle parameter is not used */
         if( obj==WGVSMLSL ) /* this is the vertical slider */
           return 0;
         return 1;           /* otherwise, process as normal */
       }

       main()
       {
        int handle, message[8];

         handle = wind_create( NAME|MOVER|VSLIDE|UPARROW|DNARROW,
             50, 50, 150, 150 );

         if( handle > 0 )
         {
           wind_set( handle, X_WF_OBJHAND, &objhand );
           wind_open( handle, 50, 50, 150, 150 );
         }

         ...

         evnt_mesag( message );

         switch( message[0] )
         {

           case X_WM_OBJECT:
             if( message[3]==handle && message[4]==WGVSMLSL )
                /* do something new with the slider */
         }
       }
!end_verbatim

     If wind_set( X_WF_OBJHAND ) is passed a NULL pointer instead of
     a pointer to a function, object handling is discontinued for that
     window.

     Note that in order for Geneva to determine that the mouse has
     been clicked on an object in a window's tree structure, it must
     be of type EXIT or TOUCHEXIT. Geneva's default window widgets
     already have these attributes set correctly.

     wind_get can also be used to get a pointer to the current object
     handler routine. A NULL pointer means that there is no object
     handler defined.


!label X_WF_DIALEDIT, wind_get
!label X_WF_DIALEDIT, wind_set
!item [X_WF_DIALEDIT (0x2000) (since Update 003)] (!nl)
     When a windowed dialog has been defined with wind_set mode
     X_WF_DIALOG, these two options can be used to get or set the
     index of the object which currently has the edit cursor. This
     can be helpful when an application changes the contents of a
     text field while the dialog is still displayed, or when it
     needs to hide the object that currently has the edit cursor.

     wind_get( X_WF_DIALEDIT ) will return the index of the object
     which currently has the edit cursor in the (!I)wi_gw1(!i) parameter,
     and the position of the edit cursor within the object's text in
     the (!I)wi_gw2(!i) parameter.

     wind_set( X_WF_DIALEDIT ) changes the object ((!I)wi_sw1(!i)) and the
     edit index ((!I)wi_sw2(!i)). If the object is 0, then the edit cursor
     will simply be turned off; otherwise it will be moved to the new
     object. If the index is 0, the cursor will be positioned before
     the leftmost character in the field; if it is a number > 0, it
     will be further to the right. If the index is -1, then the cursor
     will be automatically moved to the rightmost position.


!label X_WF_DCOLSTAT, wind_get
!label X_WF_DCOLSTAT, wind_set
!item [X_WF_DCOLSTAT (0x2100) (since Update 004)] (!nl)
     This mode gets or sets a window widget's default colours and
     ob_state value. Unlike WF_DCOLOR, this option gives full (!nolink [control])
     over all of Geneva's extended window widgets.

     For wind_set, the (!I)wi_sw1(!i) parameter contains the index of the
     window widget to change, taken from the list of WGCLOSE through
     WGSIZE, as outlined in xwind.h. (!I)wi_sw2(!i) contains the colour for
     the widget when the window is on top, (!I)wi_sw3(!i) is for an untopped
     window. (!I)wi_sw4(!i) contains the ob_state WORD of the object. If any
     of these values is set to -1, then no change occurs.

     For wind_get, the (!I)wi_sw1(!i) parameter must be a pointer to a WORD
     containing the index of the widget being inquired about, the
     same way WF_COLOR and WFDCOLOR work.

     (!B)Example:(!b) Turn the 3D attribute on for the mover bar
!begin_verbatim
      int top, untop, state, gadget;

      gadget = WGMOVE;
      wind_get( 0, X_WF_DCOLSTAT, &gadget, &top, &untop, &state );
      state |= X_MAGIC|X_DRAW3D;
      wind_set( 0, X_WF_DCOLSTAT, gadget, -1, -1, state );
!end_verbatim

!end_description

!end_node

!endif

