!iflang [english]

!begin_node wind_get

(!begin_liste) [Availability]

!item [Name:]
¯Get window® - Obtains various properties of a window.

!item [Opcode:]
104

!item [Syntax:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield, int16_t *wi_gw1,
                   int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Description:]
Depending on the parameters passed, the call wind_get returns information about
various properties of the window with the ID (!I)wi_ghandle.(!i) The following
apply for (!I)wi_gfield(!i):

(!B)Summary of all
(!link [subfunctions][Overview of the wind_get/set subfunctions]);(!b) numbers in
brackets represent the (!I)wi_gfield(!i) mode:

!begin_xlist [WF_TOP]

!label WF_BEVENT, wind_get
!item [WF_BEVENT (24)]
This mode inquires the state of the bit-vector that was set by
wind_set (..., WF_BEVENT, ...), and writes it into the parameter
(!I)wi_gw1.(!i) (!nl)
(!B)Warning:(!b) The presence of this feature should be checked for with
(!nolink [appl_getinfo]) (opcode 11).


!label WF_BITMAP, wind_get
!item [WF_BITMAP (233)]
Get bitmap content of the window if MyAES "windows_backup" option is set to true, 
any windows of any application can be read. (!nl)
MyAES 0.96 feature


!label WF_BOTTOM, wind_get
!item [WF_BOTTOM (25)]
This mode inquires the handle of the window that is currently at the bottom of
the window list, and writes this into the parameter (!I)wi_gw1.(!i)

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).

!label WF_CURRXYWH, wind_get
!item [WF_CURRXYWH (5)]
This mode calculates the total size of the window, and writes its coordinates
into the further parameters (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i)
and (!I)wi_gw4.(!i)

!label WF_DCOLOR, wind_get
!item [WF_DCOLOR (19)]
This mode returns the default colours of a newly created window, as follows:

!begin_xlist !compressed
!item [wi_gw1 =] Window component
!item [wi_gw2 =] Colour with window active
!item [wi_gw3 =] Colour with window inactive
!end_xlist

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).
                        
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

As of MagiC 4 and (!nolink [XaAES]) v 0.943 one can also inquire for each
individual window component the state of the 3D-flags. The call for this
is: wind_get (0, WF_DCOLOR, ...). The following apply:
!begin_xlist !compressed
!item [wi_gw1 =] Window component
!item [wi_gw2 =] Colour in active state
!item [wi_gw3 =] Colour in inactive state
!item [wi_gw4 =] 3D-flags
!end_xlist

These 3D-flags are described as bit-vectors. The following apply:

!begin_xlist !compressed [Bit-8+n =]
!item [Bit-0 =] '3D in foreground' effect
!item [Bit-1 =] '3D in background' effect
!item [Bit-2 =] 'Selectable in foreground' effect
!item [Bit-3 =] 'Selectable in background' effect
!item [Bit-8+n =] Mask bit for bit 'n'
!end_xlist

The presence of this feature can (!I)not(!i) be obtained with
(!nolink [appl_getinfo]) at present.


!label WF_DDELAY, wind_get
!item [WF_DDELAY (22362)]
This mode returns the delay values:
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Start delay at a click on a scroll arrow
!item [wi_gw2 =] Continuing delay at a click on a scroll arrow
!item [wi_gw3 =] Continuing delay at a click on the
   '(!link [Closer][The components of a window])' widget
!item [wi_gw4 =] Continuing delay at a click on the
    '(!link [Fuller][The components of a window])' widget
!end_xlist
All values are returned in milliseconds.

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!label WF_FIRSTXYWH, wind_get
!item [WF_FIRSTXYWH (11)]
This mode calculates the coordinates of the first rectangle in the rectangle
list, and writes them into the further parameters (!I)wi_gw1(!i),
(!I)wi_gw2(!i), (!I)wi_gw3(!i) and (!I)wi_gw4.(!i)


!label WF_FTOOLBAR, wind_get
!item [WF_FTOOLBAR (31)]
This mode obtains the first rectangle from the rectangle list of a
(!link [toolbar][Toolbar support]). The following apply:
!begin_xlist !compressed
!item [wi_gw1 =] X-coordinate, (!U)and(!u)
!item [wi_gw2 =] Y-coordinate of top L corner,
!item [wi_gw3 =] Width, (!U)and(!u)
!item [wi_gw4 =] Height of the rectangle
!end_xlist


!label WF_FULLXYWH, wind_get
!item [WF_FULLXYWH (7)]
This mode calculates the maximum total size of the window, and writes this
into the further parameters (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i)
and (!I)wi_gw4.(!i)


!label WF_HSLIDE, wind_get
!item [WF_HSLIDE (8)]
This mode calculates the position of the
(!link [horizontal slider][The components of a window]), and writes this into the
further parameter (!I)wi_gw1(!i) (0=far left to 1000=far right).


!label WF_HSLSIZE, wind_get
!item [WF_HSLSIZE (15)]
This mode calculates the size of the hori!-zontal slider relative to the total
width of the window, and writes this into the further parameter (!I)wi_gw1(!i)
(-1=smallest size, 1=small to 1000=total width).


!label WF_ICONIFY, wind_get
!item [WF_ICONIFY (26)]
This mode returns the following values:
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Window is iconified (1) or not (0)
!item [wi_gw2 =] Window width
!item [wi_gw3 =] Window height
!end_xlist
(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_INFO, wind_get
!item [WF_INFO (3)]
This mode obtains the current text of the window's
(!link [info-line][The components of a window]) with the ID (!I)wi_ghandle(!i)
and copies this into the buffer whose address was passed in (!nolink [intin])[2]
(high-WORD) and (!nolink [intin])[3] (low-WORD).

If the window has no info-line then the return value of the function is 0; the
passed buffer remains unchanged.

As an info-line can have at most 128 ((!nolink [N.AES])) or 200
((!nolink [XaAES])) characters, the passed buffer should offer sufficient space
to accomodate a string of this length.

This call is available only under (!nolink [N.AES]) and (!nolink [XaAES]).


!label WF_INFOXYWH, wind_get
!item [WF_INFOXYWH (104)]
This mode obtains the position of the INFO window component.

Available as of MagiC 6.10.


!label WF_KIND, wind_get
!item [WF_KIND (1)]
This mode obtains the current (!link [components][The components of a window]) of
the window, and writes them into the parameter (!I)wi_gw1.(!i)


!label WF_MENU, wind_get
!item  [WF_MENU (33)]
This mode returns the address of the OBJECT structure of the menu bar in the
window. Here (!I)wi_gw1(!i) contains the high-WORD, and (!I)wi_gw2(!i)
the low-WORD of the address, or NULL.


!label WF_MINXYWH, wind_get
!item  [WF_MINXYWH (103)]
This mode inquires the minimum size of the window.

Available as of MagiC 6.


!label WF_NAME, wind_get
!item [WF_NAME (2)]
This mode obtains the current (!link [window title][The components of a window]) of
the window with the ID (!I)wi_ghandle(!i) and copies this into the buffer whose
address was passed in (!nolink [intin])[2] (high-WORD) and (!nolink [intin])[3]
(low-WORD).

If the window has no title, then the return value of the function is 0; the
passed buffer remains unchanged.

As a window title can have at most 128 ((!nolink [N.AES])) or 200
((!nolink [XaAES])) characters, the passed buffer should offer sufficient space
to accomodate a string of this length.

This call is available only under MagiC (as of Version 6.0), (!nolink [N.AES])
and (!nolink [XaAES]).

!label WF_NEWDESK, wind_get
!item [WF_NEWDESK (14)]
This mode returns the following values:
!begin_xlist !compressed
!item [wi_gw1 =] High-WORD of the desktop address
!item [wi_gw2 =] Low-WORD of the desktop address
!item [wi_gw3 =] Index of the first object
!end_xlist
(!B)Note:(!b) The desktop address is to be understood as the address of the
active desktop back!-ground tree. The output in (!I)wi_gw3(!i) is availa!-ble
only under MagiC and as of (!nolink [AES]) Version 4.0.  (!nl)
(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11). It is also present in KAOS 1.4.2
and as of MagiC 1.


!label WF_NEXTXYWH, wind_get
!item [WF_NEXTXYWH (12)]
This mode calculates the coordinates of the next rectangle in the rectangle list,
and writes them into the further parameters (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) and (!I)wi_gw4.(!i)


!label WF_NTOOLBAR, wind_get
!item [WF_NTOOLBAR (32)]
This mode obtains the next rectangle from the rectangle list of a toolbar. The
following apply:
!begin_xlist !compressed
!item [wi_gw1 =] X-coordinate, (!U)and(!u)
!item [wi_gw2 =] Y-coordinate of top L corner,
!item [wi_gw3 =] Width, (!U)and(!u)
!item [wi_gw4 =] Height of the rectangle
!end_xlist

!label WF_OPTS, wind_get
!item [WF_OPTS (41)]
This mode returns the value that was set with
(!link [wind_set][WF_OPTS, wind_set]) ( WF_OPTS ).

The presence of this feature should be checked for using
(!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_M_OWNER, wind_get
!item [WF_M_OWNER (101)]
This mode returns the following values:
!begin_xlist !compressed  [wi_gw1 ]
!item [wi_gw1 =] Application ID of the owner
!end_xlist

Present only as of KAOS 1.4.2 (where it was still called WF_OWNER) and in
MagiC.


!label WF_OWNER, wind_get
!item [WF_OWNER (20)]
This mode returns the following values:
!begin_xlist !compressed  [wi_gw1 ]
!item [wi_gw1 =] Application ID of the owner
!item [wi_gw2 =] Window is open (1) or closed (0)
!item [wi_gw3 =] ID of the window directly above
!item [wi_gw4 =] ID of the window directly below (in the window order list)
!end_xlist
(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_PREVXYWH, wind_get
!item [WF_PREVXYWH (6)]
This mode calculates the total size of the previous window, and writes them
into the further paramters (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i)
and (!I)wi_gw4.(!i)


!label WF_SCREEN, wind_get
!item [WF_SCREEN (17)]
This mode returns the address and length of the internal buffer in which the
(!nolink [AES]) has stored the background of drop-down menus and alert boxes,
and writes these into the further parameters (!I)wi_gw1(!i) = high-WORD of the
address, (!I)wi_gw2(!i) = low-WORD of the address, (!I)wi_gw3(!i) = high-WORD
of the length and (!I)wi_gw4(!i) = low-WORD of the length.

With (!nolink [TOS]) 1.02, 0 is returned for the length (though the buffer
holds 8000 bytes).

!label WF_SHADE, wind_get
!item [WF_SHADE (22365)]
This mode returns the shading state of the window.
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Current shading state: (!nl)
1: Collapsed (!nl)
0: Flipped open
!end_xlist

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!label WF_TOOLBAR, wind_get
!item [WF_TOOLBAR (30)]
lThis mode returns the address of the OBJECT structure of the toolbar. For
this, (!I)wi_gw1(!i) contains the high-WORD and (!I)wi_gw2(!i) the low-WORD of
the address.


!label WF_TOP, wind_get
!item [WF_TOP (10)]
This mode returns the following values:
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =]  ID of the topped window
!item [As of (!nolink [AES]) 3.3] ~
!item [wi_gw2 =] (!nolink [AES]) ID of the owner
!item [wi_gw3 =] Handle from the window below
!item [wi_gw4 =] Special case for MagiC 2.0
!end_xlist
If no window is open, (!I)wi_gw1(!i) contains the value 0. (!nl)

(!B)Warning:(!b) (!nolink [MagiC]) 2.0 must return a negative number (-2) for
the top window handle if it belongs to the program of another application,
else a string of old programs will not run. In (!nolink [MagiC]) 2.0 the actual
handle is returned in (!I)wi_gw4.(!i) As of (!nolink [MagiC]) 3 this no longer
occurs, i.e. the handle will be passed as usual in (!I)wi_gw1.(!i)

(!nolink [XaAES]) return the (!nolink [AES]) ID in (!I)wi_gw4(!i) of the app
that owns the window below.


!label WF_USER_POINTER, wind_get
!item [WF_USER_POINTER (230)]
Get the user value of the window. (!nl)
(!I)wi_gw1(!i) and (!I)wi_gw2(!i) are the 2 values already set by user
with wind_set. (!nl)
MyAES feature

!label WF_UNICONIFY, wind_get
!item [WF_UNICONIFY (27)]
This mode obtains the original dimensions of an iconified window.
!begin_xlist !compressed
!item [wi_gw1 =] X-position, and
!item [wi_gw2 =] Y-position of top L corner,
!item [wi_gw3 =] Width and
!item [wi_gw4 =] Height of the window
!end_xlist
(!B)Warning:(!b) The presence of this feature should 
be checked for with (!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_VSLIDE, wind_get
!item [WF_VSLIDE (9)]
This mode calculates the position of the
(!link [vertical slider][The components of a window]), and writes this into the
further parameter (!I)wi_gw1(!i) (0=very top to 1000=very bottom).


!label WF_VSLSIZE, wind_get
!item [WF_VSLSIZE (16)]
This mode calculates the height of the vertical slider relative to the total
window height, and writes this into the further para!-meters (!I)wi_gw1(!i)
(-1=smallest height, 1=small to 1000=whole height).


!label WF_WIDGETS, wind_get
!item [WF_WIDGETS (200)]
This mode obtains the current positions of the
(!link [slider objects][The components of a window]) (W_UPARROW, W_DNARROW, etc.)
of the window with the ID (!I)wi_ghandle.(!i) Written in the parameters
(!I)wi_gw1(!i) and (!I)wi_gw2(!i) are the  vertical components of the type
rightwidgets, in the parameters (!I)wi_gw3(!i)and (!I)wi_gw4(!i) the
hori!-zontal components of the type bottomwidgets. (!I)wi_gw1(!i) is the top-most
component, (!I)wi_gw2(!i) the lowest component of the vertical slider.
(!I)wi_gw3(!i) is the left-most component and (!I)wi_gw4(!i) the right-most
component of the horizontal slider.

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_WINDLIST, wind_get
!label WF_M_WINDLIST, wind_get
!item [WF_M_WINDLIST (102)]
This mode returns in (!I)wi_gw1(!i) (high-WORD) and (!I)wi_gw2(!i) (low-WORD)
a pointer to a NULL-terminated table of the opened windows (first element = top
window), i.e. to a list of their handles as integer values. Negative handles
belong to frozen applications. In no case may a write-access be made to the
pointer!

Only present in KAOS as of 1.4.2 (WF_WINDLIST) and MagiC.


!label WF_WINX, wind_get
!item [WF_WINX (22360)]
This mode returns information about an installed WINX version (as of WINX 2.1).
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Version
!begin_xlist !compressed
!item [Bit [15..12!]]  Beta indicator
!item [Bit [11.. 8!]]  Major version number (currently 2)
!item [Bit [~7.. 4!]]  Minor version number (actually 3)
!item [Bit [~3.. 0!]]  Internal identifier
!end_xlist
!item [wi_gw2 =] Creation date, (!nolink [GEMDOS]) format
!item [wi_gw3 =] Pointer (low-WORD) of the WINX externals, (or NULL)
!item [wi_gw4 =] Pointer (high-WORD) of the WINX externals, (or NULL)
!end_xlist

!label WF_WINXCFG, wind_get
!item [WF_WINXCFG (22361)]
This mode returns the application-specific configuration switches of the
currently running application.
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =]
Mask of the GLOBAL switches which are supported by the currently
(!nolink [installed]) version of WINX
!item [wi_gw2 =]
The current setting of the GLOBAL switches; applicable are only those
switches which are set in the mask (bit 0 = switch 1)
!item [wi_gw3 =]
Mask of the LOCAL switches, which are supported by the currently
(!nolink [installed]) version of WINX
!item [wi_gw4 =]
The current setting of the LOCAL switches; applicable are only those
switches which are set in the mask (bit 0 = switch 1)
!end_xlist
Normally applications should forgo the inquiry of this information.

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!label WF_WORKXYWH, wind_get
!item [WF_WORKXYWH (4)]
This mode calculates the coordinates of the working area of the window, and
writes these into the further parameters (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) and (!I)wi_gw4.(!i)


!label XA, wind_get
!item [XA (0x5841)]
If the return value of this call is 'XA' (0x5841) then (!nolink [XaAES]) is
(!nolink [installed]). In (!I)wi_gw1(!i) is the version (0x0964 for version
V0.964). (!I)wi_ghandle(!i) must be zero.

!end_xlist

(!B)Note:(!b) The parameters (!I)wi_gw1, wi_gw2, wi_gw3(!i) and (!I)wi_gw4(!i)
here are pure output parameters.

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Window library

!item [See also:]
(!link [Binding] [Bindings for wind_get]) ~ wind_set ~
(!link [Subfunctions overview] [Overview of the wind_get/set subfunctions])


(!ende_liste)



!begin_node Bindings for wind_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Binding:]
!begin_verbatim
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3)
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;

   crys_if (104);

   *wi_gw1 = int_out[1];
   *wi_gw2 = int_out[2];
   *wi_gw3 = int_out[3];
   *wi_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 104   # Function opcode
control+2 !! control[1] !! 2     # Entry in int_in
control+4 !! control[2] !! 5     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_out   !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! wi_gw1
int_out+4 !! int_out[2] !! wi_gw2
int_out+6 !! int_out[3] !! wi_gw3
int_out+8 !! int_out[4] !! wi_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wind_get

(!begin_liste) [Beschreibung]

!item [Name:]
¯Get Window® - ermittelt die Parameter eines Fensters.

!item [AES-Nummer:]
104

!item [Deklaration:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield, int16_t *wi_gw1,
                   int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Beschreibung:]
Die Funktion liefert abhngig von den bergebenen Parametern verschiedene
Informationen ber das Fenster mit der Kennung (!I)wi_ghandle(!i). Es gilt
fr (!I)wi_gfield(!i).

Zusammenfassung aller (!link [Unterfunktionen] [bersicht der wind_get/set Unterfunktionen])

!begin_xlist [WF_TOP]

!label WF_BEVENT, wind_get
!item [WF_BEVENT (24)]
erfragt den Status des Bitvektors, der per wind_set (..., WF_BEVENT, ...)
gesetzt wurde, und schreibt ihn in den Parameter (!I)wi_gw1(!i). (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!nolink [appl_getinfo])
(Opcode 11) ermittelt werden.


!label WF_BITMAP, wind_get
!item [WF_BITMAP (233)]
Get bitmap content of the window if MyAES "windows_backup" option is set to true, 
any windows of any application can be read. (!nl)
MyAES 0.96 Funktion


!label WF_BOTTOM, wind_get
!item [WF_BOTTOM (25)]
erfragt das Handle des untersten Fensters, und schreibt dieses in den
Parameter (!I)wi_gw1(!i). (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_CURRXYWH, wind_get
!item [WF_CURRXYWH (5)]
berechnet die Gesamtgre des Fenster und schreibt sie in die weiteren
Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_DCOLOR, wind_get
!item [WF_DCOLOR (19)]
liefert die Fensterfarben zurck, und zwar wie folgt:

!begin_xlist !compressed
!item [wi_gw1 =] Fensterelement
!item [wi_gw2 =] Farbe bei aktivem Fenster
!item [wi_gw3 =] Farbe bei inaktivem Fenster
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

Ab MagiC 4 und XaAES v 0.943 knnen darber hinaus fr jedes einzelne
Fensterelement 3D-Flags abgefragt werden. Der Aufruf lautet dabei:
wind_get (0, WF_DCOLOR, ...)
Es gilt:

!begin_xlist !compressed
!item [wi_gw1 =] Fensterelement
!item [wi_gw2 =] Farbe im aktiven Zustand
!item [wi_gw3 =] Farbe im inaktiven Zustand
!item [wi_gw4 =] 3D-Flags
!end_xlist

Die 3D-Flags werden dabei als Bitvektor beschrieben; es gilt:

!begin_xlist !compressed [Bit-8+n =]
!item [Bit-0 =] Effekt "3D im Vordergrund"
!item [Bit-1 =] Effekt "3D im Hintergrund"
!item [Bit-2 =] Effekt "selektierbar im Vordergrund"
!item [Bit-3 =] dto. im Hintergrund
!item [Bit-8+n =] Maskenbit fr Bit n
!end_xlist

Dieses Feature kann z.Zt. noch (!I)nicht(!i) ber (!nolink [appl_getinfo]) ermittelt
werden.

!label WF_DDELAY, wind_get
!item [WF_DDELAY (22362)]
Verzgerungswerte
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Startverzgerung beim Klick auf Scrollpfeil
!item [wi_gw2 =] Kontinuierliche Verzgerung beim Klick auf Scrollpfeil
!item [wi_gw3 =] Kontinuierliche Verzgerung beim Klick auf Closer
!item [wi_gw4 =] Kontinuierliche Verzgerung beim Klick auf Fuller
!end_xlist
Alle Werte werden in Millisekunden zurckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_FIRSTXYWH, wind_get
!item [WF_FIRSTXYWH (11)]
berechnet die Koordinaten des ersten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_FTOOLBAR, wind_get
!item [WF_FTOOLBAR (31)]
ermittelt das erste Rechteck aus der Rechteckliste einer
(!link [Toolbar][Toolbar-Support]).
Es gilt:
!begin_xlist !compressed
!item [wi_gw1 =] x-Koordinate
!item [wi_gw2 =] y-Koordinate
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hhe des Rechteckes
!end_xlist

!label WF_FULLXYWH, wind_get
!item [WF_FULLXYWH (7)]
berechnet die maximale Gesamtgre des Fensters und schreibt sie in die
weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_HSLIDE, wind_get
!item [WF_HSLIDE (8)]
berechnet die Position des horizontalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz links, bis 1000 ganz rechts).

!label WF_HSLSIZE, wind_get
!item [WF_HSLSIZE (15)]
berechnet die Gre des horizontalen Sliders relativ zur Gesamtbreite und
schreibt sie in den zustzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste
Gre, 1 klein bis 1000 Gesamtbreite).

!label WF_ICONIFY, wind_get
!item [WF_ICONIFY (26)]
liefert folgende Werte zurck:
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Fenster ist ikonifziert (1) oder nicht (0)
!item [wi_gw2 =] Breite des Fensters
!item [wi_gw3 =] Hhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_INFO, wind_get
!item [WF_INFO (3)]
Ermittelt den aktuellen Text der Infozeile des Fensters mit
dem Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in (!nolink [intin])[2] (Highword) und (!nolink [intin])[3] (Lowword)
bergeben wurde.

Besitzt das Fenster keinen Infozeile, so ist der Rckgabewert
der Funktion gleich 0; der bergebene Buffer bleibt
unverndert.

Da eine Infozeile maximal 128 (N.AES) oder 200 (XaAES) Zeichen lang sein kann, sollte
der bergebene Buffer genug Platz bieten, um einen String
dieser Lnge aufzunehmen.

Steht nur unter N.AES und XaAES zur Verfgung.

!label WF_INFOXYWH, wind_get
!item [WF_INFOXYWH (104)]
Ermittelt die Position des INFO-Fensterelements.

Verfgbar ab MagiC 6.10

!label WF_KIND, wind_get
!item [WF_KIND (1)]
ermittelt die aktuellen
(!link [Komponenten] [Die Komponenten eines Fensters])
des Fensters, und schreibt sie in den Parameter (!I)wi_gw1(!i).

!label WF_MENU, wind_get
!item  [WF_MENU (33)]
liefert die Adresse der OBJECT-Struktur der Menzeile im Fenster zurck.
Dabei enthlt (!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word
der Adresse oder NULL.

!label WF_MINXYWH, wind_get
!item  [WF_MINXYWH (103)]
Fragt die Minimalgre des Fensters ab.

Verfgbar ab MagiC 6

!label WF_NAME, wind_get
!item [WF_NAME (2)]
Ermittelt den aktuellen Fenstertitel des Fensters mit dem
Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in intin[2] (Highword) und intin[3] (Lowword)
bergeben wurde.

Besitzt das Fenster keinen Titel, so ist der Rckgabewert der
Funktion gleich 0; der bergebene Buffer bleibt unverndert.

Da ein Fenstertitel maximal 128 (N.AES) oder 200 (XaAES) Zeichen lang sein kann, sollte
der bergebene Buffer genug Platz bieten, um einen String
dieser Lnge aufzunehmen.

Steht nur unter MagiC (ab V6.0), N.AES und XaAES zur Verfgung.

!label WF_NEWDESK, wind_get
!item [WF_NEWDESK (14)]
die Funktion liefert folgende Werte zurck:
!begin_xlist !compressed
!item [wi_gw1 =] Hi-Word der Desktop-Adresse
!item [wi_gw2 =] Lo-Word der Desktop-Adresse
!item [wi_gw3 =] Index des ersten Objektes
!end_xlist
(!B)Hinweis:(!b) Unter der Desktop-Adresse ist hierbei die Adresse des
aktiven Desktop-Hintergrundes zu verstehen. Die Ausgabe in (!I)wi_gw3(!i)
steht nur unter MagiC zur Verfgung. (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden. Ist auch in KAOS 1.4.2 und
ab MagiC 1 vorhanden.

!label WF_NEXTXYWH, wind_get
!item [WF_NEXTXYWH (12)]
berechnet die Koordinaten des nchsten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_NTOOLBAR, wind_get
!item [WF_NTOOLBAR (32)]
ermittelt das nchste Rechteck aus der Rechteckliste einer Toolbar. Es gilt:
!begin_xlist !compressed
!item [wi_gw1 =] x-Koordinate
!item [wi_gw2 =] y-Koordinate
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hhe des Rechteckes
!end_xlist

!label WF_OPTS, wind_get
!item [WF_OPTS (41)]
Liefert die Einstellungen, welches per (!link [wind_set][WF_OPTS, wind_set])
( WF_OPTS ) gemacht wurden.

Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.


!label WF_M_OWNER, wind_get
!item [WF_M_OWNER (101)]
liefert folgende Werte zurck:
!begin_xlist !compressed  [wi_gw1 ]
!item [wi_gw1 =] Applikations-ID des Besitzers
!end_xlist

Nur ab KAOS 1.4.2 (hie dort noch WF_OWNER) und in MagiC vorhanden.

!label WF_OWNER, wind_get
!item [WF_OWNER (20)]
liefert folgende Werte zurck:
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Applikations-ID des Besitzers
!item [wi_gw2 =] Fenster ist geffnet (1) bzw. geschlossen (0)
!item [wi_gw3 =] Kennung des darberliegenden
!item [wi_gw4 =] Kennung des darunterliegenden Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.


!label WF_PREVXYWH, wind_get
!item [WF_PREVXYWH (6)]
berechnet die Gesamtgre des vorherigen Fensters und schreibt sie in die
weiteren Paramter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_SCREEN, wind_get
!item [WF_SCREEN (17)]
liefert die Adresse und Lnge des internen Buffers, in dem das AES den
Hintergrund von Dropdownmens und Alertboxen zwischenspeichert und schreibt
sie in die weiteren Parameter (!I)wi_gw1(!i) Highword der Adresse,
(!I)wi_gw2(!i) Lowword der Adresse, (!I)wi_gw3(!i) Highword der Lnge und
(!I)wi_gw4(!i) Lowword der Lnge.

Bei TOS 1.02 wird fr Lnge 0 zurckgeliefert (obwohl der Puffer 8000 Bytes
fat).

!label WF_SHADE, wind_get
!item [WF_SHADE (22365)]
Liefert den Shade-Zustand des Fensters.
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Aktueller Shade-Zustand. (!nl)
1: eingeklappt (!nl)
0: ausgeklappt
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_TOOLBAR, wind_get
!item [WF_TOOLBAR (30)]
liefert die Adresse der OBJECT-Struktur der Toolbar zurck. Dabei enthlt
(!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word der Adresse.

!label WF_TOP, wind_get
!item [WF_TOP (10)]
liefert die folgenden Werte zurck:
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Kennung des obersten Fensters
!item [Ab AES 3.3] ~
!item [wi_gw2 =] Applikations-ID des Besitzers
!item [wi_gw3 =] Kennung des nchsten Fensters
!item [wi_gw4 =] Spezialfall fr MagiC 2.0 und XaAES
!end_xlist
Wenn kein Fenster geffnet ist, enthlt (!I)wi_gw1(!i) den Wert 0. (!nl)

(!B)Achtung:(!b) (!nolink [MagiC]) 2.0 mu als oberstes Fensterhandle eine negative Zahl
(-2) liefern, falls das Programm einer anderen Applikation gehrt, sonst
laufen eine Reihe alter Programme nicht. In (!nolink [MagiC]) 2.0 wird das tatschliche
Handle in (!I)wi_gw4(!i) zurckgeliefert. Ab (!nolink [MagiC]) 3 trifft dies nicht mehr
zu, d.h. das Handle wird wie bisher blich, in (!I)wi_gw1(!i) bergeben.

XaAES liefert in (!I)wi_gw4(!i) die Applikations-ID des Besitzers des nchsten Fensters.

!label WF_USER_POINTER, wind_get
!item [WF_USER_POINTER (230)]
Liefert den Benutzer Wert eines Fenster (!nl)
(!I)wi_gw1(!i) and (!I)wi_gw2(!i) are the 2 values already set by user
with wind_set. (!nl)
MyAES Funktion

!label WF_UNICONIFY, wind_get
!item [WF_UNICONIFY (27)]
ermittelt die ursprnglichen Ausmae eines ikonifizierten Fensters.
!begin_xlist !compressed
!item [wi_gw1 =] x-Position
!item [wi_gw2 =] y-Position
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_VSLIDE, wind_get
!item [WF_VSLIDE (9)]
berechnet die Position des vertikalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz oben, bis 1000 ganz unten).

!label WF_VSLSIZE, wind_get
!item [WF_VSLSIZE (16)]
berechnet die Hhe des vertikalen Sliders relativ zur Gesamthhe und
schreibt sie in den zustzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste Hhe,
1 klein bis 1000 Gesamthhe).

!label WF_WIDGETS, wind_get
!item [WF_WIDGETS (200)]
Ermittelt die aktuellen Positionen der Sliderobjekte
(W_UPARROW, W_DNARROW, etc.) des Fensters mit dem Handle
(!I)wi_ghandle(!i). In den Parametern (!I)wi_gw1(!i) und (!I)wi_gw2(!i) werden die
vertikal Elemente des typs rightwidgets, in den Parametern
(!I)wi_gw3(!i) und (!I)wi_gw4(!i) die horizontal Elemente des typs
bottomwidgets geschrieben. (!I)wi_gw1(!i) ist das oberste Element,
(!I)wi_gw2(!i) das unterste Element des Vertikalsliders. (!I)wi_gw3(!i) ist
das linkeste Element, (!I)wi_gw4(!i) das rechteste Element des
Horizontalsliders.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_WINDLIST, wind_get
!label WF_M_WINDLIST, wind_get
!item [WF_M_WINDLIST (102)]
Liefert in (!I)wi_gw1(!i) (High) und (!I)wi_gw2(!i) (Low)  einen Zeiger
auf eine durch 0 abgeschlossene Tabelle der geffneten Fenster (erstes Element
= oberstes Fenster, d.h. auf die Liste ihrer Handles als Integer-Werte.
Negative Handles gehren zu eingefrorenen Applikationen. Auf keinen Fall
darf ber den Zeiger schreibend zugegriffen werden.

Nur in KAOS ab 1.4.2 (WF_WINDLIST) und MagiC vorhanden.

!label WF_WINX, wind_get
!item [WF_WINX (22360)]
Liefert Informationen zur installierten WINX-Version (ab WINX 2.1).
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =] Version
!begin_xlist !compressed [wi_gw1 ]
!item [Bit [15..12!]]  Beta-Kennung
!item [Bit [11.. 8!]]  Major (momentan 2)
!item [Bit [~7.. 4!]]  Minor (momentan 3)
!item [Bit [~3.. 0!]]  Interne Kennung
!end_xlist
!item [wi_gw2 =] Erstellungsdatum im GEMDOS-Format
!item [wi_gw3 =] Zeiger (Low) auf die WINX-Externals (bzw. NULL)
!item [wi_gw4 =] Zeiger (High) auf die WINX-Externals (bzw. NULL)
!end_xlist


!label WF_WINXCFG, wind_get
!item [WF_WINXCFG (22361)]
Liefert die globalen und lokalen Schalter der aufrufenden Applikation
(Bit n entspricht jeweils Schalter n+1).
!begin_xlist !compressed [wi_gw1 ]
!item [wi_gw1 =]
Bitmaske der von der aktuellen WINX-Version untersttzten
globalen Schalter (Bit gesetzt bedeutet, Schalter vorhanden).
!item [wi_gw2 =]
Schalterstellung der globalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!item [wi_gw3 =]
Bitmaske der von der aktuellen WINX-Version untersttzten
lokalen Schalter der aktuellen Applikation (Bit gesetzt
bedeutet, Schalter vorhanden).
!item [wi_gw4 =]
Schalterstellung der lokalen Schalter der aktuellen
Applikation (Bit gesetzt bedeutet, Schalter eingeschaltet).
!end_xlist
Normalerweise sollten Applikationen darauf verzichten diese Informationen
abzufragen.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_WORKXYWH, wind_get
!item [WF_WORKXYWH (4)]
berechnet die Koordinaten des Arbeitsbereichs des Fensters und schreibt sie
in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).


!label XA, wind_get
!item [XA (0x5841)]
Wird als Ergebins 'XA' (0x5841) geliefert so ist XaAES installiert und man
erhlt in (!I)wi_gw1(!i) die Versionsnummer (0x0964 fr Version V0.964).
(!I)wi_ghandle(!i) mu auf Null gesetzt werden.
!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_gw1, wi_gw2, wi_gw3 und wi_gw4 sind dabei
reine Ausgabe-Parameter.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurckgegeben wird.

!item [Verfgbar:]
In allen (!nolink [AES]) Versionen.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fr wind_get]) ~ wind_set ~
(!link [Unterfunktionsbersicht] [bersicht der wind_get/set Unterfunktionen])

(!ende_liste)



!begin_node Bindings fr wind_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3)
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;

   crys_if (104);

   *wi_gw1 = int_out[1];
   *wi_gw2 = int_out[2];
   *wi_gw3 = int_out[3];
   *wi_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 104   # Opcode der Funktion
control+2 !! control[1] !! 2     # Eintrge in int_in
control+4 !! control[2] !! 5     # Eintrge in int_out
control+6 !! control[3] !! 0     # Eintrge in addr_in
control+8 !! control[4] !! 0     # Eintrge in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! wi_gw1
int_out+4 !! int_out[2] !! wi_gw2
int_out+6 !! int_out[3] !! wi_gw3
int_out+8 !! int_out[4] !! wi_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!endif
