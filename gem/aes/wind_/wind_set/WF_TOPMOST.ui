!iflang [english]

!begin_node WF_TOPMOST, wind_set
!label WF_TOPMOST, wind_get
#!html_name WF_TOPMOST_wind_set

A class of windows that will always 'float' ontop of classical windows.
One key feature of windows in any (!nolink [WF_TOPMOST]) state is that they do not
disturb current keyboard focus, and can be used to issue important
messages, status raports, etc., without demanding user interaction.

wind_set (wi_shandle, (!nolink [WF_TOPMOST]), wi_sw1,...)

WF_TOPMOST (232)

!begin_ilist !compressed [wi_sw1 ]
!item [wi_sw1 =]
  !begin_xlist !compressed [0 ]
     !item [0 =] Remove topmost state on the corresponding window.
     !item [1 =] Set topmost state on the corresponding window.
     !item [2 =] Set topmost state and link window visibility to the
            owner's focus. That is, when owner is untopped the
            window disappears, when owner regains focus, the
            window automatically reappears.
  !end_xlist
!end_ilist


Some common characteristics of windows with any (!nolink [WF_TOPMOST]) state set;

!begin_enumerate !compressed
!item Changing the (!nolink [WF_TOPMOST]) state can be done on open windows, but it is 
prefer not if possible.
!item Windows which have TOPMOST state 1 or 2 never get keyboard focus.
!item Windows which have TOPMOST state 1 or 2 never get WM_TOPPED or
   WM_UNTOPPED (!nolink [AES]) messages.
!end_enumerate

State 1: (!nl)
  Setting state 1 will make the corresponding window 'float' ontop of
all other classical windows. State 1 windows will stay ontop until
closed by the user or the application itself.

State 2: (!nl)
  Setting state 1 will make the corresponding window act like windows
with state 1 set, with one important exception; The window is linked to
the window owner's focus status. This means that when the application
that owns the window looses focus, state 2 windows are automatically
made unvisible by the (!nolink [AES]). When the application regains focus, the
window is automatically made visible again. This is done automatically,
and no application handling is necessary.

!end_node

!else

!begin_node WF_TOPMOST, wind_set
!label WF_TOPMOST, wind_get
#!html_name WF_TOPMOST_wind_set

A class of windows that will always 'float' ontop of classical windows.
One key feature of windows in any (!nolink [WF_TOPMOST]) state is that they do not
disturb current keyboard focus, and can be used to issue important
messages, status raports, etc., without demanding user interaction.

wind_set (wi_shandle, (!nolink [WF_TOPMOST]), wi_sw1,...)

WF_TOPMOST (232)

!begin_ilist !compressed [wi_sw1 ]
!item [wi_sw1 =]
  !begin_xlist !compressed [0 ]
     !item [0 =] Remove topmost state on the corresponding window.
     !item [1 =] Set topmost state on the corresponding window.
     !item [2 =] Set topmost state and link window visibility to the
            owner's focus. That is, when owner is untopped the
            window disappears, when owner regains focus, the
            window automatically reappears.
  !end_xlist
!end_ilist


Some common characteristics of windows with any (!nolink [WF_TOPMOST]) state set;

!begin_enumerate !compressed
!item Changing the (!nolink [WF_TOPMOST]) state can be done on open windows, but it is 
prefer not if possible.
!item Windows which have TOPMOST state 1 or 2 never get keyboard focus.
!item Windows which have TOPMOST state 1 or 2 never get WM_TOPPED or
   WM_UNTOPPED (!nolink [AES]) messages.
!end_enumerate

State 1: (!nl)
  Setting state 1 will make the corresponding window 'float' ontop of
all other classical windows. State 1 windows will stay ontop until
closed by the user or the application itself.

State 2: (!nl)
  Setting state 1 will make the corresponding window act like windows
with state 1 set, with one important exception; The window is linked to
the window owner's focus status. This means that when the application
that owns the window looses focus, state 2 windows are automatically
made unvisible by the (!nolink [AES]). When the application regains focus, the
window is automatically made visible again. This is done automatically,
and no application handling is necessary.

!end_node

!endif
