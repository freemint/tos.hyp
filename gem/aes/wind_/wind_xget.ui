!iflang [english]

!begin_node wind_xget

(!begin_liste) [Availability]

!item [Name:]
ØGet windowÆ - Obtain properties of a window, extended version.

!item [Opcode:]
104

!item [Syntax:]
int16_t wind_xget ( int16_t wi_ghandle, int16_t wi_gfield, 
                    int16_t *wi_gw1, int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw4,
                    int16_t *wo_gw1, int16_t *wo_gw2, int16_t *wo_gw3, int16_t *wo_gw4 );

!item [Description:]
Depending on the parameters passed, the call wind_xget returns information
about various properties of the window with the ID (!I)wi_ghandle.(!i) The
following apply for (!I)wi_gfield(!i):

(!B)Overview of all
(!link [subfunctions][Overview of the wind_get/set subfunctions]);(!b) numbers
in brackets represent the (!I)wi_gfield(!i) mode:

!begin_xlist [WF_TOP]

!label WF_CALCF2W, wind_xget
!item [WF_CALCF2W (42)] (!nl)
This mode will take an arbitrary FULL area, and return the corresponding WORK
area.

The presence should be checked for using (!link [appl_getinfo][%apgi_11])
(opcode 11).


!label WF_CALCW2F, wind_xget
!item [WF_CALCW2F (43)] (!nl)
This mode will take an arbitrary WORK area, and return the resulting FULL area
of the window in question.

The presence should be checked for using (!link [appl_getinfo][%apgi_11])
(opcode 11).


!label WF_FIRSTAREAXYWH, wind_xget
!item [WF_FIRSTAREAXYWH (13)] (!nl)
(!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) and (!I)wi_gw4(!i) define a
clipping area, and the (!nolink [AES]) may optimize the list of rectangles
that is returned by WF_FIRSTAREAXYWH and
(!link [WF_NEXTXYWH][WF_NEXTXYWH, wind_get]).

The presence should be checked for using (!link [appl_getinfo][%apgi_11])
(opcode 11).

!end_xlist

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
(!nolink [XaAES]) as of 2004-12-14

!item [Group:]
Window library

!item [See also:]
(!link [Binding] [Bindings for wind_xget]) ~ wind_get ~ wind_set ~
(!link [Subfunctions overview] [Overview of the wind_get/set subfunctions])


(!ende_liste)



!begin_node Bindings for wind_xget
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_xget ( int16_t wi_ghandle, int16_t wi_gfield,
                    int16_t *wi_gw1, int16_t *wi_gw2,
                    int16_t *wi_gw3, int16_t *wi_gw4,
                    int16_t *wo_sw1, int16_t *wo_sw2,
                    int16_t *wo_sw3, int16_t *wo_sw4 );

!item [Binding:]
!begin_verbatim
int16_t wind_xget ( int16_t wi_ghandle, int16_t wi_gfield,
                    int16_t *wi_gw1, int16_t *wi_gw2,
                    int16_t *wi_gw3, int16_t *wi_gw4,
                    int16_t *wo_sw1, int16_t *wo_sw2,
                    int16_t *wo_sw3, int16_t *wo_sw4 );
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;
   int_in[2]  = *wi_sw1;
   int_in[3]  = *wi_sw2;
   int_in[4]  = *wi_sw3;
   int_in[5]  = *wi_sw4;

   crys_if (104);

   *wo_gw1 = int_out[1];
   *wo_gw2 = int_out[2];
   *wo_gw3 = int_out[3];
   *wo_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 104   # Function opcode
control+2 !! control[1] !! 6     # Entry in int_in
control+4 !! control[2] !! 5     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_in+4  !! int_in[2]  !! wi_gw1
int_in+6  !! int_in[3]  !! wi_gw2
int_in+8  !! int_in[4]  !! wi_gw3
int_in+10 !! int_in[5]  !! wi_gw4
int_out   !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! wo_gw1
int_out+4 !! int_out[2] !! wo_gw2
int_out+6 !! int_out[3] !! wo_gw3
int_out+8 !! int_out[4] !! wo_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wind_xget

(!begin_liste) [Beschreibung]

!item [Name:]
ØGet WindowÆ - ermittelt die Parameter eines Fensters.

!item [AES-Nummer:]
104

!item [Deklaration:]
int16_t wind_xget ( int16_t wi_ghandle, int16_t wi_gfield, 
                    int16_t *wi_gw1, int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw4,
                    int16_t *wo_gw1, int16_t *wo_gw2, int16_t *wo_gw3, int16_t *wo_gw4 );

!item [Beschreibung:]
Die Funktion liefert abhÑngig von den Åbergebenen Parametern verschiedene
Informationen Åber das Fenster mit der Kennung (!I)wi_ghandle(!i). Es gilt
fÅr (!I)wi_gfield(!i).

Zusammenfassung aller
(!link [Unterfunktionen] [öbersicht der wind_get/set Unterfunktionen])

!begin_xlist [WF_TOP]

!label WF_CALCF2W, wind_xget
!item [WF_CALCF2W (42)] (!nl)
This mode will take an arbitrary FULL area, and return the
corresponding WORK area.

Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden.

!label WF_CALCW2F, wind_xget
!item [WF_CALCW2F (43)] (!nl)
This mode will take an arbitrary WORK area, and return the
resulting FULL area of the window in question.

Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden.


!label WF_FIRSTAREAXYWH, wind_xget
!item [WF_FIRSTAREAXYWH (13)] (!nl)
(!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und (!I)wi_gw4(!i) is a clipping
area, and the AES may optimize the list of rectangles returned by
WF_FIRSTAREAXYWH and (!link [WF_NEXTXYWH][WF_NEXTXYWH, wind_get]).

Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden.

!end_xlist


!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
XaAES seit 2004-12-14

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wind_xget]) ~ wind_get ~ wind_set ~
(!link [UnterfunktionsÅbersicht] [öbersicht der wind_get/set Unterfunktionen])

(!ende_liste)



!begin_node Bindings fÅr wind_xget
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_xget ( int16_t wi_ghandle, int16_t wi_gfield,
                    int16_t *wi_gw1, int16_t *wi_gw2,
                    int16_t *wi_gw3, int16_t *wi_gw4,
                    int16_t *wo_sw1, int16_t *wo_sw2,
                    int16_t *wo_sw3, int16_t *wo_sw4 );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_xget ( int16_t wi_ghandle, int16_t wi_gfield,
                    int16_t *wi_gw1, int16_t *wi_gw2,
                    int16_t *wi_gw3, int16_t *wi_gw4,
                    int16_t *wo_sw1, int16_t *wo_sw2,
                    int16_t *wo_sw3, int16_t *wo_sw4 );
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;
   int_in[2]  = *wi_sw1;
   int_in[3]  = *wi_sw2;
   int_in[4]  = *wi_sw3;
   int_in[5]  = *wi_sw4;

   crys_if (104);

   *wo_gw1 = int_out[1];
   *wo_gw2 = int_out[2];
   *wo_gw3 = int_out[3];
   *wo_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 104   # Opcode der Funktion
control+2 !! control[1] !! 6     # EintrÑge in int_in
control+4 !! control[2] !! 5     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_in+4  !! int_in[2]  !! wi_gw1
int_in+6  !! int_in[3]  !! wi_gw2
int_in+8  !! int_in[4]  !! wi_gw3
int_in+10 !! int_in[5]  !! wi_gw4
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! wo_gw1
int_out+4 !! int_out[2] !! wo_gw2
int_out+6 !! int_out[3] !! wo_gw3
int_out+8 !! int_out[4] !! wo_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!endif
