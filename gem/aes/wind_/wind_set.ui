!iflang [english]

!begin_node wind_set
#!html_name wind_set
(!begin_liste) [Availability]

!item [Name:]
¯Set window® - Alter various window attributes.

!item [Opcode:]
105

!item [Syntax:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Description:]
Depending on the passed parameters, the call wind_set alters various atributes
of the window with the ID (!I)wi_shandle.(!i) The following apply for
(!I)wi_sfield(!i):

(!B)Overview of all
(!link [subfunctions][Overview of the wind_get/set subfunctions]);(!b) numbers
in brackets represent the (!I)wi_sfield(!i) mode:

!begin_xlist !compressed [WF_TOP]

!label WF_BEVENT, wind_set
!item [WF_BEVENT (24)]
This mode permits the stopping of a WM_TOPPED message when clicking on a window
(e.g. to allow continued functions in untopped windows). (!I)wi_sw1(!i) is a
bit-vector in which only bit 0 has any meaning at present. Other values than
1 are therefore not permitted. The call would then be: wind_set(wi_shandle,
WF_BEVENT, 0x0001, 0, 0, 0).

(!B)Warning:(!b) The presence of this feature should be checked for
with (!nolink [appl_getinfo]) (opcode 11).


!label WF_BOTTOM, wind_set
!item [WF_BOTTOM (25)]
This mode permits placing the (opened) window with the ID (!I)wi_shandle(!i) in
the background, namely with wind_set(wi_shandle, WF_BOTTOM, 0, 0, 0, 0).

(!B)Warning:(!b) The presence of this feature should  be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_BOTTOMALL, wind_set
!item [WF_BOTTOMALL (22368)]
This mode places all windows of the applica!-tion (!I)wi_sw1(!i) at the back.
!begin_xlist !compressed
!item [wi_sw1 =] ID of the application
!end_xlist
If one passes a window ID unequal to DESKWINDOW in (!I)wi_shandle(!i), then in
addition the (!I)wi_shandle(!i) window will be placed right at the back
(otherwise the order of the windows amongst each other will remain unchanged).
(!I)wi_shandle(!i) must be open and belong to the application (!I)wi_sw1.(!i)

There is no guarantee that an application can apply (!nolink [WF_BOTTOMALL]) to
the windows of another application (particularly in a multitasking
environment). In that case a 0 is returned.

(!B)Warning:(!b) The presence of this feature should  be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!label WF_COLOR, wind_set
!item [WF_COLOR (18)]
This mode alters the colour of a window
(!link [component][The components of a window]). For this the index of the
component is specified in (!I)wi_sw1(!i):
 (!nl)
!begin_xlist !compressed [W_BOTTOMER (20)]
!item [Element (Value)] Description
!item [~] ~
!label W_BOTTOMER
!item [W_BOTTOMER (20)] Backdrop button
!label W_BOX
!item [W_BOX (0)] Window's root object
!label W_CLOSER
!item [W_CLOSER (2)] Close-box
!label W_DATA
!item [W_DATA (6)] Parent object of the remaining components
!label W_DNARROW
!item [W_DNARROW (11)] Downward arrow
!label W_FULLER
!item [W_FULLER (4)] Zoom-box
!label W_HBAR
!item [W_HBAR (14)] Parent object of the vertical slider components
!label W_HELEV
!item [W_HELEV (18)] Horizontal slider
!label W_HSLIDE
!item [W_HSLIDE (17)] Background of the horizontal slider
!label W_INFO
!item [W_INFO (5)] Info-line
!label W_LFARROW
!item [W_LFARROW (15)] Leftward arrow
!label W_NAME
!item [W_NAME (3)] Move bar
!label W_RTARROW
!item [W_RTARROW (16)] Rightward arrow
!label W_SIZER
!item [W_SIZER (8)] Size-box
!label W_SMALLER
!item [W_SMALLER (19)] Iconifier button
!label W_TITLE
!item [W_TITLE (1)] Parent object of the close & zoom boxes, also the name
!label W_UPARROW
!item [W_UPARROW (10)] Upward arrow
!label W_VBAR
!item [W_VBAR (9)] Parent object of the vertical slider components
!label W_VELEV
!item [W_VELEV (13)] Vertical slider
!label W_VSLIDE
!item [W_VSLIDE (12)] Background of the vertical slider

!label W_WORK
!item [W_WORK (7)] Working area

!end_xlist

The colour for the object type of the window component is passed in parameter
(!I)wi_sw2(!i) if the window is topped, in (!I)wi_sw3(!i) if it is
inactive. A value of -1 retains the current colour setting.

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).
With (!nolink [TOS]) it only works as of (!nolink [AES]) Version 3.00.


!label WF_CURRXYWH, wind_set
!item [WF_CURRXYWH (5)]
This mode sets the window size from (!I)wi_sw1(!i), (!I)wi_sw2(!i),
(!I)wi_sw3(!i) and (!I)wi_sw4.(!i)

(!nolink [XaAES]) is compatible with all other (!nolink [AES])'s, except
from the following points:
!begin_enumerate
!item If (!I)x(!i), (!I)y(!i), (!I)w(!i) and (!I)h(!i) all have a value of
      -1 (!nolink [XaAES]) ignores the call, but fills in any return values
      when needed.

!item (!I)x(!i) and (!I)y(!i) values of -1 are 'legal', i.e, one cannot use -1
      to use any old (!I)x(!i) value. Of course, the (!I)x(!i) and (!I)y(!i)
      coordinates are checked to be inside the root window (not X when noleft =
      false).

!item When (!I)h(!i) has a value of 0, the window is in fact shaded. This is a
      thing (!nolink [N.AES]) does with MiNTSetter, although I'm not sure this
      is correct. The application is sent a WM_SHADED message. On the next
      wind_set(handle, WF_CURRXYWH,...) where the (!I)h(!i) coordinate
      is not equal to the window's shaded height, the window is unshaded. While
      the window is shaded via this method, [Shift]-clicks on the window title
      to shade a window are ignored.
!end_enumerate

(!nolink [XaAES]) from 2004-09-22 has an
(!link [extended version][WF_CURRXYWH, wind_xset]).


!label WF_DCOLOR, wind_set
!item [WF_DCOLOR (19)]
This mode sets the default colours for the 
(!link [window components][The components of a window]). The parameter
(!I)wi_shandle(!i) is ignored, and for the remaning parameters the following
applies:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw1 =] Window component
!item [wi_sw2 =] Colour for active window
!item [wi_sw3 =] Colour for inactive window
!end_xlist
(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11). With (!nolink [TOS]) it only
works as of (!nolink [AES]) Version 3.00; from Version 4.1 onwards it causes
all the currently displayed windows that have not had their colour set
explicitly with WF_COLOR to be changed.

When changing the component W_FULLER, both W_SMALLER and W_BOTTOMER will be
changed auto!-matically as well; this makes it necessary to change the 'Fuller'
first, then the remaining components.

As of MagiC 4 it is possible to set 3D-flags for each individual window
component. The following apply for this:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw1 =] Window component
!item [wi_sw2 =] Colour in active state
!item [wi_sw3 =] Colour in inactive state
!item [wi_sw4 =] 3D-flags
!end_xlist
The parameter (!I)wi_shandle(!i) must take the value 0 for this; the 3D-flags
are described as a bit-vector for which the following apply:
!begin_xlist !compressed [Bit-8+n =]
!item [Bit-0 =] '3D in foreground' effect
!item [Bit-1 =] '3D in background' effect
!item [Bit-2 =] 'Selectable in foreground' effect
!item [Bit-3 =] 'Selectable in background' effect
!item [Bit-8+n =] Mask bit for bit 'n'
!end_xlist
Thus only those bits for which the associated mask bit is set are altered.
The presence of this feature can presently (!I)not(!i) be checked for with
(!nolink [appl_getinfo]).


!label WF_DDELAY, wind_set
!item [WF_DDELAY (22362)]
This mode sets delay values:
!begin_xlist !compressed [wi_sw1 ]
!item [wi_sw1 =] Start delay for a click on a scroll arrow
!item [wi_sw2 =] Continuing delay for a click on a scroll arrow
!item [wi_sw3 =] Continuing delay for a click on the
                 '(!link [Closer][The components of a window])' widget
!item [wi_sw4 =] Continuing delay for a click on the
                 '(!link [Fuller][The components of a window])' widget
!end_xlist
All values are set in milliseconds.

The delay values serve to retard actions if these are executed too quickly
(for instance due to newer hardware).

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360])  (opcode 22360).


!label WF_FULLSCREEN, wind_set
!item [WF_FULLSCREEN (235)]
Switch fullscreen - normal window mode. The fullscreen mode is without any
widget. (!nl)
Hit the key ESC escape from fullscreen mode. (!nl)
MyAES 0.96 feature


!label WF_FULLXYWH, wind_set
!item [WF_FULLXYWH (7)]
If either (!I)wi_sw1(!i), (!I)wi_sw2(!i), (!I)wi_sw3(!i)
or (!I)wi_sw4(!i) have a value of -1, that coordinate is not changed.
If ALL coordinates have a value of -1, the window is actually moved to the
current FULLXYWH coordinates, making the current window position the new
PREVXYWH position. (!nl)
XaAES since 2004-09-22, there is an extend (!link [version][WF_FULLXYWH, wind_xset]).

!label WF_HSLIDE, wind_set
!item [WF_HSLIDE (8)]
This mode sets the horizontal slider to the new position (!I)wi_sw1(!i)
(0=far left, to 1000=far right).

!label WF_HSLSIZE, wind_set
!item [WF_HSLSIZE (15)]
This mode sets the size of the horizontal slider relative to the total width
of the window to (!I)wi_sw1(!i) (-1=smallest size, 1=small to 1000=total width).

!label WF_ICONIFY, wind_set
!item [WF_ICONIFY (26)]
This mode iconifies the window. The parameters (!I)wi_sw1(!i) to (!I)wi_sw4(!i)
specify the position and the size of the window in its iconified state;
these values are obtained from the (!nolink [AES]) at the arrival of a
WM_ICONIFY message. (!B)Tip:(!b) To iconify an already created but (!I)not
yet(!i) opened window, pass (-1,-1,-1,-1) as coordinates. The window can then be
displayed on the screen with wind_open(handle,-1,-1,-1,-1). As of MagiC 4 and
(!nolink [XaAES]) v0.943 this works also if the window is already open.

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_RESVD, wind_set
!label WF_IGNORE, wind_set
!item [WF_IGNORE (13)]
This mode is used in some old (!nolink [AES]) versions. Its function is unknown.

!label WF_INFO, wind_set
!item [WF_INFO (3)]
This mode writes the string to which (!I)wi_sw1(!i) and (!I)wi_sw2(!i) point
to the (!link [Info-line][The components of a window]). (!nolink [GEM]) only
uses the pointer for this and does (!I)not(!i) create a copy. Under
(!nolink [GEM]) the length is restricted to 80 characters; with
(!nolink [N.AES]) there is a maxium of 128, with (!nolink [XaAES]) up to 200
are allowed.


!label WF_KIND, wind_set
!item [WF_KIND (1)]
This mode sets (!I)wi_sw1(!i) as a new window compo!-nent; format as for
wind_create.


!label WF_BACKDROP, wind_set
!label WF_M_BACKDROP, wind_set
!item [WF_M_BACKDROP (100)]
With this mode a window (!I)wi_sw1(!i) can be moved at one go to the bottom of
the window stack without altering the order of the remaining windows. In
KAOS 1.4.2 this parameter was still called WF_BACKDROP.


!label WF_MENU, wind_set
!item [WF_MENU (33)]
This mode can attach a menu bar to a window. If the window was created without
the MENUBAR attribute, the call is ignored. (!I)wi_sw1(!i) and (!I)wi_sw2(!i)
must point to the address of the tree. You get MN_SELECTED message in the
extended manner adopted from (!nolink [AES]) 4.1.

Only  available in (!nolink [XaAES]).


!label WF_NAME, wind_set
!item [WF_NAME (2)]
This mode writes the string to which (!I)wi_sw1(!i) and (!I)wi_sw2(!i) point to
the (!link [title-bar][The components of a window]). (!nolink [GEM]) only
uses the pointer for this and does (!I)not(!i) create a copy. Under
(!nolink [GEM]) the length is restricted to 80 characters; with
(!nolink [N.AES]) there is a maxium of 128, with (!nolink [XaAES]) up to 200
are allowed.


!label WF_NEWDESK, wind_set
!item [WF_NEWDESK (14)]
This mode sets the object tree to which (!I)wi_sw1(!i) and (!I)wi_sw2(!i) point
as a new desktop, with (!I)wi_sw3(!i) as the start object. By passing a
NULL-pointer, the default back!-ground can be set again.


!label WF_OPTIONS, wind_set
!item [WF_OPTIONS (234)]
Change window behavior
!begin_xlist !compressed
!item [wi_sw1 =] (!nl)
~1: request automatic close when application focus is lost and restore it
when is back (!nl)
!item [wi_sw2 =] remove/add option: (!nl)
1: add option (!nl)
0: remove option
!end_xlist
MyAES feature


!label WF_OPTS, wind_set
!item [WF_OPTS (41)]
This mode sets some special options for (!nolink [XaAES]).

(!I)wi_handle(!i) is a window handle, or -1. If 'handle' is a legal window
handle, the options will only apply to that window. If 'handle' is -1, the
settings will apply to all windows the application creates AFTER this call.
(!I)wi_sw1(!i) is 0 to clear the selected bits. or 1 to set the selected bits.
(!I)wi_sw2(!i) Currently available options for this are as follows:

 !begin_xlist !compressed [~~~~]
 !label WO0_WHEEL
   !item [WO0_WHEEL (0x0001)]
   Setting this bit will enable extended mouse-wheel support, and go into
   WHL_AROWWHEEL mode causing (!nolink [XaAES]) to send extended WM_ARROWED
   messages to the application when the mouse-wheel turns. Read section
   "XaAES and wheel mouse handling" for details.

 !label WO0_FULLREDRAW
   !item [WO0_FULLREDRAW (0x0002)]
   Setting this bit will make (!nolink [XaAES]) send WM_REDRAW messages to
   cover the whole work-area of the window  when it is FULLED. Default
   behaviour is to only send WM_REDRAW messages for the areas that need it,
   blitting the already visible parts. This can also be configured via
   xaaes.cnf, see the app_options argument 'naesff'.

 !label WO0_NOBLITW
   !item [WO0_NOBLITW (0x0004)]
   Setting this bit will make (!nolink [XaAES]) send WM_REDRAW messages to
   cover the whole work-area of the window when its WIDTH changes. This is handy
   for apps like HighWire, text processors etc. that need to reformat when window
   width changes. Default behaviour is to send WM_REDRAW messages for the areas
   that need it.

 !label WO0_NOBLITH
   !item [WO0_NOBLITH (0x0008)]
   Setting this bit will make (!nolink [XaAES]) send WM_REDRAW messages to
   cover the whole work-area of the window when its HEIGHT changes. Default
   behaviour is to send WM_REDRAW messages for the areas that need it.
  
 !label WO0_SENDREPOS
   !item [WO0_SENDREPOS (0x0010)]
   Setting this bit will make (!nolink [XaAES]) send a WM_REPOSED (38)
   message when a window's X/WIDTH and/or Y/HEIGHT coordinate pair changes.
   Such changes happen when the user resizes the window using upper/left
   borders. Default behaviour is to first send a WM_MOVED followed by a WM_SIZED
   message under these conditions, because older apps don't evaluate the
   WIDTH/HEIGHT in WM_MOVED messages. So, dudes, set this bit and use WM_REPOSED!

 !label WO0_WCOWORK
   !item [WO0_WCOWORK (0x0020)]
   Setting this bit will enable Window Coordinate Orientation WORK mode.
 !end_xlist

(!I)wi_sw3(!i) and (!I)wi_sw4(!i) are currently undefined and must be cleared.

The presence should be checked for using (!link [appl_getinfo][%apgi_11])
(opcode 11).


!label WF_PREVXYWH, wind_set
!item [WF_PREVXYWH (6)]
If either(!I)wi_sw1(!i), (!I)wi_sw2(!i), (!I)wi_sw3(!i) or (!I)wi_sw4(!i)
have a value of -1, that coordinate is not changed. If ALL coordinates have a
value of -1, the window is actually moved to the current PREVXYWH coordinates,
making the current window position the new PREVXYWH position.

(!nolink [XaAES]) from 2004-09-22 has an 
(!link [extended version][WF_PREVXYWH, wind_xset]).


!label WF_SHADE, wind_set
!item [WF_SHADE (22365)]
This mode sets the shading state of the window.
!begin_xlist !compressed
!item [wi_sw1 =] Shade state to be activated:
~1: Collapsed (!nl)
~0: Flipped open (!nl)
-1: Switch state
!end_xlist
When shading (collapsing) a WM_SHADED message is sent, when unshading a
WM_UNSHADED and a WM_REDRAW over the complete working area of the window. If
one sets the state before opening the window, then it will be respected on
opening. The closing of a window sets it automatically to unshaded (flipped
open).

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!label WF_STACK, wind_set
!item [WF_STACK (22366)]
This mode puts the window (!I)wi_shandle(!i) in the window stack below the
window (!I)wi_sw1(!i), without changing the screen position itself.
!begin_xlist !compressed
!item [wi_sw1 =] Open window/DESKWINDOW(0)/NOWINDOW (-1)
!end_xlist

If window (!I)wi_shandle(!i) is closed, the desired position is stored and
taken into account on opening the window with wind_open. (!I)wi_sw1(!i) is
only evaluated at the actual positioning. Should ((!I)wi_sw1(!i) == DESKWINDOW),
the window will be placed right at the back (corresponds to WF_BOTTOM). If
((!I)wi_sw1(!i) == NOWINDOW) or (!I)wi_sw1(!i) is not open, then the window
(!I)wi_shandle(!i) will be placed right at the front (corresponds to WF_TOP).

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!label WF_TOOLBAR, wind_set
!item [WF_TOOLBAR (30)]
This mode attaches a toolbar to a window, or alters or removes it. The
following apply:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw1 =] High-WORD, (!U)and(!u)
!item [wi_sw2 =] Low-WORD of the toolbar address
!end_xlist
To remove a toolbar, the parameters (!I)wi_sw1(!i) and (!I)wi_sw2(!i) have to
be set to NULL.

(!nolink [XaAES]) as of v0.942 can process toolbars. This has some more
parameters:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw3 =] Object index of the item where the drawing will start
!item [wi_sw4 =] The current editable object; where the cursor will be placed
!end_xlist

Activating a toolbar object results in the event WM_TOOLBAR.


!label WF_TOP, wind_set
!item [WF_TOP (10)]
This mode makes the window with the identifier (!I)wi_shandle(!i) be the new
top window. As of MagiC 4 and (!nolink [XaAES]) v0.943, a call of wind_set
(-1, WF_TOP, id, ...) can swap the menu and the desktop background to the
appli!-cation with the ID (!I)id(!i); a value of -1 for (!I)id(!i)
represents the current application.


!label WF_TOPALL, wind_set
!item [WF_TOPALL (22367)]
This mode brings all windows of the applica!-tion (!I)wi_sw1(!i) to the front.
!begin_xlist !compressed
!item [wi_sw1 =] ID of the application
!end_xlist

If one passes in (!I)wi_shandle(!i) a window ID other than DESKWINDOW (0), then
(!I)wi_shandle(!i) will also be placed right at the front (else the order of the
windows among each other will not be altered). (!I)wi_shandle(!i) must be open
and belong to the application (!I)wi_sw1.(!i) There is no guarantee that an
application can apply WF_TOPALL to the windows of another application
(particularly in a multitasking environment). In that case a 0 is returned.

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!label WF_UNICONIFY, wind_set
!item [WF_UNICONIFY (27)]
This mode uniconifies a specified window, returning it to its original size and
position. It is only available as of (!nolink [AES]) Version 4.1.

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_11]) (opcode 11).


!label WF_UNICONIFYXYWH, wind_set
!item [WF_UNICONIFYXYWH (28)]
This mode uses the parameters (!I)wi_sw1(!i) to (!I)wi_sw4(!i) to pass the
position and size of the window in its uniconified state to the next
WF_UNICONIFY message targeting it. This opcode is particularly useful if a
window that is already in an iconified state has been opened. It is only
available as of (!nolink [AES]) Version 4.1.


!label WF_USER_POINTER, wind_set
!item [WF_USER_POINTER (230)]
Link a user value to the windows. (!nl)
(!I)wi_sw1(!i) and (!I)wi_sw2(!i) are the 2 value you can transmit it could be
used as 32 bits pointer but any value can be provided. (!nl)
MyAES feature


!label WF_VSLIDE, wind_set
!item [WF_VSLIDE (9)]
This mode sets the vertical slider to the new position (!I)wi_sw1(!i) (0=very
top to 1000=very bottom).


!label WF_VSLSIZE, wind_set
!item [WF_VSLSIZE (16)]
This mode sets the height of the vertical slider relative to the total height to
the value (!I)wi_sw1(!i) (-1=smallest height, 1=small to 1000=total height).


!label WF_WCOLOR
!item [WF_WCOLOR]
No information available at present.


!label WF_WHEEL, wind_set
!item [WF_WHEEL (40)]
This mode sets the WA_WHEEL event for one window ((!I)wi_shandle(!i)= window ID)
or for all applications ((!I)wi_shandle(!i)= 0). If (!I)wi_sw1(!i) = 1, then the
(!nolink [XaAES]) sends a special WM_ARROWED (WA_WHEEL) message. With 
(!I)wi_sw1(!i)= 1 one gets the normal message.

Available as of (!nolink [XaAES]) v0.960.


!label WF_WIDGETS, wind_set
!item [WF_WIDGETS (200)]
This mode sets the current positions of the slider objects (W_UPARROW,
W_DNARROW, etc.) of the window with the ID (!I)wi_shandle.(!i) In the
parameters (!I)wi_sw1(!i) and (!I)wi_sw2(!i) are passed the vertical components
of the type rightwidgets, and in the parameters (!I)wi_sw3(!i) and
(!I)wi_sw4(!i) the horizontal components of the type bottomwidgets.
(!I)wi_sw1(!i) is the top-most component (!I)wi_sw2(!i) the lowest component
of the vertical slider. (!I)wi_sw3(!i) is the left-most component and
(!I)wi_sw4(!i) the right-most component of the horizontal slider.


!label WF_WIND_ATTACH, wind_set
!item [WF_WIND_ATTACH (231)]
attach a window to another, using it if you close the mother window other windows
linked will be closed. (!I)wi_sw1(!i) the window to attach. (!nl)
MyAES feature


!label WF_WINXCFG, wind_set
!item [WF_WINXCFG (22361)]
This mode sets the global and local switches of the called application,
provided this is possible.
!begin_xlist !compressed
!item [wi_sw1 =]
Mask of the global switch to be changed at this call (bit set means
adopt switch)
!item [wi_sw2 =]
New setting of the global switches (bit set means switch is on)
!item [wi_sw3 =]
Mask of the local switch to be changed at this call (bit set means
adopt switch)
!item [wi_sw4 =]
New setting of the local switches (bit set means switch is on)
!end_xlist
Which switches were actually altered can be found with a call of
wind_get(WF_WINXCFG). (!B)Attention:(!b) This function should only be called
by configuration programs that know what they are doing (e.g. WINX.CPX)!

(!B)Warning:(!b) The presence of this feature should be checked for with
(!link [appl_getinfo][%apgi_22360]) (opcode 22360).


!end_xlist

(!B)Note:(!b) The parameters (!I)wi_sw1, wi_sw2, wi_sw3(!i) and
(!I)wi_sw4(!i) here are dependent on the function number passed in the
parameter (!I)wi_sfield.(!i)

When specifying the window name, one should always leave a (!I)space(!i) before
and after the character string for aesthetic reasons, since otherwise the
pattern in the (!link [title-bar][The components of a window]) abuts directly
to the first and last character of the name.

(!B)Warning:(!b) The opcodes listed here are (!I)no longer(!i) fully compatible
with PC-(!nolink [GEM]) as development there proceeded in a
(!link [different direction][wind_set and PC-GEM]).


!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Window library

!item [See also:]
(!link [Binding] [Bindings for wind_set]) ~ wind_get ~ wind_create ~ OBJECT ~
(!link [Subfunctions overview] [Overview of the wind_get/set subfunctions])


(!ende_liste)



!begin_node wind_set and PC-GEM
#!html_name wind_set_and_PC_GEM
(!B)As of PC-(!nolink [GEM]) Version 2.0 the following apply:(!b)

!label WF_ATTRB, wind_set
(!B)WF_ATTRB (18):(!b) This sets the window attribute vector.
Here: (!I)wi_sw1(!i) = 0 (or 1): Window is the top window, or not;
apart from this there is (!I)no(!i) further information available.

!label WF_SIZETOP, wind_set
(!B)WF_SIZETOP (19):(!b) This makes the window an active one, without
changing the order of the other windows. At the same time the
position and size of the window can be reset:

!begin_xlist !compressed
!item [wi_sw1 =]
X-position, (!U)and(!u)
!item [wi_sw2 =]
Y-position of top left corner,
!item [wi_sw3 =]
Width, (!U)and(!u)
!item [wi_sw4 =]
Height of the window
!end_xlist

!end_node



!begin_node Bindings for wind_set
#!html_name Bindings_for_wind_set
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Binding:]
!begin_verbatim
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 )
{
   int_in[0]  = wi_shandle;
   int_in[1]  = wi_sfield;
   int_in[2]  = wi_sw1;
   int_in[3]  = wi_sw2;
   int_in[4]  = wi_sw3;
   int_in[5]  = wi_sw4;

   return ( crys_if(105) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 105   # Function opcode
control+2 !! control[1] !! 6     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! wi_shandle
int_in+2  !! int_in[1]  !! wi_sfield
int_in+4  !! int_in[2]  !! wi_sw1
int_in+6  !! int_in[3]  !! wi_sw2
int_in+8  !! int_in[4]  !! wi_sw3
int_in+10 !! int_in[5]  !! wi_sw4
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node

!else

!begin_node wind_set
#!html_name wind_set
(!begin_liste) [Beschreibung]

!item [Name:]
¯Set Window® - verndert einzelne Parameter eines Fensters.

!item [AES-Nummer:]
105

!item [Deklaration:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Beschreibung:]
Die Funktion verndert, abhngig von den bergebenen Parametern,
verschiedene Eigenschaften des Fensters mit der Kennung (!I)wi_shandle(!i).
Es gilt fr (!I)wi_sfield(!i).

Zusammenfassung aller
(!link [Unterfunktionen] [bersicht der wind_get/set Unterfunktionen])

!begin_xlist [WF_TOP]
!label WF_BEVENT, wind_set
!item [WF_BEVENT (24)]
erlaubt es, eine WM_TOPPED Message beim Anklicken eines Fensters zu
verhindern (z.B. um Dauerfunktionen in nicht getoppten Fenstern zu
ermglichen). (!I)wi_sw1(!i) ist ein Bitvektor bei dem bisher lediglich
Bit-0 eine Bedeutung besitzt. Andere Werte als 1 sind also nicht erlaubt.
Der Aufruf wre dann: wind_set((!I)wi_shandle(!i), WF_BEVENT, 0x0001, 0,
0, 0). (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
appl_getinfo (Opcode 11) ermittelt werden.

!label WF_BOTTOM, wind_set
!item [WF_BOTTOM (25)]
ermglicht es, das (geffnete!) Fenster mit der Kennung (!I)wi_shandle(!i)
in den Hintergrund zu legen, und zwar per wind_set((!I)wi_shandle(!i),
WF_BOTTOM, 0, 0, 0, 0).  (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_BOTTOMALL, wind_set
!item [WF_BOTTOMALL (22368)]
Stellt alle Fenster der Applikation (!I)wi_sw1(!i) nach hinten.
!begin_xlist !compressed
!item [wi_sw1 =] Kennung der Applikation
!end_xlist
bergibt man in (!I)wi_shandle(!i) ein Fensterkennung ungleich DESKWINDOW,
dann wird (!I)wi_shandle(!i) zustzlich ganz nach hinten gestellt (ansonsten
wird die Reihenfolge der Fenster untereinander nicht gendert).
(!I)wi_shandle(!i) mu offen sein und der Applikation (!I)wi_sw1(!i) gehren.

Es ist nicht garantiert, da eine Applikation WF_BOTTOMALL auf
die Fenster einer anderen Applikation anwenden kann (vorallem in einer
Multitasking-Umgebung). In diesem Fall wird 0 zurckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_COLOR, wind_set
!item [WF_COLOR (18)]
verndert die Farbe eines Fensterelements. Dazu wird in (!I)wi_sw1(!i) die
Nummer des Elements angegeben:
 (!nl)
!begin_xlist !compressed [W_BOTTOMER (20)]
!item [Element]
Beschreibung
!item [~]
~
!label W_BOTTOMER
!item [W_BOTTOMER (20)] Backdrop-Button
!label W_BOX
!item [W_BOX (0)] Wurzelobjekt des Fensters
!label W_CLOSER
!item [W_CLOSER (2)] Schliebox
!label W_DATA
!item [W_DATA (6)] Elternobjekt der restlichen Elemente
!label W_DNARROW
!item [W_DNARROW (11)] Pfeil nach unten
!label W_FULLER
!item [W_FULLER (4)] Zoombox
!label W_HBAR
!item [W_HBAR (14)] Elternobjekt der vertikalen Sliderelemente
!label W_HELEV
!item [W_HELEV (18)] Horizontaler Slider
!label W_HSLIDE
!item [W_HSLIDE (17)] Hintergrund des horiz. Sliders
!label W_INFO
!item [W_INFO (5)] Infozeile
!label W_LFARROW
!item [W_LFARROW (15)] Pfeil nach links
!label W_NAME
!item [W_NAME (3)] Move-Balken
!label W_RTARROW
!item [W_RTARROW (16)] Pfeil nach rechts
!label W_SIZER
!item [W_SIZER (8)] Size-Box
!label W_SMALLER
!item [W_SMALLER (19)] Iconifier-Button
!label W_TITLE
!item [W_TITLE (1)] Elternobjekt der Schlie- und Zoombox, sowie des Names
!label W_UPARROW
!item [W_UPARROW (10)] Pfeil nach oben
!label W_VBAR
!item [W_VBAR (9)] Elternobjekt der vertikalen Sliderelemente
!label W_VELEV
!item [W_VELEV (13)] Vertikaler Slider
!label W_VSLIDE
!item [W_VSLIDE (12)] Hintergrund des vert. Sliders

!label W_WORK
!item [W_WORK (7)] Arbeitsflche

!end_xlist

Im Parameter (!I)wi_sw2(!i) wird die Farbe fr den Objekttyp des
Fensterelements bergeben, falls das Fenster getoppt ist, in (!I)wi_sw3(!i)
falls es nicht aktiv ist. Ein Wert von -1 behlt die aktuelle
Farbeinstellung bei. (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_CURRXYWH, wind_set
!item [WF_CURRXYWH (5)]
setzt die Fenstergre aus (!I)wi_sw1(!i), (!I)wi_sw2(!i), (!I)wi_sw3(!i)
und (!I)wi_sw4(!i) fest.

XaAES is compatible with all other AES's, except from the following points:
!begin_enumerate
!item If x, y, w and h all have a value of -1.
!item x and y values of -1 are 'legal', i.e, one cannot use -1 to use
      any old x value. Ofcourse, x and y coordinates are checked to be
      inside the rootwindow (not X when noleft = false).
!item When h have a value of 0, the window is infact shaded. This is a thing
      N.AES does with MiNTSetter, altho I'm not sure this is correct.
      The application is sent a WM_SHADED. On the next
      wind_set(handle, WF_CURRXYWH,...) where the h coordinate is not equal
      to the window's shaded height, the window is unshaded. While the
      window is shaded via this method, shift-clicks on the window title to
      shade a window is ignored.
!end_enumerate
XaAES since 2004-09-22, there is an extend (!link [version][WF_CURRXYWH, wind_xset]).

!label WF_DCOLOR, wind_set
!item [WF_DCOLOR (19)]
setzt die Standard-Farben fr die Fensterelemente. Der Parameter
(!I)wi_shandle(!i) wird ignoriert, und fr die brigen Parameter gilt:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw1 =] Fensterelement
!item [wi_sw2 =] Farbe fr aktive Fenster
!item [wi_sw3 =] Farbe fr inaktive Fenster
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden. Beim Verndern
der Komponente W_FULLER werden automatisch W_SMALLER und W_BOTTOMER mit
verndert; dies macht es notwendig, zuerst den Fuller, und dann die brigen
Komponenten zu setzen.

Ab MagiC 4 ist es mglich, fr jedes einzelne Fensterelement 3D-Flags
festzulegen. Dabei gilt:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw1 =] Fensterelement
!item [wi_sw2 =] Farbe im aktiven Zustand
!item [wi_sw3 =] Farbe im inaktiven Zustand
!item [wi_sw4 =] 3D-Flags
!end_xlist
Der Parameter (!I)wi_shandle(!i) mu dabei den Wert 0 annehmen; die 3D-Flags
werden als Bitvektor beschrieben; es gilt:
!begin_xlist !compressed [Bit-8+n =]
!item [Bit-0 =] Effekt "3D im Vordergrund"
!item [Bit-1 =] Effekt "3D im Hintergrund"
!item [Bit-2 =] Effekt "selektierbar im Vordergrund"
!item [Bit-3 =] dto. im Hintergrund
!item [Bit-8+n =] Maskenbit fr Bit n
!end_xlist
Es werden also nur Bits verndert, wenn das zugehrige Maskenbit gesetzt
ist. Dieses Feature kann z.Zt. noch (!I)nicht(!i) ber (!nolink [appl_getinfo])
ermittelt werden.

!label WF_DDELAY, wind_set
!item [WF_DDELAY (22362)]
Verzgerungswerte setzen
!begin_xlist !compressed [wi_sw1 ]
!item [wi_sw1 =] Startverzgerung beim Klick auf Scrollpfeil
!item [wi_sw2 =] Kontinuierliche Verzgerung beim Klick auf Scrollpfeil
!item [wi_sw3 =] Kontinuierliche Verzgerung beim Klick auf Closer
!item [wi_sw4 =] Kontinuierliche Verzgerung beim Klick auf Fuller
!end_xlist
Die Verzgerungswerte dienen zum Bremsen von Aktionen, falls diese
zu schnell ausgefhrt werden (z.B. wegen neuer Hardware).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.


!label WF_FULLSCREEN, wind_set
!item [WF_FULLSCREEN (235)]
Switch fullscreen - normal window mode. The fullscreen mode is without any
widget. (!nl)
Hit the key ESC escape from fullscreen mode. (!nl)
MyAES 0.96 feature


!label WF_FULLXYWH, wind_set
!item [WF_FULLXYWH (7)]
If either (!I)wi_sw1(!i), (!I)wi_sw2(!i), (!I)wi_sw3(!i)
or (!I)wi_sw4(!i) have a value of -1, that coordinate is not changed.
If ALL coordinates have a value of -1, the window is actually moved to the
current FULLXYWH coordinates, making the current window position the new
PREVXYWH position.
XaAES since 2004-09-22, there is an extend (!link [version][WF_FULLXYWH, wind_xset]).

!label WF_HSLIDE, wind_set
!item [WF_HSLIDE (8)]
setzt den horizontalen Slider auf die neue Position (!I)wi_sw1(!i) (0 ganz
links, bis 1000 ganz rechts).

!label WF_HSLSIZE, wind_set
!item [WF_HSLSIZE (15)]
setzt die Gre des horizontalen Sliders relativ zur Gesamtbreite auf den
Wert (!I)wi_sw1(!i) (-1 kleinste Gre, 1 klein bis 1000 Gesamtbreite).

!label WF_ICONIFY, wind_set
!item [WF_ICONIFY (26)]
das Fenster wird ikonifiziert. Die Parameter (!I)wi_sw1(!i) bis
(!I)wi_sw4(!i) geben Position und Gre des Fensters im ikonifizierten
Zustand an; diese Werte erhlt man vom AES beim Eintreffen einer WM_ICONIFY
Message.  (!nl)
(!B)Tip:(!b) Um ein bereits erzeugtes, aber (!I)noch nicht(!i)
geffnetes Fenster zu ikonifizieren, bergibt man als Koordinaten
(-1,-1,-1,-1). Das Fenster kann dann per wind_open(handle,-1,-1,-1,-1) auf
den Bildschirm gebracht werden. Ab MagiC 4 und XaAES v0.943 funktioniert dies auch,
wenn das Fenster bereits geffnet ist.  (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses
Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!label WF_RESVD, wind_set
!label WF_IGNORE, wind_set
!item [WF_IGNORE (13)]
Ist in alten AES-Version benutzt. Funktion unbekannt.

!label WF_INFO, wind_set
!item [WF_INFO (3)]
schreibt den String, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, in die
Infozeile. GEM benutzt dabei nur den Zeiger und legt (!I)keine(!i) Kopie an.

Unter GEM ist die Lnge auf 80 Zeichen beschrnkt. Bei N.AES sind es maximal 128
bei XaAES maximal 200.

!label WF_KIND, wind_set
!item [WF_KIND (1)]
legt (!I)wi_sw1(!i) als neue Fensterkomponenten fest, Format wie bei
wind_create.


!label WF_BACKDROP, wind_set
!label WF_M_BACKDROP, wind_set
!item [WF_M_BACKDROP (100)]
Damit kann ein Fenster (!I)wi_sw1(!i) auf einen Schalg nach untern gebracht
werden, ohne die Reihenfolge der anderen Fenster zu verndern. In KAOS 1.4.2
hie der Parameter noch WF_BACKDROP.

!label WF_MENU, wind_set
!item [WF_MENU (33)]
Es kann eine Menzeile in ein Fenster eingehngt werden. Wurde das Fenster nicht
mit der Komponente MENUBAR erzeugt, dann wird der Aufruf ignoriert. In
(!I)wi_sw1(!i) und (!I)wi_sw2(!i) wird die Adresse des Baums bergeben. (!nl)
Beim anklicken erhlt man eine erweiterte MN_SELECTED Nachricht. (!nl)
nur XaAES

!label WF_NAME, wind_set
!item [WF_NAME (2)]
schreibt den String, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, in die
Titelzeile. GEM benutzt dabei nur den Zeiger und legt (!I)keine(!i) Kopie
an.

Unter GEM ist die Lnge auf 80 Zeichen beschrnkt. Bei N.AES sind es maximal 128
bei XaAES maximal 200.

!label WF_NEWDESK, wind_set
!item [WF_NEWDESK (14)]
legt den Objektbaum, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, mit
dem Startobjekt (!I)wi_sw3(!i) als neues Desktop fest. Durch bergabe eines
Nullzeigers kann wieder der Standardhintergrund gesetzt werden.


!label WF_OPTIONS, wind_set
!item [WF_OPTIONS (234)]
Change window behavior
!begin_xlist !compressed
!item [wi_sw1 =] (!nl)
~1: request automatic close when application focus is lost and restore it
when is back (!nl)
!item [wi_sw2 =] remove/add option: (!nl)
1: add option (!nl)
0: remove option
!end_xlist
MyAES feature


!label WF_OPTS, wind_set
!item [WF_OPTS (41)]
(!I)wi_handle(!i) is a window handle or -1. If handle is a legal window handle,
              the options will only apply to that window. If 'handle' is
              -1, the settings will apply to all windows the application
              creates AFTER this call.

(!I)wi_sw1(!i) is 0 to clear the selected bits or 1 to set the selected bits.

(!I)wi_sw2(!i)  Currently available options are as follows;
           !begin_xlist !compressed [~~~~]
           !label WO0_WHEEL
           !item [WO0_WHEEL (0x0001)]
              Setting this bit will enable extended mouse wheel support, and
              go into WHL_AROWWHEEL mode causing XaAES to send extended
              WM_ARROWED messages to the application when the mouse wheel turns.
              Read section "XaAES and wheel mouse handling." for details.

           !label WO0_FULLREDRAW
           !item [WO0_FULLREDRAW (0x0002)]
              Setting this bit will make XaAES send WM_REDRAW messages to cover
              the whole work-area of the window when it is FULLED. Default
              behaviour is to only send WM_REDRAW messages for the areas that
              need it, blitting the already visible parts. This can also be
              configured via xaaes.cnf, see the app_options argument 'naesff'.

           !label WO0_NOBLITW
           !item [WO0_NOBLITW (0x0004)]
              Setting this bit will make XaAES send WM_REDRAW messages to cover
              the whole work-area of the window when its WIDTH changes. This is
              handy for apps like HighWire, Textprocessors ,etc, that need to
              reformat when window width changes. Default behaviour is to send
              WM_REDRAW messages for the areas that need it.

           !label WO0_NOBLITH
           !item [WO0_NOBLITH (0x0008)]
              Setting this bit will make XaAES send WM_REDRAW messages to cover
              the whole work-area of the window when its HEIGHT changes.
              Default behaviour is to send WM_REDRAW messages for the areas
              that need it.

           !label WO0_SENDREPOS
           !item [WO0_SENDREPOS (0x0010)]
              Setting this bit will make XaAES send a WM_REPOSED (38) message
              when a windows X/WIDTH and/or Y/HEIGHT coordinate pair changes.
              Such changes happes when the user resizes the window using
              upper/left borders. Default behaviour is to first send a WM_MOVED
              followed by a WM_SIZED message under these conditions, because
              older apps dont evaluate the WIDTH/HEIGHT in WM_MOVED messages.
              So, dudes, set this bit and use WM_REPOSED!

 !label WO0_WCOWORK
   !item [WO0_WCOWORK (0x0020)]
      Setting this bit will enable Window Coordinate Orientation WORK mode.

           !end_xlist

(!I)wi_sw3(!i) and (!I)wi_sw4(!i) are currently undefined and must be cleared.

Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!label WF_PREVXYWH, wind_set
!item [WF_PREVXYWH (6)]
If either(!I)wi_sw1(!i), (!I)wi_sw2(!i), (!I)wi_sw3(!i)
or (!I)wi_sw4(!i)  have a value of -1, that coordinate is not changed.
If ALL coordinates have a value of -1, the window is actually moved to the
current PREVXYWH coordinates, making the current window position the new
PREVXYWH position. (!nl)
XaAES since 2004-09-22, there is an extend (!link [version][WF_PREVXYWH, wind_xset]).

!label WF_SHADE, wind_set
!item [WF_SHADE (22365)]
Setzt den Shade-Zustand des Fensters
!begin_xlist !compressed
!item [wi_sw1 =] Zu aktivierender Shade-Zustand
~1: eingeklappt (!nl)
~0: ausgeklappt (!nl)
-1: Zustand umschalten
!end_xlist
Beim Einklappen wird eine WM_SHADED-Nachricht versandt.
Beim Ausklappen WM_UNSHADED und ein WM_REDRAW ber den kompletten
Ausgabebereichs des Fensters. Setzt man den Zustand vor dem ffnen
des Fensters, dann wird er beim ffnen beachtet. Das Schlieen
eines Fenster setzt es automatisch auf ausgeklappt.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_STACK, wind_set
!item [WF_STACK (22366)]
Stellt das Fenster (!I)wi_shandle(!i) im Fensterstapel unter das Fenster
(!I)wi_sw1(!i) ohne die Bildschirmposition selbst zu ndern.
!begin_xlist !compressed
!item [wi_sw1 =] offenes Fenster/DESKWINDOW (0)/NOWINDOW (-1)
!end_xlist

Ist (!I)wi_shandle(!i) geschlossen, wird der Positionierungswunsch gespeichert
und beim ffnen des Fensters mit wind_open bercksichtigt.
(!I)wi_sw1(!i) wird erst bei der eigentlichen Positionierung aus!-gewertet. Ist
((!I)wi_sw1(!i) == DESKWINDOW), wird das Fenster nach
ganz hinten gestellt (entspricht WF_BOTTOM). Ist ((!I)wi_sw1(!i) ==
NOWINDOW) oder (!I)wi_sw1(!i) nicht offen, dann wird das Fenster
(!I)wi_shandle(!i) ganz nach vorne gestellt (entspricht WF_TOP).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_TOOLBAR, wind_set
!item [WF_TOOLBAR (30)]
befestigt eine Toolbar an einem Fenster, ndert oder entfernt diese. Es
gilt:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw1 =] High-Word
!item [wi_sw2 =] Low-Word der Adresse der Toolbar.
!end_xlist
Um eine Toolbar zu entfernen, mssen die Parameter (!I)wi_sw1(!i) und
(!I)wi_sw2(!i) auf NULL gesetzt werden.

XaAES ab v0.942 kennt Toolbars. Hiefr gibt es zustzliche Parameter:
!begin_xlist !compressed [wi_sw1 =]
!item [wi_sw3 =] Startobjekt ab dem gezeichnet wird.
!item [wi_sw4 =] Nummer des Editobjekt, in das der Cursor gesetzt wird.
!end_xlist

Beim bettigen eines Toolbarobjekt erhlt man die Nachricht WM_TOOLBAR.

!label WF_TOP, wind_set
!item [WF_TOP (10)]
das Fenster mit dem Handle (!I)wi_shandle(!i) wird zum neuen oberen Fenster.
Ab MagiC 4 und XaAES v0.943 kann durch wind_set (-1, WF_TOP, id, ...) das Men
und der Desktophintergrund auf die Applikation mit der Kennung id umgeschaltet
werden; ein Wert von -1 fr id steht dabei fr die aktuelle Applikation.

!label WF_TOPALL, wind_set
!item [WF_TOPALL (22367)]
Holt alle Fenster der Applikation (!I)wi_sw1(!i) nach vorne.
!begin_xlist !compressed
!item [wi_sw1 =] Kennung der Applikation
!end_xlist

bergibt man in (!I)wi_shandle(!i) ein Fensterkennung ungleich DESKWINDOW (0),
dann wird (!I)wi_shandle(!i) zustzlich ganz nach vorne gestellt (ansonsten
wird die Reihenfolge der Fenster untereinander nicht gendert).
(!I)wi_shandle(!i) mu offen sein und der Applikation (!I)wi_sw1(!i) gehren.

Es ist nicht garantiert, da eine Applikation WF_TOPALL auf
die Fenster einer anderen Applikation anwenden kann (vorallem in einer
Multitasking-Umgebung). In diesem Fall wird 0 zurckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_UNICONIFY, wind_set
!item [WF_UNICONIFY (27)]
das Fenster wird unikonifiziert. (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses
Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!label WF_UNICONIFYXYWH, wind_set
!item [WF_UNICONIFYXYWH (28)]
das Fenster wird unikonifiziert. Die Parameter (!I)wi_sw1(!i) bis
(!I)wi_sw4(!i) geben Position und Gre des Fensters im unikonifizierten
Zustand an. Dieser Opcode ist dann besonders ntzlich, wenn ein Fenster
bereits im ikonifizierten Zustand geffnet worden ist.


!label WF_USER_POINTER, wind_set
!item [WF_USER_POINTER (230)]
Link a user value to the windows. (!nl)
(!I)wi_sw1(!i) and (!I)wi_sw2(!i) are the 2 value you can transmit it could be
used as 32 bits pointer but any value can be provided. (!nl)
MyAES feature


!label WF_VSLIDE, wind_set
!item [WF_VSLIDE (9)]
setzt den vertikalen Slider auf die neue Position (!I)wi_sw1(!i) (0 ganz
oben bis 1000 ganz unten).

!label WF_VSLSIZE, wind_set
!item [WF_VSLSIZE (16)]
setzt die Hhe des vertikalen Sliders relativ zur Gesamthhe auf den Wert
(!I)wi_sw1(!i) (-1 kleinste Hhe, 1 klein bis 1000 Gesamthhe).

!label WF_WCOLOR, wind_set
!item [WF_WCOLOR]
z.Zt. keine Informationen bekannt.

!label WF_WHEEL, wind_set
!item [WF_WHEEL (40)]
Setzt fr ein Fenster ((!I)wi_shandle(!i)= Fensterkennung) oder alle
Applikationen ((!I)wi_shandle(!i)= 0) die WA_WHEEL Nachricht.
Ist (!I)wi_sw1(!i) = 1 dann sendet XaAES eine spezielle WM_ARROWED (WA_WHEEL)
Nachricht. Bei (!I)wi_sw1(!i) = 1 kommt die normalen Nachricht. (!nl)
ab XaAES v0.960

!label WF_WIDGETS, wind_set
!item [WF_WIDGETS (200)]
Setzt die aktuellen Positionen der Sliderobjekte (W_UPARROW,
W_DNARROW, etc.) des Fensters mit dem Handle (!I)wi_shandle(!i). In
den Parametern (!I)wi_sw1(!i) und (!I)wi_sw2(!i) werden die vertikal Elemente
des typs rightwidgets, in den Parametern (!I)wi_sw3(!i) und (!I)wi_sw4(!i) die
horizontal Elemente des typs bottomwidgets bergeben. wi_sw1
ist das oberste Element, (!I)wi_sw2(!i) das unterste Element des
Vertikalsliders. (!I)wi_sw3(!i) ist das linkeste Element, (!I)wi_sw4(!i) das
rechteste Element des Horizontalsliders.


!label WF_WIND_ATTACH, wind_set
!item [WF_WIND_ATTACH (231)]
attach a window to another, using it if you close the mother window other windows
linked will be closed. (!I)wi_sw1(!i) the window to attach. (!nl)
MyAES feature


!label WF_WINXCFG, wind_set
!item [WF_WINXCFG (22361)]
Setzt die globalen und lokalen Schalter der aufrufenden
Applikation, falls dies mglich ist.
!begin_xlist !compressed
!item [wi_sw1 =]
Maske der bei diesem Aufruf zu verndernden globalen
Schalter (Bit gesetzt bedeutet, Schalter bernehmen).
!item [wi_sw2 =]
Neue Schalterstellung der globalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!item [wi_sw3 =]
Maske der bei diesem Aufruf zu verndernden lokalen
Schalter (Bit gesetzt bedeutet, Schalter bernehmen).
!item [wi_sw4 =]
Neue Schalterstellung der lokalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!end_xlist
Welche Schalter tatschlich verndert wurden, kann man nur durch
einen Aufruf von wind_get( WF_WINXCFG) ermitteln.
ACHTUNG: Diese Funktion sollte nur von Konfigurationsprogrammen
aufgerufen werden, die wissen was sie tun (z.B. WINX.CPX).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.


!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_sw1, wi_sw2, wi_sw3 und wi_sw4 sind dabei
von der ber den Parameter (!I)wi_sfield(!i) bergebenen Funktionsnummer
abhngig.

Bei der Angabe des Fensternamens sollte man aus sthetischen Grnden vor und
hinter der Zeichenkette immer ein (!I)Leerzeichen(!i) lassen, da sonst das
Muster im Fensternamen direkt am ersten und am letzten Buchstaben hngt.

(!B)Achtung:(!b) Die hier angegebenen Opcodes sind (!I)nicht(!i) mehr
vollstndig zum PC-GEM kompatibel, da die Entwicklung dort in eine
(!link [andere Richtung] [wind_set und PC-GEM]) ging.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurckgegeben wird.

!item [Verfgbar:]
In allen (!nolink [AES]) Versionen.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fr wind_set]) ~  wind_get ~  wind_create ~  OBJECT ~
(!link [Unterfunktionsbersicht] [bersicht der wind_get/set Unterfunktionen])

(!ende_liste)



!begin_node wind_set und PC-GEM
#!html_name wind_set_and_PC_GEM

(!B)Ab PC-(!nolink [GEM]) Version 2.0 gilt:(!b)

!label WF_ATTRB, wind_set
(!B)WF_ATTRB (18):(!b) setzt den Fenster-Attributvektor. Es gilt: wi_sw1 = 0
(bzw. 1): Fenster ist oberstes Fenster bzw. nicht; ansonsten (!I)keine(!i)
weiteren Informationen bekannt.

!label WF_SIZETOP, wind_set
(!B)WF_SIZETOP (19):(!b) Fenster zum aktiven Fenster machen, ohne die
Reihenfolge der anderen Fenster zu verndern. Gleichzeitig knnen die
Position und Gre des Fensters neu festgelegt werden:
!begin_xlist !compressed
!item [wi_sw1 =]
X-Position, (!U)und(!u)
!item [wi_sw2 =]
Y-Position
!item [wi_sw3 =]
Breite, (!U)und(!u)
!item [wi_sw4 =]
Hhe des Fensters
!end_xlist

!end_node



!begin_node Bindings fr wind_set
#!html_name Bindings_for_wind_set
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 )
{
   int_in[0]  = wi_shandle;
   int_in[1]  = wi_sfield;
   int_in[2]  = wi_sw1;
   int_in[3]  = wi_sw2;
   int_in[4]  = wi_sw3;
   int_in[5]  = wi_sw4;

   return ( crys_if(105) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 105   # Opcode der Funktion
control+2 !! control[1] !! 6     # Eintrge in int_in
control+4 !! control[2] !! 1     # Eintrge in int_out
control+6 !! control[3] !! 0     # Eintrge in addr_in
control+8 !! control[4] !! 0     # Eintrge in addr_out
int_in    !! int_in[0]  !! wi_shandle
int_in+2  !! int_in[1]  !! wi_sfield
int_in+4  !! int_in[2]  !! wi_sw1
int_in+6  !! int_in[3]  !! wi_sw2
int_in+8  !! int_in[4]  !! wi_sw3
int_in+10 !! int_in[5]  !! wi_sw4
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!endif


!include gem/aes/wind_/wind_set/WF_TOPMOST.ui

!end_node
