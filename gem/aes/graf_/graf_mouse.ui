!iflang [english]

!begin_node graf_mouse

(!begin_liste) [Availability]

!item [Name:]
ØGraphics mouseÆ - Change the appearance of the mouse pointer.

!item [Opcode:]
78

!item [Syntax:]
int16_t graf_mouse ( int16_t gr_monumber, MFORM *gr_mofaddr );

!item [Description:]
The call graf_mouse permits changing the appearance of the mouse pointer. The
following apply for the parameter (!I)gr_monumber(!i):

!label ARROW
!label TEXT_CRSR
!label HOURGLASS
!label BUSY_BEE
!label BUSYBEE
!label POINT_HAND
!label FLAT_HAND
!label THIN_CROSS
!label THICK_CROSS
!label OUTLN_CROSS
!label X_LFTRT
!label X_UPDOWN
!label USER_DEF
!label M_OFF
!label M_ON
!label M_SAVE
!label M_LAST
!label M_PREVIOUS
!label M_RESTORE
!label XACRS_BUBBLE_DISC
!label XACRS_RESIZER
!label XACRS_NE_SIZER
!label XACRS_MOVER
!label XACRS_VERTSIZER
!label XACRS_HORSIZER
!label XACRS_POINTSLIDE
!label X_MGET
!label X_MRESET
!label X_SET_SHAPE
!begin_table [l|r|l]
 ~ !! gr_monumber !! Meaning
!hline
ARROW				!!   0 !! Arrow
TEXT_CRSR 	!!   1 !! Text cursor
HOURGLASS 	!!   2 !! Hourglass, bee
BUSY_BEE 		!!   2 !! See HOURGLASS
BUSYBEE 		!!   2 !! See HOURGLASS
POINT_HAND 	!!   3 !! Pointing hand
FLAT_HAND 	!!   4 !! Flat hand
THIN_CROSS 	!!   5 !! Thin crosshairs
THICK_CROSS !!   6 !! Thick crosshairs
OUTLN_CROSS !!   7 !! Outlined crosshairs
~					 	!!   8 !! Sizer ((!nolink [N.AES]))
X_LFTRT     !!   8 !! Left-right arrow (Geneva)
~					 	!!   9 !! Horizontal arrows ((!nolink [N.AES]))
X_UPDOWN    !!   9 !! Up-down arrow (Geneva)
~					 	!!  10 !! Vertical arrows ((!nolink [N.AES]))
USER_DEF 		!! 255 !! User-defined mouse form
M_OFF 			!! 256 !! Switch off mouse pointer
M_ON 				!! 257 !! Switch on mouse pointer
M_SAVE 			!! 258 !! Save current mouse form
M_RESTORE 	!! 259 !! Restore last shape
M_LAST 			!! 260 !! Restore most recently saved form
M_PREVIOUS	!! 260 !! See M_LAST
XACRS_BUBBLE_DISC		!! 270 !! The Data Uncertain logo ((!nolink [XaAES]))
XACRS_RESIZER				!! 271 !! The 'resize window' cursors ((!nolink [XaAES]))
XACRS_NE_SIZER			!! 272 !! ((!nolink [XaAES]))
XACRS_MOVER					!! 273 !! The 'move window' cursor ((!nolink [XaAES]))
XACRS_VERTSIZER			!! 274 !! The 'resize vertically' cursor ((!nolink [XaAES]))
XACRS_HORSIZER			!! 275 !! The 'resize horizontally' cursor ((!nolink [XaAES]))
XACRS_POINTSLIDE		!! 276 !! The 'two-arrows pointing inwards'
~										!!	 ~ !! cursor to pinpoint slider position((!nolink [XaAES]))
X_MRESET            !! 1000 !! (Geneva)
X_MGET              !! 1001 !! (Geneva)
X_SET_SHAPE         !! 1100 !! (Geneva)
!end_table

If (!I)gr_monumber(!i) = USER_DEF, then (!I)gr_mofaddr(!i) is a pointer to the
MFORM structure that sets the appearance of the mouse pointer.

(!B)Note:(!b) One should ensure that outside of the working area of one's own
window, the mouse pointer takes the form of an arrow or hourglass.

In the event that the application must change the mouse form, set the highest
bit (bit 15) of (!I)gr_monumber(!i) to 1 and OR it with the desired mouse form
index. After finishing the work, call graf_mouse with the value 0 to set the
mouse back to an arrow.

!label M_FORCE
M_FORCE	~	0x8000

Whether modes 258-260 are available, or whether the mouse form is managed
locally for each application can be inquired with
(!link [appl_getinfo][%apgi_8]) (opcode 8).

!begin_description
!item [X_MRESET (1000)]

     graf_mouse( X_MRESET, 0L );

     Resets the mouse so that it is 'on' just once, and
     also updates graf_mouse's idea of the (!I)hide(!i) count.

!item [X_MGET (1001)]

     hidecount = graf_mouse( X_MGET, MFORM *mouse );

     In this mode, if (!I)mouse(!i) is non-zero, then the MFORM it points to
     is filled-in with the shape of the last mouse set with graf_mouse.
     'hidecount' gets the number of times the mouse was hidden using
     graf_mouse(M_OFF...). If this number is greater than zero, the mouse is
     hidden that number of times. If it is zero, the mouse is shown once.
     If it is less than zero, the mouse is 'shown' more than once.


!item [X_SET_SHAPE (1100)]

     graf_mouse( X_SET_SHAPE+index, ANI_MOUSE *mouse_form );

     Change the shape of the mouse form whose number is (!I)index.(!i) The
     ANI_MOUSE structure contains up to 32 mouse shapes to be animated in a
     continuous loop while that particular mouse shape is being
     displayed. (!nl)
     If the (!I)frames(!i) portion of the ANI_MOUSE structure is one, then no
     animation is performed. Otherwise, it should be the number of frames
     contained in the mouse animation sequence. The (!I)delay(!i) value is the
     number of 50 Hz timer ticks to pause between each frame in the animation.
     The (!I)form(!i) portion of the structure only needs to be initialized for
     the number of frames, so if there are only two frames, this means that only
     form[0] and form[1] are used. If a NULL pointer is passed instead of a
     pointer to an ANI_MOUSE structure, then the mouse shape is restored to its
     default. (!nl)
     It does not matter if the application which sets a new shape terminates
     without resetting the mouse shape, as this call allocates memory
     internally to hold the new shape data.

!end_description

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Graphics library

!item [See also:]
(!link [Binding] [Bindings for graf_mouse])  ~ Mouse clicks and shapes

(!ende_liste)



!begin_node Bindings for graf_mouse
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t graf_mouse ( int16_t gr_monumber, MFORM *gr_mofaddr );

!item [Binding:]
!begin_verbatim
int16_t graf_mouse (int16_t gr_monumber, MFORM *gr_mofaddr)
{
   int_in[0]  = gr_monumber;
   addr_in[0] = gr_mofaddr;

   return ( crys_if(78) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 78    # Function opcode
control+2 !! control[1] !! 1     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! gr_monumber
addr_in   !! addr_in[0] !! gr_mofaddr
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node graf_mouse

(!begin_liste) [Beschreibung]

!item [Name:]
ØGraphics MouseÆ - verÑndert die Darstellung des Mauszeigers.

!item [AES-Nummer:]
78

!item [Deklaration:]
int16_t graf_mouse ( int16_t gr_monumber, MFORM *gr_mofaddr );

!item [Beschreibung:]
Die Funktion erlaubt es, das Aussehen des Mauszeigers zu verÑndern. FÅr den
Parameter (!I)gr_monumber(!i) gilt:

!label ARROW
!label TEXT_CRSR
!label HOURGLASS
!label BUSY_BEE
!label BUSYBEE
!label POINT_HAND
!label FLAT_HAND
!label THIN_CROSS
!label THICK_CROSS
!label OUTLN_CROSS
!label X_LFTRT
!label X_UPDOWN
!label USER_DEF
!label M_OFF
!label M_ON
!label M_SAVE
!label M_LAST
!label M_PREVIOUS
!label M_RESTORE
!label XACRS_BUBBLE_DISC
!label XACRS_RESIZER
!label XACRS_NE_SIZER
!label XACRS_MOVER
!label XACRS_VERTSIZER
!label XACRS_HORSIZER
!label XACRS_POINTSLIDE
!label X_MGET
!label X_MRESET
!label X_SET_SHAPE
!begin_table [l|r|l]
 ~ !! gr_monumber !! Bedeutung
!hline
ARROW				!!   0 !! Pfeil
TEXT_CRSR 	!!   1 !! Textcursor
HOURGLASS 	!!   2 !! Sanduhr, Biene
BUSY_BEE 		!!   2 !! siehe HOURGLASS
BUSYBEE 		!!   2 !! siehe HOURGLASS
POINT_HAND 	!!   3 !! zeigende Hand
FLAT_HAND 	!!   4 !! flache Hand
THIN_CROSS 	!!   5 !! feines Fadenkreuz
THICK_CROSS !!   6 !! breites Fadenkreuz
OUTLN_CROSS !!   7 !! umrissenes Fadenkreuz
~					 	!!   8 !! Sizer (N.AES)
X_LFTRT     !!   8 !! left-right arrow (Geneva)
~					 	!!   9 !! horizontal arrows (N.AES)
X_UPDOWN    !!   9 !! up-down arrow (Geneva)
~					 	!!  10 !! vertical arrows (N.AES)
USER_DEF 		!! 255 !! eigene Mausform
M_OFF 			!! 256 !! Mauszeiger ausschalten
M_ON 				!! 257 !! Mauszeiger einschalten
M_SAVE 			!! 258 !! aktuelle Mausform sichern
M_RESTORE 	!! 259 !! vorherige Mausform herstellen
M_LAST 			!! 260 !! letzte Mausform herstellen
M_PREVIOUS	!! 260 !! siehe M_LAST
XACRS_BUBBLE_DISC		!! 270 !! The Data Uncertain logo (XaAES)
XACRS_RESIZER				!! 271 !! The 'resize window' cursors (XaAES)
XACRS_NE_SIZER			!! 272 !! (XaAES)
XACRS_MOVER					!! 273 !! The 'move window' cursor (XaAES)
XACRS_VERTSIZER			!! 274 !! The 'resize vertically' cursor (XaAES)
XACRS_HORSIZER			!! 275 !! The 'resize horizontally' cursor (XaAES)
XACRS_POINTSLIDE		!! 276 !! The 'two-arrows pointing inwards'
~										!!	 ~ !! cursor to pinpoint slider position(XaAES)
X_MRESET            !! 1000 !! (Geneva)
X_MGET              !! 1001 !! (Geneva)
X_SET_SHAPE         !! 1100 !! (Geneva)
!end_table

Im Fall (!I)gr_monumber(!i) = USER_DEF, ist (!I)gr_mofaddr(!i) ein Zeiger
auf die Struktur MFORM, die das Aussehen des Mauszeigers festlegt.

(!B)Hinweis:(!b) Man sollte darauf achten, daû auûerhalb des Arbeitsbereichs
des eigenen Fensters, der Mauszeiger nur die Form eines Pfeils oder einer
Sanduhr besitzt.

In the event that the application must change the mouse form, set the highest
bit ( Bit 15 ) of gr_monumber to 1 and OR in with the desired mouse form number.
After finishing the work, call the graf_mouse with value 0 to set the mouse
back to arrow.

!label M_FORCE
M_FORCE	~	0x8000

Ob die Modi 258-260 zur VerfÅgung stehen, bzw. ob die Mausform fÅr jede
Applikation lokal verwaltet wird, kann per (!link [appl_getinfo][%apgi_8]) (Opcode 8)
abgefragt
werden.

!begin_description
!item [X_MRESET (1000)]

     graf_mouse( X_MRESET, 0L );

     Resets the mouse so that it is "on" just once, and also updates
     graf_mouse's idea of the hide count.

!item [X_MGET (1001)]

     hidecount = graf_mouse( X_MGET, MFORM *mouse );

     In this mode, if "mouse" is non-zero, then the MFORM it points to is
     filled-in with the shape of the last mouse set with graf_mouse().
     "hidecount" gets the number of times the mouse was hidden using
     graf_mouse(M_OFF...). If this number is greater than zero, the mouse
     is hidden that number of times. If it is zero, the mouse is shown
     once. If it is less than zero, the mouse is "shown" more than once.


!item [X_SET_SHAPE (1100)]

     graf_mouse( X_SET_SHAPE+index, ANI_MOUSE *mouse_form );

     Change the shape of the mouse form whose number is "index". The
     ANI_MOUSE structure contains up to 32 mouse shapes to be animated in
     a continuous loop while that particular mouse shape is being
     displayed. (!nl)
     If the "frames" portion of the ANI_MOUSE structure is one,
     then no animation is performed. Otherwise, it should be the number of
     frames contained in the mouse animation sequence. The "delay" value
     is the number of 50 Hz timer tics to pause between each frame in the
     animation. The "form" portion of the structure only needs to be
     initialized for the number of frames, so if there are only two
     frames, this means that only form[0] and form[1] are used. If a NULL
     pointer is passed, instead of a pointer to an ANI_MOUSE structure,
     then the mouse shape is restored to its default. (!nl)
     It does not matter if the application which sets a new shape terminates
     without resetting the mouse shape, as this call allocates memory
     internally to hold the new shape data.
!end_description

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
In allen (!nolink [AES]) Versionen.

!item [Gruppe:]
Grafikfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr graf_mouse])  ~ Mausklicks und Formen

(!ende_liste)



!begin_node Bindings fÅr graf_mouse
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t graf_mouse ( int16_t gr_monumber, MFORM *gr_mofaddr );

!item [Umsetzung:]
!begin_verbatim
int16_t graf_mouse (int16_t gr_monumber, MFORM *gr_mofaddr)
{
   int_in[0]  = gr_monumber;
   addr_in[0] = gr_mofaddr;

   return ( crys_if(78) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 78    # Opcode der Funktion
control+2 !! control[1] !! 1     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! gr_monumber
addr_in   !! addr_in[0] !! gr_mofaddr
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
