!iflang [english]

!begin_node graf_watchbox

(!begin_liste) [Availability]

!item [Name:]
ØGraphics watch boxÆ - Select an object and supervise mouse movements
referring to this object.

!item [Opcode:]
75

!item [Syntax:]
int16_t graf_watchbox ( OBJECT *gr_wptree, int16_t gr_wobject,
                     int16_t gr_winstate, int16_t gr_woutstate );

!item [Description:]
The call graf_watchbox sets the status of an object, depending on the position
of the mouse pointer (whether it is within or outside the bounds of the object)
while the left mouse button is held down. The following apply:

!begin_xlist !compressed [gr_wpobject]
!item [Parameter]
Meaning
!item [~]
~
!item [gr_wptree]
Address of root object of object tree
!item [gr_wpobject]
Index of the object to watch
!item [gr_winstate]
Object status when the mouse pointer is within the boundary:
!begin_table [l l]
NORMAL   !! (0x0000)
SELECTED !! (0x0001)
CROSSED  !! (0x0002)
CHECKED  !! (0x0004)
DISABLED !! (0x0008)
OUTLINED !! (0x0010)
SHADOWED !! (0x0020)
!end_table
!item [gr_woutstate]
Object status when the mouse pointer is outside the boundary:
!end_xlist

(!B)Note:(!b) The function returns when the mouse button is released, so it
should only be made while the button is depressed.

!item [(!nolink [Return]) value:]
The function returns the position of the mouse pointer at the release of the
button (0 = outside the object boundary, 1 = inside the boundary).

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Graphics library

!item [See also:]
(!link [Binding] [Bindings for graf_watchbox]) ~ graf_wwatchbox ~ OBJECT

(!ende_liste)



!begin_node Bindings for graf_watchbox
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t graf_watchbox ( OBJECT *gr_wptree, int16_t gr_wobject,
                     int16_t gr_winstate, int16_t gr_woutstate );

!item [Binding:]
!begin_verbatim
int16_t graf_watchbox (OBJECT *gr_wptree, int16_t gr_wobject,
                       int16_t gr_winstate,
                       int16_t gr_woutstate)
{
   int_in[0]  = 0;
   int_in[1]  = gr_wobject;
   int_in[2]  = gr_winstate;
   int_in[3]  = gr_woutstate;

   addr_in[0] = gr_wptree;

   return ( crys_if(75) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 75    # Function opcode
control+2 !! control[1] !! 4     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! 0
int_in+2  !! int_in[1]  !! gr_wobject
int_in+4  !! int_in[2]  !! gr_winstate
int_in+6  !! int_in[3]  !! gr_woutstate
addr_in   !! addr_in[0] !! gr_wptree
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node graf_watchbox

(!begin_liste) [Beschreibung]

!item [Name:]
ØGraphics watch BoxÆ - selektiert ein Objekt und Åberwacht die
Mausbewegungen bezÅglich dieses Objekts.

!item [AES-Nummer:]
75

!item [Deklaration:]
int16_t graf_watchbox ( OBJECT *gr_wptree, int16_t gr_wobject,
                     int16_t gr_winstate, int16_t gr_woutstate );

!item [Beschreibung:]
Die Funktion setzt den Objektstatus eines Objektes in AbhÑngigkeit von der
Position des Mauszeigers. Es gilt:

!begin_xlist !compressed [gr_wpobject]
!item [Parameter]
Bedeutung
!item [~]
~
!item [gr_wptree]
Adresse des Objektbaumes
!item [gr_wpobject]
Nummer des Objektes
!item [gr_winstate]
Objektstatus, wenn sich der Mauszeiger innerhalb der Begrenzung befindet:
!begin_table [l l]
NORMAL   !! (0x0000)
SELECTED !! (0x0001)
CROSSED  !! (0x0002)
CHECKED  !! (0x0004)
DISABLED !! (0x0008)
OUTLINED !! (0x0010)
SHADOWED !! (0x0020)
!end_table
!item [gr_woutstate]
Objektstatus, wenn sich der Mauszeiger auûerhalb der Begrenzung befindet.
!end_xlist

(!B)Hinweis:(!b) Die Funktion bricht ab, wenn der Mausknopf losgelassen
wird.

!item [Ergebnis:]
Die Funktion liefert die Position des Mauszeigers beim Loslassen des Buttons
(0 = auûerhalb des Objektes, 1 = innerhalb des Objektes).

!item [VerfÅgbar:]
All (!nolink [AES]) versions.

!item [Gruppe:]
Grafikfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr graf_watchbox]) ~ graf_wwatchbox ~ OBJECT

(!ende_liste)



!begin_node Bindings fÅr graf_watchbox
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t graf_watchbox ( OBJECT *gr_wptree, int16_t gr_wobject,
                     int16_t gr_winstate, int16_t gr_woutstate );

!item [Umsetzung:]
!begin_verbatim
int16_t graf_watchbox (OBJECT *gr_wptree, int16_t gr_wobject,
                       int16_t gr_winstate,
                       int16_t gr_woutstate)
{
   int_in[0]  = 0;
   int_in[1]  = gr_wobject;
   int_in[2]  = gr_winstate;
   int_in[3]  = gr_woutstate;

   addr_in[0] = gr_wptree;

   return ( crys_if(75) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 75    # Opcode der Funktion
control+2 !! control[1] !! 4     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! 0
int_in+2  !! int_in[1]  !! gr_wobject
int_in+4  !! int_in[2]  !! gr_winstate
int_in+6  !! int_in[3]  !! gr_woutstate
addr_in   !! addr_in[0] !! gr_wptree
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
