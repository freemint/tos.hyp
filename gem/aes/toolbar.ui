!iflang [english]

!begin_node Toolbar support
!label Toolbars, Redraw and update of
From (!nolink [AES]) version 4.1 onwards the operating system supports so-called
toolbars. A toolbar is an OBJECT tree that is positioned below the
information-line of a window (and above the working area) which makes
it possible to display buttons, icons etc. in a window.

As already known from the window routines, the management of toolbars
is shared betwen the (!nolink [AES]) and the application. (!B)Here the (!nolink [AES])
is respon!-sible for the following actions:(!b)

!begin_itemize !compressed
!item Adaptation of the X- and Y-coordinates of the toolbar when the
     window is moved or its size is changed.
!item Ensuring that the window is configured to the size required by
     the window components and the toolbar.
!item Adjustment of the toolbar's width to the width of the window.
!item Redraw of the toolbar on receipt of a WM_REDRAW message.
!item Sending of (!nolink [AES]) messages when the user activates an object of
     the toolbar.
!end_itemize

(!B)The application, on the other hand, must look after the following:(!b)

!begin_itemize !compressed
!item Construction of an OBJECT tree for the toolbar (in particulat one
     has to ensure that all selectable elements of the toolbox have
     the status TOUCHEXIT).
!item Adjustment of the width of a toolbar object if this depends on
     the width of the window (may be required when changing the size
     of the window).
!item Handling of USERDEF objects.
!item Redrawing all objects whose appearance is to be changed. In this
     case it is imperative that the rectangle-list of the toolbar is
     inquired for and/or taken into account.
!item Problems that arise in connection with the screen resolution have
     to be solved. Thus, for instance, the height of an icon in the
     ST Medium resolution can differ from the height of the icon in
     the TT030 Medium resolution.
!end_itemize

(!B)For supporting toolbars in your own programs, you should respect the
following points:(!b)

!begin_itemize !compressed
!item Communication with the (!nolink [AES]) window-manager
!item (!link [Problems with wind_calc][wind_calc, Problems with])
!item Redraw and updating of toolbars
!item Toolbar support under XaAES
!end_itemize

See also: (!nl)
WF_TOOLBAR ~  (!link [WF_FTOOLBAR][WF_FTOOLBAR, wind_get])  ~ 
(!link [WF_NTOOLBAR][WF_NTOOLBAR, wind_get]) ~ WM_TOOLBAR ~
wind_get ~ wind_set



!begin_node Redraw and updating of toolbars

For redraws of (parts of) the toolbar, one has to pay respect to the
rectangle-list as usual. As the previous wind_get opcodes
(!link [WF_FIRSTXYWH][WF_FIRSTXYWH, wind_get]) and
(!link [WF_NEXTXYWH][WF_NEXTXYWH, wind_get]) (!I)only respect the working area(!i)
of a window, however, two new parameters
((!link [WF_FTOOLBAR][WF_FTOOLBAR, wind_get]) and
(!link [WF_NTOOLBAR][WF_NTOOLBAR, wind_get])) were introduced, with
whose help the rectangle-list of a toolbar can be interrogated.

(!B)A redraw  of (parts of) the toolbar may be necessary in the following
situations:(!b)
!begin_itemize !compressed
!item The toolbar contains user-defined objects (USERDEF's).
!item The status of an object in the toolbar was altered. The area to
     be redrawn here consists of the size of the object plus the space
     required for special effects (3D, shadowing, outlining etc.).
!end_itemize

(!B)Redraw is not necessary in the following cases, for instance:(!b)

!begin_itemize !compressed
!item The relevant window is iconified. The application does not have
     to take on any management of the toolbar; this is only required
     at the restoration of the iconification, the so-called uniconify.
!item The toolbar present in the window is to be replaced by another
     one. In this case a call of wind_set with the opcode WF_TOOLBAR
     and the address of the new OBJECT tree will suffice.
!item The toolbar present in the window is to be removed. In this case
     a call of wind_set with the opcode WF_TOOLBAR and NULL parameters
     will suffice.
!end_itemize

See also:
(!link [Rectangle-list of a window][The rectangle-list of a window]) ~
Toolbar support
!end_node



!begin_node Toolbars and the window-manager

For handling toolbars an application can have recourse to the window-
manager of the (!nolink [AES]). In detail:

!label Toolbar, Tacking on a
(!B)For tacking on a toolbar to a window(!b), it is sufficient to call
wind_set(handle, WF_TOOLBAR, ...) with the address of the toolbar
object tree. If this call is executed while the window is open, then
it is itself responsible for the correct calculation of the height
of the toolbar.

!label Toolbar, Exchange of a
(!B)To exchange a toolbar for another one(!b), one can have recourse to a call
of wind_set(handle, WF_TOOLBAR, ...) with the address of the new
toolbar. If this call is executed while the window is open, then it
is itself responsible for the correct calculation of the height of
the (new) toolbar.

!label Toolbar, Removal of a
(!B)To remove a toolbar from a window(!b), it is necessary to call
wind_set(handle, WF_TOOLBAR, ...) with NULL parameters. If
this call is executed while the window is open, then it is itself responsible
for the correct calculation of the height of the toolbar.

(!B)In addition the following points have to be taken into consideration:(!b)

!begin_itemize !compressed
!item If a window is closed with wind_close, then any toolbar present
     will (!I)not(!i) be removed. At a later reopening the toolbar will be
     in place once more.
!item If a window is removed with wind_delete, then its link to a
     toolbar will be dissolved.
!item To be able to recognize mouse-clicks on toolbar objects, these
     have to possess the status TOUCHEXIT. When such an object is
     clicked on, the (!nolink [AES]) creates a WM_TOOLBAR message which
     is sent to the relevant application.
!end_itemize

See also: AES ~ GEM ~ Toolbar support
!end_node



!begin_node Problems with wind_calc in toolbar windows
!label wind_calc, Problems with

When applying the function wind_calc to windows that possess a toolbar
there are several problems to be taken into account:

As this function is (!I)not(!i) passed a window ID (window handle), the
desired sizes cannot be calculated correctly when a toolbar is present
in the window. The reason for this is that, quite simply, the (!nolink [AES]) in
this case has (!I)no information(!i) about the toolbar, and specially about
its size.

Hence the values returned by wind_calc in such cases have to be
further refined by the application. As the program can access the
relevant OBJECT tree (and with this also the height of the toolbar),
this should present no problems. (!B)In detail:(!b)

!begin_itemize !compressed
!item When ascertaining the (!I)border areas(!i) of the window, the height of
     the toolbar must be added to the height returned by the function.
!item When ascertaining the (!I)working area(!i) of the window, the height of
     the toolbar must be added to the Y-value ((!I)couty(!i)) returned by the
     function.
!end_itemize

(!B)Note:(!b) Besides the height of the actual object, the height of the
toolbar should include also the space requirement for special effects
(3D, shadowing, etc.).

See also: (!link [WF_FTOOLBAR][WF_FTOOLBAR, wind_get]) ~ 
(!link [WF_NTOOLBAR][WF_NTOOLBAR, wind_get]) ~ WM_TOOLBAR ~ objc_sysvar
!end_node

!end_node

!else

!begin_node Toolbar-Support
!label Toolbars, Redraw und Update von

Ab AES-Version 4.1 unterstÅtzt das Betriebssystem sogenannte Toolbars. Es
handelt sich dabei um einen OBJECT-Baum, der unterhalb der Info-Zeile eines
Fensters (und Åber dem Arbeitsbereich) plaziert wird, und die Darstellung
von Buttons, Icons etc. im Fenster ermîglicht.

Wie bereits von den Fensterroutinen bekannt, wird die Verwaltung einer
Toolbar zwischen dem (!nolink [AES]) und der Applikation aufgeteilt. (!B)Dabei ist das
(!nolink [AES]) fÅr die folgenden Aktionen verantwortlich:(!b)

!begin_itemize !compressed
!item Anpassung der x- und y-Koordinaten der Toolbar, wenn das Fenster
      bewegt oder in der Grîûe verÑndert wird.
!item Sicherstellung, daû das Fenster auf die fÅr die Fenster-Komponenten
      und die Toolbar notwendige Grîûe konfiguriert wird.
!item Anpassung der Breite der Toolbar an die Breite des Fensters.
!item Neuzeichnung der Toolbar beim Eintreffen einer WM_REDRAW-Nachricht.
!item Verschicken von (!nolink [AES])-Nachrichten, wenn der Benutzer ein Objekt der
      Toolbar aktiviert.
!end_itemize

(!B)Die Applikation hingegen muss sich um die folgenden Dinge kÅmmern:(!b)

!begin_itemize !compressed
!item Aufbau eines OBJECT-Baumes fÅr die Toolbar (insbesondere muss darauf
      geachtet werden, daû alle anwÑhlbaren Elemente der Toolbox den Status
      TOUCHEXIT besitzen).
!item Anpassung der Breite eines Objektes der Toolbar, falls dieses von der
      Breite des Fensters abhÑngig ist (wird evtl. beim VerÑndern der Grîûe
      des Fensters notwendig sein).
!item Behandlung von USERDEF-Objekten.
!item Neuzeichnung alle Objekte, deren optische Erscheinung geÑndert werden
      soll. In diesem Fall muss unbedingt die Rechteckliste der Toolbar
      abgefragt bzw. berÅcksichtigt werden.
!item Probleme die im Zusammenhang mit der Bildschirmauflîsung stehen,
      mÅssen gelîst werden. So kann z.B. die Hîhe eines Icons in der
      mittleren ST-Auflîsung von der Hîhe des Icons in der mittleren
      TT-Auflîsung abweichen.
!end_itemize

(!B)Bei der UnterstÅtzung von Toolbars in eigenen Programmen sollten die
folgenden Punkte beachtet werden:(!b)

!begin_itemize !compressed
!item Kommunikation mit dem (!nolink [AES])-Window-Manager
!item (!link [Probleme bei wind_calc][wind_calc, Probleme bei])
!item Redraw und Updating von Toolbars
!item Toolbar-Support unter XaAES
!end_itemize

Querverweis: (!nl)
WF_TOOLBAR ~  (!link [WF_FTOOLBAR][WF_FTOOLBAR, wind_get])  ~ 
(!link [WF_NTOOLBAR][WF_NTOOLBAR, wind_get]) ~  WM_TOOLBAR ~
             wind_get  ~   wind_set



!begin_node Redraw und Updating von Toolbars

Bei der Neuzeichnung (von Teilen) der Toolbar ist, wie Åblich, die
Rechteckliste zu beachten. Da die bisherigen wind_get Opcodes
(!link [WF_FIRSTXYWH][WF_FIRSTXYWH, wind_get])
und (!link [WF_NEXTXYWH][WF_NEXTXYWH, wind_get]) jedoch (!I)nur den Arbeitsbereich(!i)
eines Fensters
berÅcksichtigen, wurden zwei neue Parameter ((!link [WF_FTOOLBAR][WF_FTOOLBAR, wind_get])
und (!link [WF_NTOOLBAR][WF_NTOOLBAR, wind_get]))
eingefÅhrt, mit deren Hilfe die Rechteckliste fÅr eine Toolbar abgefragt
werden kann.

(!B)Ein Redraw (von Teilen) der Toolbar kann in den folgenden Situationen
notwendig sein:(!b)

!begin_itemize !compressed
!item die Toolbar enthÑlt benutzerdefinierte Objekte (USERDEF's).
!item der Status eines Objektes der Toolbar wurde verÑndert. Der neu zu
      zeichnende Bereich besteht dabei aus der Grîûe des Objektes zzgl. des
      Platzes, welcher fÅr Spezialeffekte (3D, Shadowing, Outline etc.)
      beansprucht wird.
!end_itemize

(!B)Nicht notwendig ist ein Neuzeichnen z.B. in folgenden FÑllen:(!b)

!begin_itemize !compressed
!item das entsprechende Fenster ist ikonifiziert. Die Applikation braucht
      sich um keinerlei Verwaltung der Toolbar zu kÅmmern; dies ist erst
      wieder nach der Aufhebung des Iconify, dem sogenannten Uniconify,
      notwendig.
!item die im Fenster vorhandene Toolbar soll durch eine andere ersetzt
      werden. In diesem Fall reicht ein Aufruf von wind_set mit dem Opcode
      WF_TOOLBAR und der Adresse des neuen OBJECT-Baumes aus.
!item die im Fenster vorhandene Toolbar soll entfernt werden. In diesem Fall
      reicht ein Aufruf von wind_set mit dem Opcode WF_TOOLBAR und
      NULL-Parametern aus.
!end_itemize

Querverweis:
(!link [Rechteckliste eines Fensters][Die Rechteckliste eines Fensters]) ~
Toolbar-Support
!end_node



!begin_node Toolbars und der Window-Manager

Zur Handhabung von Toolbars kann eine Applikation auf den Window-Manager
des (!nolink [AES]) zurÅckgreifen. Im einzelnen:

!label Toolbar, Anheften einer
(!B)Um eine Toolbar an ein Fenster anzuheften(!b), genÅgt ein Aufruf von
wind_set(handle, WF_TOOLBAR, ...) mit der Adresse des
Toolbar-Objektbaumes. Falls dieser Aufruf durchgefÅhrt wird wÑhrend das
Fenster geîffnet ist, so ist dieses selbst fÅr die korrekte Berechnung der
Hîhe der Toolbar verantwortlich.

!label Toolbar, Austauschen einer
(!B)Um eine Toolbar gegen eine andere auszutauschen(!b), kann auf einen
Aufruf von wind_set(handle, WF_TOOLBAR, ...) mit der Adresse
der neuen Toolbar zurÅckgegriffen werden. Falls dieser Aufruf durchgefÅhrt wird
wÑhrend das Fenster geîffnet ist, so ist dieses selbst fÅr die korrekte
Berechnung der Hîhe der (neuen) Toolbar verantwortlich.

!label Toolbar, Entfernen einer
(!B)Um eine Toolbar aus einem Fenster zu lîsen(!b), ist ein Aufruf von
wind_set(handle, WF_TOOLBAR, ...) mit NULL Parametern
erforderlich. Falls dieser Aufruf durchgefÅhrt wird wÑhrend das Fenster geîffnet
ist, so ist dieses selbst fÅr die korrekte weitere Bearbeitung verantwortlich.

(!B)DarÅber hinaus sind die folgenden Punkte zu beachten:(!b)

!begin_itemize !compressed
!item Wird ein Fenster per wind_close geschlossen, so wird eine evtl.
      vorhandene Toolbar (!I)nicht(!i) entfernt. Bei einem spÑteren ôffnen
      ist die Toolbar also weiterhin vorhanden.
!item Wird ein Fenster per wind_delete entfernt, so wird auch die Verbindung
      zur Toolbar aufgelîst.
!item Um Mausklicks auf Toolbar-Objekte erkennen zu kînnen, mÅssen diese den
      Status TOUCHEXIT besitzen. Bei einem Klick auf ein solches Objekt wird
      vom (!nolink [AES]) eine WM_TOOLBAR-Nachricht erzeugt, und
      an die betreffende Applikation geschickt.
!end_itemize

Querverweis: AES ~ GEM ~ Toolbar-Support
!end_node



!begin_node Probleme bei wind_calc in Toolbar-Fenstern
!label wind_calc, Probleme bei

Beim Einsatz der Funktion wind_calc auf Fenster, die eine Toolbar
beinhalten, sind einige Probleme zu berÅcksichtigen:

Da dieser Funktion (!I)keine(!i) Fenster-Kennung (Window-Handle) Åbergeben
wird, kînnen die gewÅnschten Grîûen nicht korrekt berechnet werden, wenn
sich eine Toolbar im Fenster befindet. Der Grund liegt ganz einfach darin,
daû das AES in diesem Fall (!I)keine(!i) Informationen Åber die Toolbar, und
speziell Åber deren Grîûe besitzt.

Daher mÅssen in diesem Fall die von wind_calc gelieferten Werte von der
Applikation weiter aufbereitet werden. Da das Programm auf den
entsprechenden OBJECT-Baum (und damit auch auf die Hîhe der Toolbar)
zugreifen kann, ist dies problemlos mîglich. (!B)Konkret:(!b)

!begin_itemize !compressed
!item Bei der Ermittlung des (!I)Randbereiches(!i) des Fensters, muû die
      Hîhe der Toolbar auf die von der Funktion gelieferte Hîhe addiert
      werden.
!item Bei der Ermittlung des (!I)Arbeitsbereiches(!i) des Fensters, muû die
      Hîhe der Toolbar auf den von der Funktion gelieferten y-Wert (couty)
      addiert werden.
!end_itemize

(!B)Hinweis:(!b) Die Hîhe der Toolbar sollte neben der Hîhe des eigentlichen
Objektes den Platzbedarf fÅr Spezialeffekte (3D, Shadowing, etc.) beinhalten.

Querverweis: (!link [WF_FTOOLBAR][WF_FTOOLBAR, wind_get]) ~ 
(!link [WF_NTOOLBAR][WF_NTOOLBAR, wind_get]) ~ WM_TOOLBAR ~ objc_sysvar
!end_node

!end_node

!endif
