!iflang [english]

!begin_node RSDAEMON_MSG

The RSDAEMON is a parallel-running application which assumes the task
of the resolver with an (!nolink [AES]) message. It's intended as a kind of
non-blocking gethostbyname, although the RSDAEMON only returns an IP,
not a complete hostent-struct.

The RSDAEMON is normally started and terminated automatically by
IConnect.

Utilization:

With appl_find("RSDAEMON") the App ID is to be obtained. In case of
error one should fall back to the blocking gethostbyname, and only if
nothing else is possible, break off with an error-message.

Now the RSDAEMON can be sent an (!nolink [AES]) message:
!begin_verbatim
#include <rsdaemon.h>

pbuf[0]=RSDAEMON_MSG
pbuf[1]=<eigene App-ID>
pbuf[2]=0
pbuf[3]=RSD_REQUEST_IP
pbuf[4]=<Own freely choosable ID, to be able to assign the reply>
pbuf[5/6]=<Pointer to the string that contains the nname of the host>
           (Pay attention to possible memory protection!)

The RSDAEMON returns a reply of the following form:

pbuf[0]=RSDAEMON_MSG
pbuf[1]=<RSDAEMON ID>
pbuf[2]=0

pbuf[3]=RSD_IP_UNKNOWN = IP could not be obtained. This may be due to
                         various causes (user has not entered a DNS,
                         the DNS does not recognize the host etc.)
pbuf[4]=<Here the ID of the request is returned>

or:

pbuf[3]=RSD_IP_FOUND
pbuf[4]=<Here the ID of the request is returned>
pbuf[5/6]=<IP of the host as ulong>
!end_verbatim

And here still the RSDAEMON.H:
!begin_verbatim
#ifndef __RSDAEMON__
#define __RSDAEMON__

#define RSDAEMON_MSG	0x995

#define RSD_REQUEST_IP  1
#define RSD_IP_FOUND    2
#define RSD_IP_UNKNOWN  3

#endif
!end_verbatim

!end_node

!else

!begin_node RSDAEMON_MSG

Der RSDAEMON ist eine parallel laufende Applikation, die die Aufgabe 
des Resolvers per (!nolink [AES])-Message Åbernimmt. Sinn ist quasi ein 
nichtblockierendes gethostbyname(), allerdings liefert der RSDAEMON 
nur eine IP, kein ganzes hostent-struct.

Der RSDAEMON wird normalerweise automatisch von IConnect gestartet und 
beendet.

Nutzung:

Per appl_find("RSDAEMON") ist die App-ID zu ermitteln. Im Fehlerfall 
sollte man auf das blockierende gethostbyname() zurÅckgreifen und nur, 
wenn garnicht anders mîglich, stattdessen mit Fehlermeldung abbrechen.

Nun kann dem RSDAEMON eine (!nolink [AES])-Message geschickt werden:

!begin_verbatim
#include <rsdaemon.h>

pbuf[0]=RSDAEMON_MSG
pbuf[1]=<eigene App-ID>
pbuf[2]=0
pbuf[3]=RSD_REQUEST_IP
pbuf[4]=<eigene frei wÑhlbare ID, um die Antwort zuordnen zu kînnen>
pbuf[5/6]=<Zeiger auf den String, der den Namen des Hosts enthÑlt>
           (Ggf. Speicherschutz beachten!)

Der RSDAEMON liefert eine Antwort folgender Form:

pbuf[0]=RSDAEMON_MSG
pbuf[1]=<RSDAEMON-ID>
pbuf[2]=0

pbuf[3]=RSD_IP_UNKNOWN = IP konnte nicht ermittelt werden. Das kann
                         verschiedene Ursachen haben (User hat keinen
                         DNS eingetragen, DNS kenn den Host nicht etc.)
pbuf[4]=<hier wird die ID aus dem Request zurÅckgeliefert>

oder:

pbuf[3]=RSD_IP_FOUND
pbuf[4]=<hier wird die ID aus dem Request zurÅckgeliefert>
pbuf[5/6]=<IP des Hosts als ulong>
!end_verbatim

Und hier noch die RSDAEMON.H:
!begin_verbatim
#ifndef __RSDAEMON__
#define __RSDAEMON__

#define RSDAEMON_MSG	0x995

#define RSD_REQUEST_IP  1
#define RSD_IP_FOUND    2
#define RSD_IP_UNKNOWN  3

#endif
!end_verbatim

!end_node


!endif
