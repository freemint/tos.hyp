!iflang [english]

!begin_node evnt_multi
(!begin_liste) [Availability]
!item [Name:]
¯Event multi® - Wait for an arbitrary event.

!item [Opcode:]
25

!item [Syntax:]
int16_t evnt_multi ( int16_t ev_mflags, int16_t ev_mbclicks,
                  int16_t ev_mbmask, int16_t ev_mbstate,
                  int16_t ev_mm1flags, int16_t ev_mm1x, int16_t ev_mm1y,
                  int16_t ev_mm1width, int16_t ev_mm1height,
                  int16_t ev_mm2flags, int16_t ev_mm2x, int16_t ev_mm2y,
                  int16_t ev_mm2width, int16_t ev_mm2height,
                  int16_t *ev_mmgpbuff, int16_t ev_mtlocount, int16_t ev_mthicount,
                  int16_t *ev_mmox, int16_t *ev_mmoy, int16_t *ev_mmbutton,
                  int16_t *ev_mmokstate, int16_t *ev_mkreturn,
                  int16_t *ev_mbreturn );

!item [Description:]
The evnt_multi call waits for a number of various events, combining the
functionality of evnt_button, evnt_keybd, evnt_mesag, evnt_mouse and evnt_timer
in one call. The following apply:

!begin_xlist !compressed [ev_mtlocount]
!item [Parameter]
Meaning
!item [~]
~
!label MU_KEYBD
!label MU_BUTTON
!label MU_M1
!label MU_M2
!label MU_MESAG
!label MU_TIMER
!label MU_WHEEL
!label MU_MX
!label MU_KEYBD4
!label MU_NORM_KEYBD
!label MU_DYNAMIC_KEYBD
!label X_MU_DIALOG
!item [ev_mflags]
Desired event: (!nl)
MU_KEYBD~~~~~ (0x0001) Keybord event (!nl)
MU_BUTTON~~~~ (0x0002) Button event   (!nl)
MU_M1~~~~~~~~ (0x0004) Mouse event 1   (!nl)
MU_M2~~~~~~~~ (0x0008) Mouse event 2   (!nl)
MU_MESAG~~~~~ (0x0010) (!nolink [Messages])      (!nl)
MU_TIMER~~~~~ (0x0020) Timer events   (!nl)
MU_WHEEL~~~~~ (0x0040) Mouse-wheel, (!nolink [XaAES])   (!nl)
MU_MX~~~~~~~~ (0x0080) Mouse movement, (!nolink [XaAES]) (!nl)
MU_KEYBD4~~~~ (0x0100) (!nolink [GEM])/4 (!nl)
MU_NORM_KEYBD (0x0100)Normalized key-codes, (!nolink [XaAES]) (!nl)
MU_DYNAMIC_KEYBD (0x0200)  (!nolink [XaAES]), not yet implemented (!nl)
X_MU_DIALOG~~~(0x4000) (Geneva)

!item [ev_mbclicks]
Number of clicks (see (!I)ev_bclicks(!i) in evnt_button)
!item [ev_mbmask]
Which mouse buttons should be taken into account (format see (!I)ev_bmask(!i)
in evnt_button)
!item [ev_mbstate]
Which status the mouse buttons must reach (format see (!I)ev_bstate(!i) in
evnt_button)
!item [ev_mm1flags]
Should the event be triggered by the entry (0) or leaving (1) of the first
rectangle (see (!I)ev_moflags(!i) in evnt_mouse
!item [ev_mm1x,]
X-coordinate, (!U)and(!u)
!item [ev_mm1y]
Y-coordinate of top L of 1st rectangle (see (!I)ev_mox(!i), (!I)ev_moy(!i)
in evnt_mouse)
!item [ev_mm1width]
Width of the first rectangle (see (!I)ev_mowidth(!i) in evnt_mouse)
!item [ev_mm1height]
Height of the first rectangle (see (!I)ev_moheight(!i) in evnt_mouse)
!item [ev_mm2flags,]
~
!item [ev_mm2x,]
~
!item [ev_mm2y,]
~
!item [ev_mm2width,]
~
!item [ev_mm2height]
These are the corresponding parameters for the second mouse event rectangle
!item [ev_mmgpbuff]
A 16-byte message buffer (see evnt_mesag and (!I)ev_mgpbuff(!i))
!item [ev_mtlocount]
Low-WORD for the timer counter (see evnt_timer)
!item [ev_mthicount]
High-WORD for the timer counter (see evnt_timer) (!nl)
(!B)Warning:(!b) Under (!nolink [TOS]) 1.0 one may not set the timer in a desk
accessory to 0, otherwise the system will hang!

!item [ev_mmox,]
The X-coordinate, (!U)and(!u)
!item [ev_mmoy]
Y-coordinate of the mouse pointer at the occurrence of the event (see
evnt_mouse, (MU_WHEEL))
!item [ev_mmobutton]
Status of the mouse buttons at the occurrence of the event (format see
evnt_button)
!item [ev_mmokstate]
Status of the 'special' keys on the keyboard at the occurrence of the event
(format see evnt_button) (!nl)
For MU_WHEEL: Wheel number
!item [ev_mkreturn]
Scancode of the pressed key
!item [ev_mbreturn]
Number of clicks with the mouse button (!nl)
For MU_WHEEL: Number of wheel rotations
!end_xlist
(!B)Note:(!b) Due to the large number of parameters to be passed this function
consumes a relatively large amount of CPU time, since the parameters must first
be stored on the stack, and then distributed to the (!nolink [GEM]) input
fields.

MU_WHEEL: (!nl)
This will only be sent if there is not a top window or the top window doesn't
have arrow widgets.

MU_MX: (!nl)
This reports ANY mouse movement to the application, ((!I)ev_mmox(!i),
(!I)ev_mmoy(!i)), with the state of the keyboard.

MU_KEYBD4: (!nl)
Used internally in (!nolink [GEM])/4 to check for a context-sensitive help
request.

MU_NORM_KEYBD: (!nl)
If the event mask MU_NORM_KEYBD is passed to evnt_multi the application will
receive a normalized key-code (NKCC) instead of the standard (!nolink [AES])
key-code, together with the state of the mouse. The mask can be used together
with MU_KEYBD; if both are passed, then MU_NORM_KEYBD prevails. The
normalized key-code is in (!I)ev_mmokstate(!i) and (!I)ev_mkreturn(!i), both
having the same value.

X_MU_DIALOG: (!nl)
If the (!I)ev_mflags(!i) parameter has its bit 14 set,
((!I)ev_mflags(!i) |= X_MU_DIALOG), then any mouse clicks and keyboard actions
within windows containing dialogs will cause the (!I)ev_mwhich(!i) return value
from evnt_multi to have bit 14 set. (!nl)
When this happens, (!I)ev_mmgpbuff(!i) WORD 2 contains the index of the object
within the dialog which was selected. If the object was a TOUCHEXIT button and
the user double-clicked on it, then bit 15 will be set, similar to the way
form_do works. WORD 3 of the message buffer (!I)ev_mmgpbuff(!i) contains the
window handle of the window in which the event occurred. This feature is used
in conjunction with the wind_set option X_WF_DIALOG.

!item [(!nolink [Return]) value:]
The function returns the number of the occurring event(s) in the format specified
above.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Event library

!item [See also:]
(!link [Binding] [Bindings for evnt_multi]) ~ evnt_keybd ~ evnt_button ~ evnt_mouse ~
evnt_mesag ~ evnt_timer ~ evnt_dclick ~ Messages
(!ende_liste)


!begin_node Bindings for evnt_multi
!ignore_index

(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t evnt_multi ( int16_t ev_mflags, int16_t ev_mbclicks,
                  int16_t ev_mbmask, int16_t ev_mbstate,
                  int16_t ev_mm1flags, int16_t ev_mm1x, int16_t ev_mm1y,
                  int16_t ev_mm1width, int16_t ev_mm1height,
                  int16_t ev_mm2flags, int16_t ev_mm2x, int16_t ev_mm2y,
                  int16_t ev_mm2width, int16_t ev_mm2height,
                  int16_t *ev_mmgpbuff, int16_t ev_mtlocount, int16_t ev_mthicount,
                  int16_t *ev_mmox, int16_t *ev_mmoy, int16_t *ev_mmbutton,
                  int16_t *ev_mmokstate, int16_t *ev_mkreturn,
                  int16_t *ev_mbreturn );
!item [Binding:]
!begin_verbatim
int16_t evnt_multi (int16_t ev_mflags,  int16_t ev_mbclicks,
                    int16_t ev_mbmask,  int16_t ev_mbstate,
                    int16_t ev_mm1flags, int16_t ev_mm1x,
                    int16_t ev_mm1y, int16_t ev_mm1width,
                    int16_t ev_mm1height, int16_t ev_mm2flags,
                    int16_t ev_mm2x, int16_t ev_mm2y,
                    int16_t ev_mm2width, int16_t ev_mm2height,
                    int16_t *ev_mmgpbuff,
                    int16_t ev_mtlocount,
                    int16_t ev_mthicount, int16_t *ev_mmox,
                    int16_t *ev_mmoy, int16_t *ev_mmbutton,
                    int16_t *ev_mmokstate,
                    int16_t *ev_mkreturn,
                    int16_t *ev_mbreturn)
{
   int_in[0]  = ev_mflags;
   int_in[1]  = ev_mbclicks;
   int_in[2]  = ev_mbmask;
   int_in[3]  = ev_mbstate;
   int_in[4]  = ev_mm1flags;
   int_in[5]  = ev_mm1x;
   int_in[6]  = ev_mm1y;
   int_in[7]  = ev_mm1width;
   int_in[8]  = ev_mm1height;
   int_in[9]  = ev_mm2flags;
   int_in[10] = ev_mm2x;
   int_in[11] = ev_mm2y;
   int_in[12] = ev_mm2width;
   int_in[13] = ev_mm2height;
   int_in[14] = ev_mtlocount;
   int_in[15] = ev_mthicount;
   addr_in[0] = ev_mmgpbuff;

   crys_if (25);

   *ev_mmox      = int_out[1];
   *ev_mmoy      = int_out[2];
   *ev_mmbutton  = int_out[3];
   *ev_mmokstate = int_out[4];
   *ev_mkreturn  = int_out[5];
   *ev_mbreturn  = int_out[6];

   return (intout[0]);
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control !! control[0] !! 25    # Function opcode
control+2 !! control[1] !! 16    # Entry in int_in
control+4 !! control[2] !! 7     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in !! int_in[0] !! ev_mflags
int_in+2 !! int_in[1] !! ev_mbclicks
int_in+4 !! int_in[2] !! ev_mbmask
int_in+6 !! int_in[3] !! ev_mbstate
int_in+8 !! int_in[4] !! ev_mm1flags
int_in+10 !! int_in[5] !! ev_mm1x
int_in+12 !! int_in[6] !! ev_mm1y
int_in+14 !! int_in[7] !! ev_mm1width
int_in+16 !! int_in[8] !! ev_mm1height
int_in+18 !! int_in[9] !! ev_mm2flags
int_in+20 !! int_in[10] !! ev_mm2x
int_in+22 !! int_in[11] !! ev_mm2y
int_in+24 !! int_in[12] !! ev_mm2width
int_in+26 !! int_in[13] !! ev_mm2height
int_in+28 !! int_in[14] !! ev_mtlocount
int_in+30 !! int_in[15] !! ev_mthicount
int_out !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! ev_mmox
int_out+4 !! int_out[2] !! ev_mmoy
int_out+6 !! int_out[3] !! ev_mmbutton
int_out+8 !! int_out[4] !! ev_mmokstate
int_out+10 !! int_out[5] !! ev_mkreturn
int_out+12 !! int_out[6] !! ev_mbreturn
addr_in !! addr_in[0] !! ev_mmgpbuff
!end_table
(!ende_liste)
!end_node
!end_node

!else

!begin_node evnt_multi
(!begin_liste) [Beschreibung]
!item [Name:]
¯Event Multi® - wartet auf ein beliebiges Ereignis.
!item [AES-Nummer:]
25
!item [Deklaration:]
int16_t evnt_multi ( int16_t ev_mflags, int16_t ev_mbclicks,
                  int16_t ev_mbmask, int16_t ev_mbstate,
                  int16_t ev_mm1flags, int16_t ev_mm1x, int16_t ev_mm1y,
                  int16_t ev_mm1width, int16_t ev_mm1height,
                  int16_t ev_mm2flags, int16_t ev_mm2x, int16_t ev_mm2y,
                  int16_t ev_mm2width, int16_t ev_mm2height,
                  int16_t *ev_mmgpbuff, int16_t ev_mtlocount, int16_t ev_mthicount,
                  int16_t *ev_mmox, int16_t *ev_mmoy, int16_t *ev_mmbutton,
                  int16_t *ev_mmokstate, int16_t *ev_mkreturn,
                  int16_t *ev_mbreturn );

!item [Beschreibung:]
Die evnt_multi Funktion wartet auf eine Reihe verschiedener Events.
!begin_xlist !compressed [ev_mtlocount]
!item [Parameter]
Bedeutung
!item [~]
~
!label MU_KEYBD
!label MU_BUTTON
!label MU_M1
!label MU_M2
!label MU_MESAG
!label MU_TIMER
!label MU_WHEEL
!label MU_MX
!label MU_KEYBD4
!label MU_NORM_KEYBD
!label MU_DYNAMIC_KEYBD
!label X_MU_DIALOG
!item [ev_mflags]
gewnschtes Ereignis: (!nl)
MU_KEYBD~~~~~ (0x0001) Tastaturereignis (!nl)
MU_BUTTON~~~~ (0x0002) Buttonereignis   (!nl)
MU_M1~~~~~~~~ (0x0004) Mausereignis 1   (!nl)
MU_M2~~~~~~~~ (0x0008) Mausereignis 2   (!nl)
MU_MESAG~~~~~ (0x0010) Nachrichten      (!nl)
MU_TIMER~~~~~ (0x0020) Zeitereignisse   (!nl)
MU_WHEEL~~~~~ (0x0040) Mausrad, XaAES   (!nl)
MU_MX~~~~~~~~ (0x0080) Mausbewegung, XaAES (!nl)
MU_KEYBD4~~~~ (0x0100) GEM/4 (!nl)
MU_NORM_KEYBD (0x0100) normierte Tastenkodes, XaAES (!nl)
MU_DYNAMIC_KEYBD (0x0200)  XaAES, noch nicht vorhanden (!nl)
X_MU_DIALOG~~~(0x4000) (Geneva)

!item [ev_mbclicks]
Anzahl der Klicks, siehe ev_bclicks in evnt_button
!item [ev_mbmask]
welche Mausknpfe sollen betrachtet werden (Format siehe (!I)ev_bmask(!i) in
(!nolink [evnt_button]))
!item [ev_mbstate]
welchen Zustand mssen die Mausknpfe einnehmen (Format, siehe
(!I)ev_bstate(!i) in (!nolink [evnt_button]))
!item [ev_mm1flags]
soll der Event beim Betreten (0) oder Verlassen (1) des ersten Rechtecks
ausgelst werden, siehe (!I)ev_moflags(!i) in evnt_mouse
!item [ev_mm1x,]
~
!item [ev_mm1y]
x und y Koordinate des ersten Rechtecks, siehe (!I)ev_mox(!i),
(!I)ev_moy(!i) in evnt_mouse
!item [ev_mm1width]
die Breite des ersten Rechtecks, siehe (!I)ev_mowidth(!i) in (!nolink [evnt_mouse])
!item [ev_mm1height]
die Hhe des ersten Rechtecks, siehe (!I)ev_moheight(!i) in (!nolink [evnt_mouse])
!item [ev_mm2flags,]
~
!item [ev_mm2x,]
~
!item [ev_mm2y,]
~
!item [ev_mm2width,]
~
!item [ev_mm2height]
sind die Parameter fr das zweite Maus-Event Rechteck
!item [ev_mmgpbuff]
ein 16 Byte Messagebuffer, siehe evnt_mesag und (!I)ev_mgpbuff(!i)
!item [ev_mtlocount]
low-Word fr den Timercounter, siehe evnt_timer
!item [ev_mthicount]
high-Word fr den Timercounter, siehe (!nolink [evnt_timer])
(!B)Achtung:(!b)
Unter TOS 1.0 darf in einem Accessorie der Timer
nicht auf 0 gesetzt werden, sonst hngt sich das System auf.

!item [ev_mmox,]
~
!item [ev_mmoy]
die x und y Koordinate des Mauszeigers beim Auftreten des Events, siehe
evnt_mouse, (MU_WHEEL)
!item [ev_mmobutton]
Zustand der Mausknpfe beim Auftreten des Events (Format siehe evnt_button)
!item [ev_mmokstate]
den Zustand der Sondertasten der Tastatur beim Auftreten des Events (Format,
siehe (!nolink [evnt_button])) (!nl)
Bei MU_WHEEL: Radnummer

!item [ev_mkreturn]
der Scancode der gedrckten Taste
!item [ev_mbreturn]
Anzahl der Klicks mit der Maustaste (!nl)
Bei MU_WHEEL: Anzahl der Radumdrehungen
!end_xlist
(!B)Hinweis:(!b) Durch die groe Anzahl der zu bergebenden Parameter
verbraucht diese Funktion relativ viel CPU-Zeit; denn die Parameter mssen
zunchst auf dem Stack abgelegt, und dann noch auf die Eingabefelder des GEM
verteilt werden.

MU_WHEEL: (!nl)
Wird nur versendet wenn es keine obenliegendes Fenster gibt oder das Fenster
keine Pfeile besitzt.

MU_MX: (!nl)
Es wird jede Bewegung der Maus gemeldet ((!I)ev_mmox(!i), (!I)ev_mmoy(!i)),
zustzlich noch erfolgt noch die Rckgabe des Status der Tastaur.

MU_KEYBD4: (!nl)
Used internally in GEM/4 to check for a context-sensitive help request.

MU_NORM_KEYBD: (!nl)
Wenn das Ereignis MU_NORM_KEYBD mit in die Ergenismaske aufgenommen wird,
bekommt die Applikation anstatt den standard AES Scancode einen normaliesierten
Tastencode (NKCC) und Staus der Maus geliefert. Wird in der Maske MU_KEYBD und
MU_NORM_KEYBD angeben, wird immer MU_NORM_KEYBD geliefert. Die Rckgabe erfolgt
in (!I)ev_mmokstate(!i) und (!I)ev_mkreturn(!i), wobei bei der gleichen Wert
besitzen.

X_MU_DIALOG: (!nl)
If the (!I)ev_mflags(!i) parameter has bit 14 set
((!I)ev_mflags(!i) |= X_MU_DIALOG), any mouse clicks and keyboard actions
within windows containing dialogs will cause the (!I)ev_mwhich(!i) return
value from evnt_multi to have bit 14 set. (!nl)
When this happens, (!I)ev_mmgpbuff(!i) word 2 contains the index of the object
within the dialog which was selected. If the object was a TOUCHEXIT
button and the user double-clicked on it, then bit 15 will be set, similar
to the way form_do works. Word 3 of the message buffer (!I)ev_mmgpbuff(!i)
contains the window handle of the window in which the event occurred. (!nl)
This feature is used in conjunction with the wind_set option
X_WF_DIALOG.


!item [Ergebnis:]
Als Ergebnis liefert die Funktion die Nummer des oder der aufgetretenen
Events im oben angegebenen Format.

!item [Verfgbar:]
In allen (!nolink [AES]) Versionen.

!item [Gruppe:]
Ereignisverwaltung
!item [Querverweis:]
(!link [Binding] [Bindings fr evnt_multi]) ~ evnt_keybd ~ evnt_button ~ evnt_mouse ~
evnt_mesag ~  evnt_timer ~  evnt_dclick ~  Nachrichten
(!ende_liste)


!begin_node Bindings fr evnt_multi
!ignore_index

(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t evnt_multi ( int16_t ev_mflags, int16_t ev_mbclicks,
                  int16_t ev_mbmask, int16_t ev_mbstate,
                  int16_t ev_mm1flags, int16_t ev_mm1x, int16_t ev_mm1y,
                  int16_t ev_mm1width, int16_t ev_mm1height,
                  int16_t ev_mm2flags, int16_t ev_mm2x, int16_t ev_mm2y,
                  int16_t ev_mm2width, int16_t ev_mm2height,
                  int16_t *ev_mmgpbuff, int16_t ev_mtlocount, int16_t ev_mthicount,
                  int16_t *ev_mmox, int16_t *ev_mmoy, int16_t *ev_mmbutton,
                  int16_t *ev_mmokstate, int16_t *ev_mkreturn,
                  int16_t *ev_mbreturn );
!item [Umsetzung:]
!begin_verbatim
int16_t evnt_multi (int16_t ev_mflags,  int16_t ev_mbclicks,
                    int16_t ev_mbmask,  int16_t ev_mbstate,
                    int16_t ev_mm1flags, int16_t ev_mm1x,
                    int16_t ev_mm1y, int16_t ev_mm1width,
                    int16_t ev_mm1height, int16_t ev_mm2flags,
                    int16_t ev_mm2x, int16_t ev_mm2y,
                    int16_t ev_mm2width, int16_t ev_mm2height,
                    int16_t *ev_mmgpbuff,
                    int16_t ev_mtlocount,
                    int16_t ev_mthicount,
                    int16_t *ev_mmox, int16_t *ev_mmoy,
                    int16_t *ev_mmbutton,
                    int16_t *ev_mmokstate,
                    int16_t *ev_mkreturn,
                    int16_t *ev_mbreturn)
{
   int_in[0]  = ev_mflags;
   int_in[1]  = ev_mbclicks;
   int_in[2]  = ev_mbmask;
   int_in[3]  = ev_mbstate;
   int_in[4]  = ev_mm1flags;
   int_in[5]  = ev_mm1x;
   int_in[6]  = ev_mm1y;
   int_in[7]  = ev_mm1width;
   int_in[8]  = ev_mm1height;
   int_in[9]  = ev_mm2flags;
   int_in[10] = ev_mm2x;
   int_in[11] = ev_mm2y;
   int_in[12] = ev_mm2width;
   int_in[13] = ev_mm2height;
   int_in[14] = ev_mtlocount;
   int_in[15] = ev_mthicount;
   addr_in[0] = ev_mmgpbuff;

   crys_if (25);

   *ev_mmox      = int_out[1];
   *ev_mmoy      = int_out[2];
   *ev_mmbutton  = int_out[3];
   *ev_mmokstate = int_out[4];
   *ev_mkreturn  = int_out[5];
   *ev_mbreturn  = int_out[6];

   return (intout[0]);
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control !! control[0] !! 25    # Opcode der Funktion
control+2 !! control[1] !! 16    # Eintrge in int_in
control+4 !! control[2] !! 7     # Eintrge in int_out
control+6 !! control[3] !! 1     # Eintrge in addr_in
control+8 !! control[4] !! 0     # Eintrge in addr_out
int_in !! int_in[0] !! ev_mflags
int_in+2 !! int_in[1] !! ev_mbclicks
int_in+4 !! int_in[2] !! ev_mbmask
int_in+6 !! int_in[3] !! ev_mbstate
int_in+8 !! int_in[4] !! ev_mm1flags
int_in+10 !! int_in[5] !! ev_mm1x
int_in+12 !! int_in[6] !! ev_mm1y
int_in+14 !! int_in[7] !! ev_mm1width
int_in+16 !! int_in[8] !! ev_mm1height
int_in+18 !! int_in[9] !! ev_mm2flags
int_in+20 !! int_in[10] !! ev_mm2x
int_in+22 !! int_in[11] !! ev_mm2y
int_in+24 !! int_in[12] !! ev_mm2width
int_in+26 !! int_in[13] !! ev_mm2height
int_in+28 !! int_in[14] !! ev_mtlocount
int_in+30 !! int_in[15] !! ev_mthicount
int_out !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! ev_mmox
int_out+4 !! int_out[2] !! ev_mmoy
int_out+6 !! int_out[3] !! ev_mmbutton
int_out+8 !! int_out[4] !! ev_mmokstate
int_out+10 !! int_out[5] !! ev_mkreturn
int_out+12 !! int_out[6] !! ev_mbreturn
addr_in !! addr_in[0] !! ev_mmgpbuff
!end_table
(!ende_liste)
!end_node
!end_node

!endif
