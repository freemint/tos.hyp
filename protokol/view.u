# view.txt, V1.04, 14.11.1993

!begin_node View protocol
!html_name proto_view
!label Protocol, View
The View protocol was developed by (!I)Peter Seitz(!i) and (!I)Dieter Fiebelkorn(!i)
to make it possible for a (!nolink [GEM]) application to display files (using an
external viewer) without being forced to implement a viewer for the
various file formats itself, and to provide a uniform method of
communication between the application and the viewer (so that the
application can use any viewer, rather than just one particular viewer).

There are already several applications that can be used as viewers.
They are (!I)(!nolink [GEM])-View(!i)(Dieter Fiebelkorn), (!I)1st-View/1st-Guide(!i) (Guido
Vollbending), and (!I)ShowImage(!i) (Peter Seitz). When (!nolink [installed]) as
desk accessories, these applications can be instructed (by other
applications) to view files.

This experimental version of the View protocol is implemented in (!I)(!nolink [GEM])-
View(!i) and (!I)ShowImage.(!i) IT IS STRONGLY RECOMMENDED THAT ALL PROGRAMMERS
USE AND EXPERIMENT WITH THIS PROTOCOL! We hope that eventually it will
become a standard. Suggestions and comments are welcome; please send
them to Peter Seitz at one of the following addresses:

!begin_verbatim
  Peter Seitz, Robert-Koch-Str.6, 63225 Langen, GERMANY
  E-Mail (Internet): seitz(at)rbg.informatik.th-darmstadt.de
                  or seitz(at))isa.informatik.th-darmstadt.de
!end_verbatim
This protocol should be quite easy to implement for both the writers
of viewers and the writers of applications. It should provide
substantial benefits for the user as well, since he will be able to
use his favourite viewer with all applications.

--Peter Seitz


In the following dicussion, 'viewer' refers to the desk accessory or
application that is used to display the file(s) and 'application'
always refers to the program that requests the services of the viewer.

!subtoc all

!begin_node The purpose(s) of the View protocol

The View protocol was developed to allow an application to:

!begin_itemize
!item Determine if a viewer is already in memory (without knowing the
     name of the viewer). If no viewer is available, the application
     can start the viewer itself (if the name is available).

!item Determine what type of files can be displayed by the available
     viewer.

!item View files in various formats (using the viewer) and receive
     feedback from the viewer (using a uniform message protocol).
!end_itemize

!end_node

!begin_node Using the View protocol

It is very easy for the user to use the facilities of the View
protocol. If there is a view-accessory ((!I)GEM-View, ShowImage(!i)) that
supports the View protocol, and the application supports the View
protocol, nothing needs to be done. If there is no resident view-
accessory (or the desired viewer does not support the View protocol)
then the user should install an environmental variable called 'View'
with the full pathname of the desired viewer as its value. The way
that this can be done is described in 'Who is the viewer?'.
!end_node


!begin_node Implementing the View protocol

The View protocol is based on parts of the XAcc protocol, so a
programmer planning to implement the View protocol should obtain a
copy of the XAcc protocol (xacc_mt.txt).


!begin_node Who is the viewer?

First, an application should determine if there is a viewer that the
user prefers. It does this by (in this order) looking for an
environmental variable called 'View', looking for a cookie in the
cookie jar called 'View', and then looking for an environmental
variable called 'SHSHOW' (which is used by the MultiTOS desktop, too).
All these names are case-sensitive.

The value of each one of these variables is the full pathname of the viewer.

The programmer can determine if one of the viewers is in memory (as a desk
accessory, usually, but it is possible for the viewer to be an application
under a multitasking operating system) using the appl_find system call.

To use the appl_find system call, the path and the extension have to
be removed from the name of the viewer and must be padded with spaces
to a length of eight characters. If this is not done, the (!nolink [appl_find])
call will fail. It should be noted that (!nolink [appl_find]) is case-sensitive,
so normally the value MUST be all upper case. It would not be wise
to convert the name to upper case, however, as case-sensitive file
systems may be used under MiNT or MagiC.

If the viewer has not yet sent its XAcc-identification (the ACC_ID
message), the application does this now. This may be the case if the
main application does not support the XAcc protocol.

If no viewer is found, the application should check the extended name
(introduced in version two of the XAcc protocol) of all applications
and accessories that have sent XAcc-identification messages for the
string '2View' (this is the application type 'viewer') or the string
'NView' (this is the generic type 'viewer'). If either of these
strings is found, then the application/accessory in question supports
the View protocol and may be used as a viewer. As in the case of the
environment variables, the case of '2View' and 'NView' is significant.

If there is no viewer in memory but one of these environmental variables (or
the cookie) was found, the application can try to load the viewer itself (using
the pathname given in the variable). Please note that wildcards may be used in
the extension of the viewer (a view-accessory could be named 'XXX.ACC' or
'XXX.ACX'). If the 'View' environmental variable was found, the viewer may be
started as an accessory as well using Chameleon or MultiTOS. As a consequence of
this, the viewer specified in the 'View' environmental variable must be able to
run as both an application or an accessory. If the viewer cannot run as an
accessory, it should be specified using the 'SHSHOW' environmental variable.

Normally the user should use one of the enironmental variables ('View'
or 'SHSHOW'). These should be placed in the desktop environment, as
all applications started by the desktop will inherit its environment.
This can be done with special programs (ENVIRON.PRG, JCNBOOT.PRG) or,
if MiNT is (!nolink [installed]), by placing the following line in MINT.CNF:

  setenv View C:\GEM_VIEW\GEMVIEW.APP

  and/or

  setenv SHSHOW C:\GEM_VIEW\GEMSHOW.PRG

Using MagiC the environment can be set by putting a '#_ENV' - line in
the MAGX.INF file, like the following:

  (!nolink [#_ENV]) View=F:\SHOW_IMG\SHOW_IMG.PRG 

  The cookie should no longer be used.

!end_node

!begin_node What kinds of files can be displayed?

The XAcc Extended name of the viewer should contain an entry of the form
'X.(!nolink [ext])' for every supported file format, where '(!nolink [ext])'
may be one of the following:

!begin_verbatim
  X.ART      - Art-Director
  X.ASC      - ASCII
    Paragraphs end with carriage return, and lines may end
##6# WAR: Parargraphs
    with a linefeed.
  X.B&W      - Imagelab image
  X.BLK      - GFA bit-block
    There is a three-WORD header: width minus one, height
    minus one, planes.
  X.BMP      - OS/2 bitmap, MS-Windows bitmap
  X.CFN      - Calamus font
  X.CRG      - Calamus raster
  X.CTX      - Calamus text
  X.CVG      - Calamus vector
  X.DOC      - 1stWord document
  X.DOO      - Doodle Mono
  X.ESM      - Enhanced Simplex
  X.FNT      - GDOS font (and nothing else!)
  X.GEM      - GEM-metafile
  X.GIF      - GIF image
  X.GVW      - GEM-View internal format
    Used by GEM-View internally and should not be in this
    list! (Hi, Dieter!)
  //X.HEX    - Hex-Dump
    This is obsolete.  It is now called 'XDump'
  X.IFF      - IFF-file
    The .IFF format in general! This should be present if any
    IFF-filetypes are supported.
  X.IFF.ILBM - IFF InterLeavedBitMap
  X.IFF.type - Other IFF-filetypes
  X.IMC      - Signum!2 image
  X.IMG      - GEM-image, XIMG
  X.JPG      - JPEG image
  X.MAC      - MacPaint image
  X.NEO      - Neochrome image
  X.OUT      - The GEM 'OUT' file format
    SEE:  v_alpha_text
  X.PAC      - STAD image
  X.PC[123]  - Degas compressed Image
  X.PCX      - PC Paintbrush
  X.P[BGP]M  - Portable Bitmap
  X.PIC      - Screen-dump (current resolution)
  X.PI[123]  - Degas uncompressed image
  X.RLE      - MS-Windows bitmap
  X.RSC      - GEM Resource file
  X.RTF      - Rich Text Format
  X.SDO      - Signum!2 document
  X.SDK      - Signum!3 document
  X.SNP      - Becker Snap-shot
    This has a three-WORD header: width, height, planes.
  X.SP[CU]   - Spectrum 512 image
  X.SUN      - Sun raster file
  X.TGA      - Targa image
  X.TIF      - TIFF image
  X.TN[123Y] - Tiny image
  X.TXT      - ASCII
    Lines end with a carriage return and a linefeed.  It would
    be nice if a single linefeed (Unix) or a single CR (Macintosh)
    would also be accepted.
  X.XBM      - X-Bitmap file

  XDump      - Hex-dump
    This is not an extension, but means that the viewer is
    able to show files as hexadecimal dumps.
!end_verbatim
(!B)Note:(!b) [abc] means one of the characters 'a', 'b', or 'c' and not the
string '[abc]'.

All other entries starting with 'X.' are reserved for future versions!
If you would like to add other formats, please contact Peter Seitz. It
would be wise if the entries are unique.

I recommend the support of X.IMG, X.(!nolink [GEM]) and X.OUT, as these are the
standard formats for (!nolink [GEM]) data-exchanges!

It should be noted that the file formats listed here that an application
supports could be a clue as to which file formats the application will accept
using the Drag&Drop protocol.
!end_node

!begin_node How can I tell the viewer what is to be shown?

Because of the XAcc2 protocol, the application knows which message-
groups are supported and these messages may be used for communication
if the application has the data already in memory (and not within a
file).

Use the (!link [VIEW_xxx messages][The VIEW_XXX messages]) (discussed below) when the data to be
viewed is contained in a file. With these messages the application
has extensive (!nolink [control]) over what is happening. These messages may
be used if, and (!B)only(!b) if, the strings '2View' or 'NView' are found
in the viewer's Extended XAcc name. This should normally be the case,
though.

This may be a problem if the viewer has been started by the application. In
this case I would suggest to try to send the messages and see what happens. If
the viewer does not support them, no reaction is given (as unknown messages
should be ignored!). Otherwise, the viewer will send a response.

The viewer is (!B)strongly(!b) recommended to support the VA_START message!
Of course this has to be tested in its protostatus (if possible, see above).

There is no explicit support of the Drag&Drop protocol, as it was mainly a
MiNT-specific extension (though it is included in MultiTOS and later in MagiC),
but programs running under MiNT should understand this protocol!

All other protocols, of course, may be used to communicate with the
viewer (as long as they provide some method to determine whether or
not they are supported).

(!I)Please(!i) keep in mind that pointers to strings in (!nolink [AES]) messages have to
point to (!nolink [global])-readable memory (if running in an environment with
memory protection)!
!end_node

!begin_node What does the viewer do?

When the viewer is started, it should check the command line for a
list of filenames to view. To be consistent with the direction that
the Atari is moving, the viewer should support the ARGV argument-
passing scheme developed by Atari.

The viewer should support the XAcc protocol, and answer XAcc protocol
messages.

The viewer should use the [Alternate] + [X] key combination to send
data using the XAcc protocol messages.

If the viewer receives the VA_START message, it should determine the
type of the file and whether or not the type is supported by itself.
The viewer does not have to send a reply to this message. If a reply
is needed, the application should send the message to the viewer using
the VIEW_FILE message.
!end_node
!end_node


!begin_node The VIEW_XXX messages

This is a description of the View protocol messages. In contrast to to
the VA_START and XAcc messages, these messages provide more refined
(!nolink [control]) of what happens to the viewed file.

Please remember that these messages may be used if, and (!B)only(!b) if, the
strings '2View' or 'NView' are found in the viewer's Extended XAcc
name as described above.

In general, there are four messages; VIEW_FILE, which may be sent to
the viewer, and VIEW_FAILED, VIEW_OPEN and VIEW_CLOSED that are used
to inform the application of what has happened to its file.

The viewer is expected to answer (!B)every(!b) (!nolink [VIEW_FILE]) message it receives.
At the very least, it should send a VIEW_FAILED(VIEWERR_ERROR) message
(see below). However, if the viewer does not send an answer and the
application expects one, the application should recover by using a
timeout value (ten seconds should be sufficient).

It is possible for the viewer to send other messages (for example
AV_ACCWINDOPEN) before answering the VIEW_FILE message!

(!B)Note:(!b) All strings are NULL-terminated (as in the 'C' programming
language).

!begin_node View a file

The VIEW_FILE message is used by the application to inform the viewer
that a file is to be displayed.

!begin_verbatim
msg[0]   = VIEW_FILE
msg[3/4] = filename // Must be global-readable (due to MiNT's memory 
                    // protection)!
msg[5/6] = 0        // Reserved!
msg[7]   = 0        // Zero = new file, see below!
!end_verbatim
Notes about (!I)filename(!i)(9.10.1993)::
!begin_itemize
!item If (!I)filename(!i) ends with a slash/backslash, or (!I)filename(!i) is a
     directory, the file-selector should be opened with (!I)filename(!i) as
     the current path.

!item If the terminating byte (0) of (!I)filename(!i) is followed by another
     string starting with an 'X' (0x58), this string gives the file
     type that (!I)filename(!i) should be displayed as (using the strings
     from 'What kinds of files can be displayed?' as a guide) if
     possible. This could be used to show hex-dumps ('XDump').

!end_itemize
This message is always answered by the viewer:

If the file could not be displayed, respond with the VIEW_FAILED message:
!begin_verbatim
retmsg[0]   = VIEW_FAILED
retmsg[3/4] = msg[3/4]  // Filename (same pointer!)
retmsg[5]   = errcode   // See below.
retmsg[6]   = 0         // Reserved!
retmsg[7]   = msg[7]    // 0 or window identification.
!end_verbatim

(!I)filename(!i) should (!B)always(!b) be the pointer received in (!nolink [VIEW_FILE]), as
only this way can the sender recognize which file was meant in case
msg[7] is zero (and - of course - no new memory has to be allocated.

The (!I)errcode(!i) variable may be a (!nolink [GEMDOS]) error-code (<0) or one of the
following:
!begin_verbatim
VIEWERR_ERROR   - The error is unspecified
VIEWERR_SIZE    - The file is too large, or the wrong size
VIEWERR_COLOR   - Unsupported resolution or color
VIEWERR_WID     - Wrong window identification
VIEWERR_MEM     - Not enough memory
!end_verbatim

It is expected that the viewer informs the user about the error (by
printing a message or displaying an alert box), since it will know
what the problem is much better than the application.

If the file has been displayed, but (!B)no(!b) further communication is
possible, the viewer sends the VIEW_OPEN message:
!begin_verbatim
retmsg[0]   = VIEW_OPEN
retmsg[3/4] = msg[3/4]          // Filename (the recieved pointer)
retmsg[5]   = viewprot_version  // Currently 0
retmsg[6]   = 0                 // Reserved!
retmsg[7]   = 0                 // 0 = no further communication!
!end_verbatim

If the file has been displayed, and (!link [further communication][Further communication])
is possible, the viewer sends the VIEW_OPEN message:
!begin_verbatim
retmsg[0]   = VIEW_OPEN
retmsg[3/4] = msg[3/4]          // Filename (the recieved pointer)
retmsg[5]   = viewprot_version  // Currently 0
retmsg[6]   = 0                 // Reserved!
retmsg[7]   = wid               // Window ID (non-zero!)
!end_verbatim
The window identification (!I)wid(!i) refers to the (!nolink [AES]) identification of
the window the file is being displayed in. This seems to be a unique
number representing the file, which is used in further communication
as an identifier.

The currently defined (!I)viewprot_version(!i) is 0.
!end_node


!begin_node Further communication

Once a file is displayed (in a window) and the viewer has returned a
non-zero window identification in msg[7], both the application and the
viewer may send each other messages refering to this file/window.

The 'msg[7]' variable will (!B)always(!b) contain the (non-zero) window
identification as an identifier! As this is supposed to be unique, the
'msg[3/4]' variable should (!B)not(!b) be used to identify the file (if the
'msg[7]' variable is not zero).

If the viewer receives a wrong window identification, it replies by
sending a VIEW_FAILED message:
!begin_verbatim
retmsg[0]   = VIEW_FAILED
retmsg[3/4] = msg[3/4]
retmsg[5]   = VIEWERR_WID
retmsg[6]   = 0
retmsg[7]   = msg[7]    // The wrong window identification.
!end_verbatim

The application receiving this message must (!B)not(!b) use this window
identification again, since the case may be that the viewer simply
did not send VIEW_CLOSED(wid).

The application can perform some operations on the file being viewed:
!begin_itemize
!item The window should be closed (and the memory used by the file freed):
!begin_verbatim
msg[0]   = VIEW_FILE
msg[3/4] = NULL         // Remove File
msg[5/6] = 0
msg[7]   = wid          // This (obviously) cannot be 0.
!end_verbatim

!item If the application knows that the file has been changed, or
     wants another file to be displayed in the same window, it can
     send the following message:
!begin_verbatim
msg[0]   = VIEW_FILE
msg[3/4] = filename     // This may be different.
msg[5/6] = 0
msg[7]   = wid          // The identification of the window.
!end_verbatim
On the other side, the viewer should inform the application of what is
happening to its file:

!item If the window is closed (the user closed it or the viewer 
      received AC_CLOSE or (!nolink [VIEW_FILE])(NULL, wid)), then the viewer should send 
      the following message:
!begin_verbatim
msg[0]   = VIEW_CLOSED
msg[3/4] = filename     // This may be NULL and should be ignored!
msg[5/6] = 0
msg[7]   = wid
!end_verbatim
The (!I)filename(!i) should be the one from the (!nolink [VIEW_FILE]) message,
otherwise it may be NULL, as no new global memory should be allocated.

!item If the window was closed due to an error, the (!nolink [VIEW_FAILED]) message 
     may be sent instead:
!begin_verbatim
msg[0]   = VIEW_FAILED
msg[3/4] = filename     // This may be NULL and should be ignored!
msg[5]   = errcode      // See above.
msg[6]   = 0
msg[7]   = wid
!end_verbatim
If the viewer does not have the ability to store the identification of the
application, it may not inform the application when a window was closed without
a message from the application. This is very easy to implement, but may lead to
unexpected results. Please send your experiences to Peter Seitz (the addresses
he can be contacted at are shown above).
!end_itemize

!end_node


!begin_node View data from memory

In Version 1.04 of the View protocol a new message ((!nolink [VIEW_DATA])) has
been added, which is used to view data that has already been read
into memory.

To indicate the support of this new message, the string 'XViewData'
must be within the viewer's Extended XAcc name.
!begin_verbatim
msg[0]   = VIEW_DATA
msg[3/4] = data     // Pointer to data, incl. header (see below)
msg[5/6] = length   // Total length of header + data
msg[7]   = wid      // Same as with VIEW_FILE (see above)
!end_verbatim
where (!I)data(!i) points to:
!begin_verbatim
LONG  type;         // eg '.IMG'
WORD  head_length;  // Offset to beginning of data, word alligned!
CHAR[]  name;       // 0-terminated name of variable length
!end_verbatim
If the (!I)type(!i) is 0, the viewer should try to figure it out itself.
Other possible value for (!I)type(!i) are all file-types listed in
'What kinds of files can be displayed?' but without the 'X' at the
beginning (e.g. 'Dump' means that starting at '(!I)data(!i) + (!I)head_length(!i)',
'(!I)length - head_length(!i)' bytes should be displayed as a hex-dump).

Please note that:
!begin_itemize !compressed
!item (!I)data(!i) has to point to an even adress,
!item (!I)data(!i) has to point to (!nolink [global]) readable memory,
!item (!I)head_length(!i) is even,
!item the data of the file is found at (!I)data(!i) + (!I)head_length(!i) and is in
    the same form, as it would be in a file of type (!I)type.(!i)
!end_itemize

The viewer receiving (!nolink [VIEW_DATA]) answers the same way as VIEW_FILE,
but (!I)filename(!i) (= msg[3/4]) should be set to the value of (!I)data.(!i) The
application (!B)must not(!b) free the memory pointed to by (!I)data(!i) before
receiving the answer from the viewer; in case of a timeout it should
ask the user what to do.
!end_node
!end_node



!begin_node The View protocol messages

!label View protocol, The messages
!label VIEW_FILE
!label VIEW_FAILED 
!label VIEW_OPEN
!label VIEW_CLOSED
!label VIEW_DATA
!label VIEW_GETMFDB
!label VIEW_SETMFDB
!label VIEW_MFDB
!label VIEWERR_ERROR
!label VIEWERR_SIZE
!label VIEWERR_COLOR
!label VIEWERR_WID
!label VIEWERR_MEM
At last, the definitions for the messages:
!begin_verbatim

#define VIEW_FILE    0x5600
#define VIEW_FAILED  0x5601
#define VIEW_OPEN    0x5602
#define VIEW_CLOSED  0x5603
#define VIEW_DATA    0x5604
#define VIEW_GETMFDB 0x5610
#define VIEW_SETMFDB 0x5611
#define VIEW_MFDB    0x5612

#define VIEWERR_ERROR 0
#define VIEWERR_SIZE  1
#define VIEWERR_COLOR 2
#define VIEWERR_WID   3
#define VIEWERR_MEM   4

// 0x56xx = 'V' as in 'View'!
!end_verbatim

All other message values ranging from 0x5600 to 0x56FF are reserved
for future extensions of the View protocol and should be ignored for now.

!end_node
!end_node

