!iflang [english]

!begin_node Document History protocol
!html_name proto_dhst
!label Protocol, Document History
!label Protocol, DHST
!label DHST

The Document (!nolink [History]) protocol (DHST) serves to provide a (!nolink [global]) list
of the last-used documents, similar to the Recall menu in Texel.
(!I)Start-Me-Up(!i) makes use of this by enabling files to be retrieved from
just one place.

Here is a short version of the structure in C-notation:
!label DHST_ADD
!label DHST_ACK
!begin_verbatim
 #define DHST_ADD 0xdadd
 #define DHST_ACK 0xdade

typedef struct
{
   int8_t *appname,
          *apppath,
          *docname,
          *docpath;
} DHSTINFO;
!end_verbatim

Every time the user opens a file, it searches the application for the
cookie 'DHST'. The (!nolink [AES]) ID of the DHST-Server informs other programs
where they should send DHST messages using the DHST_ADD message. The
application then sends the information down to the (!B)(!nolink [global])(!b) DHSTINFO-
structure and adds the corresponding information depending upon:

!begin_verbatim
 appname:     Name of the application
              (e.g. "Texel")

 apppath:     Absolute path of the application
              (e.g. "c:\program\texel.app")

 docname:     Name of the document
              (e.g. "balmer.txl")

 docpath:     Absolute path of the document
              (e.g. "d:\Data\balmer.txl")
!end_verbatim

Then the DHST-Server sends the following message:
 
!begin_verbatim
 msg[0]    DHST_ADD (0xdadd)
 msg[1]    ap_id
 msg[2]    0
 msg[3]    and
 msg[4]    Pointer to DHSTINFO-structure (how DHST_ADD passed)
 msg[5]    0
 msg[6]    0
 msg[7]    0
!end_verbatim

When an answer is received, the application sends the following
message:

!begin_verbatim
 msg[0]    DHST_ACK (0xdade)
 msg[1]    ap_id
 msg[2]    0
 msg[3]    and
 msg[4]    Pointer to DHSTINFO structure (how passed with DHST_ADD)
 msg[5]    0
 msg[6]    0
 msg[7]    0=error(s), else: OK
!end_verbatim

!end_node

!else

!begin_node Document-History-Protokoll
!html_name proto_dhst
!label Protokoll, Document-History-Protokoll
!label Protokoll, DHST
!label DHST

Das Document-(!nolink [History])-(DHST-) Protokoll dient dazu, eine globale Liste
der zuletzt benutzten Dokumente zu verwalten (Ñhnlich dem Abruf-MenÅ
in z.B. Texel) und an einer einheitlichen Stelle (hier: Start-Me-Up-
MenÅ) schnell abrufbar zu machen.

Dazu ein kurzer Auszug der Struktur in C-Notation:
!label DHST_ADD
!label DHST_ACK
!begin_verbatim
 #define DHST_ADD 0xdadd
 #define DHST_ACK 0xdade

typedef struct
{
   int8_t *appname,
          *apppath,
          *docname,
          *docpath;
} DHSTINFO;
!end_verbatim

Jedesmal wenn der Anwender eine Datei îffnet, sucht die Applikation
nach dem Cookie 'DHST'. Ist dieser vorhanden, gibt das untere Word des
Cookie-Wertes die (!nolink [AES])-ID des DHST-Servers an, an den die Nachricht
DHST_ADD geschickt wird. Die Applikation legt also im (!B)globalen(!b) Spei-
cher eine DHSTINFO-Struktur an und fÅllt sie entsprechend auf:

!begin_verbatim
 appname:     Name der Applikation
              (z.B. "Texel")

 apppath:     absoluter Pfad der Applikation
              (z.B. "c:\program\texel.app")

 docname:     Name des Dokuments
              (z.B. "balmer.txl")

 docpath:     absoluter Pfad des Dokuments
              (z.B. "d:\daten\balmer.txl")
!end_verbatim

Dann schickt sie dem DHST-Server folgende Nachricht:

!begin_verbatim
 msg[0]    DHST_ADD (0xdadd)
 msg[1]    ap_id der Anwendung
 msg[2]    0
 msg[3]    und
 msg[4]    Pointer auf DHSTINFO-Struktur
 msg[5]    0
 msg[6]    0
 msg[7]    0
!end_verbatim


Als Antwort erhÑlt die Applikation folgende Message, mit der sie den
globalen Speicher wieder freigeben kann:


!begin_verbatim
 msg[0]    DHST_ACK (0xdade)
 msg[1]    ap_id des DHST-Servers
 msg[2]    0
 msg[3]    and
 msg[4]    Pointer auf DHSTINFO-Struktur (wie bei DHST_ADD Åbergeben)
 msg[5]    0
 msg[6]    0
 msg[7]    0=Fehler, sonst: OK
!end_verbatim

In der ST-Computer 10/98 findet sich ein ausfÅhrlicher Artikel zu
diesem Thema.
!end_node

!endif
