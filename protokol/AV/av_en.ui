# Gemini      <> AV-Server
# Venus       <> server
# accessory   <> client
# application

!begin_node AV protocol
!html_name proto_av
!label Protocol, AV
!label VA protocol

The AV protocol ((!B)A(!b)ccessory-(!B)V(!b)enus) was developed by (!I)Stefan Eissing(!i)
and used for the first time in the alternative desktop (!I)Gemini.(!i) Since
then however this protocol has been supported in many further shells
(Ease, Jinnee, MagXDesk, Thing, ...).

This section describes the version of the protocol from the Gemini
distribution of 29th January 1995 (Gemini 1.a). All references to
'Venus' in the following can be substituted with 'Client' or 'Server'
as appropriate when using other shells.

The communication between two processes takes place with AV protocol
via the exchange of (extended) (!nolink [AES messages]), which can be allocated
to one of the following categories:

!begin_itemize !compressed
!item AV functions (Client -> Server)
!item VA functions (Server -> Client)
!end_itemize

(!B)Warning:(!b) Here one must point out that with a view to future operating
system versions, memory blocks used for communication between various
programs, or allocated via pointers, have to be (!nolink [global]) (Mxalloc
function with Global flag set). Otherwise memory protection violations
would arise on computers with PMMU (e.g. Atari TT030 or Falcon030).

If paths or filenames are to be included in messages, then one must
always quote the (!I)absolute(!i) path (i.e. including the drive) and the
drive letters (!I)must(!i) be in upper case. Paths should always end with a
backslash!

With an AV_PROTOKOLL call, each application can inquire which messages
are unnderstood (not all shells support the complete protocol). It
would be nice if other programs too would react to this protocol. At
least (!nolink [AV_SENDKEY]) is certainly easy to implement and is the only method
by which keypresses can be simulated via messages.

Under normal (!nolink [TOS]), a desk accessory that has received an AC_CLOSE
message from the (!nolink [AES]) inquires of the application (with ID) 0 via
(!nolink [AV_PROTOKOLL]) whether it has understood this. In a multitasking
environment (MultiTOS, MiNT/(!nolink [N.AES]) or MagiC) the program need no
longer have the ID 0; besides, there will be (hardly) any (!nolink [AC_CLOSE])
messages any more. In addition, not just desk accessories but also
normal programs will want to communicate with the AV-Server. So what
do we do?

If more than one main application can exist, then the program or the
desk accessory should try to extablish contact with GEMINI. After all,
the ID can be obtained with appl_find. If this fails, then one can
still search for AVSERVER or the contents of the ((!nolink [AES])) nnvironmental
variable AVSERVER. The latter possibility in particular permits easy
configuration from the outside. The new versions of the library VAFUNC
by (!I)Stephan Gerle(!i) (available in well-sorted mailboxes) proceed in
almost the same way.

See also: Messages ~ Drag&Drop protocol ~ OLGA protocol


!begin_node AV protocol, Quoting in
!label Quoting in AV protocol

Quoting in AV protocol means that filenames can optionally be enclosed
in single quote-marks (e.g. 'name'). However, this is permitted only
if both parties (Server and Client) are of the same mind, i.e. both
understand it.

So why should one want to do this and how does it work? Let us assume
that the Server sends a filename to the application which contains a
space. An application that does (!I)not(!i) understand quoting will take this
as (!I)two(!i) filenames having been passed instead of one, since normally
spaces are used to separate filenames. But if the application does
understand quoting (bit 4 in its protocol status is set), then the
Server will enclose the filename with 's and the application will
recognize that the space belongs to the filename. The same applies for
filenames that are sent by an application to a Server, of course.

The question remains of how one sends single quote-marks. Well, such
characters forming part of the filename are simply doubled up. So, for
instance, Zorro''s hypertext will be passed as 'Zorro''s hypertext'. So
in such cases the same method is used as for the (!nolink [Drag&Drop protocol]).

See also: (!nl)
AV_PROTOKOLL ~ VA_ACC_QUOTING(a) ~ VA_SERVER_QUOTING(a) ~
VA_PROTOSTATUS ~ Drag&Drop protocol
!end_node


!begin_node AV functions

These messages are sent by an application to (!I)Gemini(!i) or a present
AV-Server:

!begin_xlist [ù AV_DRAG_ON_WINDOW] !compressed
!item [ù AV_ACCWINDCLOSED]     Application has closed a window
!item [ù AV_ACCWINDOPEN]       Application has opened a window
!item [ù AV_ASKCONFONT]        Obtain the font for the console
!item [ù AV_ASKFILEFONT]       Obtain the font for filenames
!item [ù AV_ASKOBJECT]         Obtain the currently selected object
!item [ù AV_COPY_DRAGGED]      Provide information about a copy action
!item [ù AV_COPYFILE]          Copy/move files or folders
!item [ù AV_DELFILE]           Delete files or folders
!item [ù AV_DRAG_ON_WINDOW]    Provide information about moved objects
!item [ù AV_EXIT]              Unlink from the (!nolink [AV protocol])
!item [ù AV_FILEINFO]          Display file or folder information
!item [ù AV_GETSTATUS]         Obtain current status
!item [ù AV_OPENCONSOLE]       Open the console window
!item [ù AV_OPENWIND]          Open a file window
!item [ù AV_PATH_UPDATE]       Contents of a directory was altered
!item [ù AV_PROTOKOLL]         Provide information about supported messages
!item [ù AV_SENDCLICK]         Send mouse event
!item [ù AV_SENDKEY]           Send keyboard event
!item [ù AV_SETWINDPOS]        Set position for directory window
!item [ù AV_STARTED]           Reply to a VA_START message
!item [ù AV_STARTPROG]         Start an application or file
!item [ù AV_STATUS]            Set current status
!item [ù AV_VIEW]              Load a viewer for a given filetype
!item [ù AV_WHAT_IZIT]         Information about position on the screen
!item [ù AV_XWIND]             Open a file windnow
!end_xlist

See also: VA functions ~  Messages



!begin_node AV_ACCWINDCLOSED

(!begin_liste) [Description:]
!item [Name:]
¯AV_ACCWINDCLOSED®
!item [Number:]
0x4726
!item [Description:]
An application informs the AV-Server that a window has been closed. This is
only necessary if it closed the window itself. If the window is closed due
to an AC_CLOSE message, the Server knows that all windows are closed.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! (!nolink [AES]) handle of the window
!end_table

!item [Group:]
AV functions
!item [See also:]
AV_ACCWINDOPEN  ~ AV protocol
(!ende_liste)
!end_node


!begin_node AV_ACCWINDOPEN

(!begin_liste) [Description:]
!item [Name:]
¯AV_ACCWINDOPEN®
!item [Number:]
0x4724
!item [Description:]
This message can be used by an application to inform the AV-Server about its
own (opened) window.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! (!nolink [AES]) handle of the opened window
!end_table

!item [Group:]
AV functions
!item [See also:]
AV_ACCWINDCLOSED ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_ASKCONFONT

(!begin_liste) [Description:]
!item [Name:]
¯AV_ASKCONFONT®
!item [Number:]
0x4714
!item [Description:]
With this message an application asks the AV-Server for the font currently set
for the console window.

!item [Group:]
AV functions
!item [See also:]
AV_ASKFILEFONT ~  VA_CONFONT  ~ VA_FILEFONT  ~ AV protocol
(!ende_liste)
!end_node


!begin_node AV_ASKFILEFONT

(!begin_liste) [Description:]
!item [Name:]
¯AV_ASKFILEFONT®
!item [Number:]
0x4712
!item [Description:]
Using this message the Client can request the current font used for filenames
in directory windows.

!item [Group:]
AV functions
!item [See also:]
AV_ASKCONFONT ~  VA_CONFONT ~  VA_FILEFONT ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_ASKOBJECT

(!begin_liste) [Description:]
!item [Name:]
¯AV_ASKOBJECT®
!item [Number:]
0x4716
!item [Description:]
Ask about the currently selected object(s). The name(s) of the selected object(s)
is (are) returned. If no object is selected, the string is empty.

If several objects are selected, their names are separated by spaces.

!item [Group:]
AV functions
!item [See also:]
VA_OBJECT ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_COPY_DRAGGED

(!begin_liste) [Description:]
!item [Name:]
¯AV_COPY_DRAGGED®
!item [Number:]
0x4728
!item [Description:]
An application tells the AV-Server that the objects that have been dragged to
its window should be copied. This may be the case, e.g. if objects are dragged
to the (!I)TreeView(!i) window.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! The keyboard state ([Alternate], [Control], [Shift])
WORD 4+5 !! Pointer to a string which must contain the name of the destination object This HAS to be a pathname!
!end_table

This message may only be used as reply to a (!nolink [VA_DRAGACCWIND]) message.

!item [Group:]
AV functions
!item [See also:]
VA_DRAGACCWIND ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_COPYFILE

(!begin_liste) [Description:]
!item [Name:]
¯AV_COPYFILE®
!item [Number:]
0x4755
!item [Description:]
This (!nolink [command]) directs the AV-Server to copy or move certain file(s)
or folder(s).

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the source file/s and folder/s
WORD 5+6 !! Pointer to the destination folder
WORD 7 !! Various flags:
~ !! Bit 0 = Delete original (= move)
~ !! Bit 1 = Rename copy
~ !! Bit 2 = Overwrite destination without comment
~ !! Bit 3 = Only create symbolic links of
~ !! ~~~~~~~~sources (bit 0 in that case
~ !! ~~~~~~~~has no meaning)
~ !! Bit 4-15 = Reserved, always 0
!end_table

(!B)Note:(!b) All further bits are reserved for future purposes.

Multiple files must be separated by space characters. Folders must include a
trailing backslash '\' character!

!item [Group:]
AV functions
!item [See also:]
VA_FILECOPIED ~  AV protocol
(!ende_liste)

!end_node



!begin_node AV_DELFILE

(!begin_liste) [Description:]
!item [Name:]
¯AV_DELFILE®
!item [Number:]
0x4757
!item [Description:]
This (!nolink [command]) directs the AV-Server to delete certain file(s) or
folder(s).

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the file(s)/folder(s) to be deleted
WORD 5-7 !! Reserved, always 0
!end_table

Multiple files or folders must be separated by space characters. Folders must
include a trailing backslash '\' character!

!item [Group:]
AV functions
!item [See also:]
VA_FILEDELETED ~ AV protocol
(!ende_liste)
!end_node


!begin_node AV_DRAG_ON_WINDOW

(!begin_liste) [Description:]
!item [Name:]
¯AV_DRAG_ON_WINDOW®
!item [Number:]
0x4734
!item [Description:]
An application tells the AV-Server that objects have been dragged onto one of
its windows inquired for with AV_WHATIZIT.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! X-position to which the mouse was dragged
WORD 4 !! Y-position to which the mouse was dragged
WORD 5 !! Keyboard state ([Alternate], [Control], [Shift])
WORD 6+7 !! Pointer to a string that contain the names of the objects
!end_table

The names are the names of files, folders or drives; multiple names are
separated by a space character. Names of folders or drives must include a
trailing backslash '\' character!

!item [Group:]
AV functions
!item [See also:]
VA_DRAG_COMPLETE ~  VA_DRAGACCWIND ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_EXIT

(!begin_liste) [Description:]
!item [Name:]
¯AV_EXIT®
!item [Number:]
0x4736
!item [Description:]
An application tells the AV-Server that it doesn't link into the protocol
any longer.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! (!nolink [AES]) id of the application
!end_table

This message must be used, before terminating a program if the program did
use AV_PROTOKOLL!
!item [Group:]
AV functions
!item [See also:]
appl_init ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_FILEINFO

(!begin_liste) [Description:]
!item [Name:]
¯AV_FILEINFO®
!item [Number:]
0x4753
!item [Description:]
This (!nolink [command]) directs the AV-Server to display an information dialog
for a given file or folder.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to file or folder name
WORD 5-7 !! Reserved, always 0
!end_table

Multiple files/folders may be separated using space characters. Folders must
include a trailing backslash '\' character!

!item [Group:]
AV functions
!item [See also:]
VA_FILECHANGED ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_GETSTATUS

(!begin_liste) [Description:]
!item [Name:]
¯AV_GETSTATUS®
!item [Number:]
0x4703
!item [Description:]
An accessory asks Venus for the current status that it has given to Venus via
the (!nolink [AV_STATUS]) message.

!item [Group:]
AV functions
!item [See also:]
AV_STATUS ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_OPENCONSOLE

(!begin_liste) [Description:]
!item [Name:]
¯AV_OPENCONSOLE®
!item [Number:]
0x4718
!item [Description:]
Venus should open the console window. If it is open already, it will be topped.
This action is of use if a desk accessory is about to launch a (!nolink [TOS])
program using the (!I)system(!i) function.

(!B)Note:(!b) No (!nolink [GEM]) programs should be started by an accessory via
the (!I)system(!i) function! The message should only be used if the user
explicitly wants to, as otherwise it can quickly lead to confusion.

This message is only available in Gemini at present.

!item [Group:]
AV functions
!item [See also:]
AV_OPENWIND ~ AV_XWIND ~ VA_CONSOLEOPEN ~ VA_XOPEN ~ VA_WINDOPEN ~ AV_STARTPROG
(!ende_liste)
!end_node


!begin_node AV_OPENWIND

(!begin_liste) [Description:]
!item [Name:]
¯AV_OPENWIND®
!item [Number:]
0x4720
!item [Description:]
An application directs the AV-Server to open a file window.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the path for the window
WORD 5+6 !! Pointer to a string containing the wildcards for the files which should be displayed
!end_table

(!B)Note:(!b) This message should only be used when the reason is clearly evident to
the user.

!item [Group:]
AV functions
!item [See also:]
AV_OPENCONSOLE ~  AV_XWIND  ~ VA_CONSOLEOPEN ~  VA_WINDOPEN ~  VA_XOPEN
(!ende_liste)
!end_node


!begin_node AV_PATH_UPDATE

(!begin_liste) [Description:]
!item [Name:]
¯AV_PATH_UPDATE®
!item [Number:]
0x4730
!item [Description:]
A program/accessory tells the AV-Server that the contents of a folder has
been changed. The AV-Server redraws this folder if it is displayed in a
window, even if subdirectories are shown.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the complete (!) pathname
!end_table

The update of "C:\" for example results in redisplaying everything on
drive C:.

!item [Group:]
AV functions
!item [See also:]
AV_OPENWIND  ~ AV_XWIND ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_PROTOKOLL

(!begin_liste) [Description:]
!item [Name:]
¯AV_PROTOKOLL®
!item [Number:]
0x4700
!item [Description:]
This message should be used to ask an application or the AV-Server whether or
which messages are supported.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! Bit 0 = VA_SETSTATUS
~ !! Bit 1 = VA_START
~ !! Bit 2 = AV_STARTED
~ !! Bit 3 = VA_FONTCHANGED
~ !! Bit 4 = Provides & uses filename (!link [quoting][AV protocol, Quoting in])
~ !! Bit 5 = VA_PATH_UPDATE
~ !! Bit 6-15 = Reserved, always 0
WORD 4+5 !! Reserved, always 0
WORD 6+7 !! A pointer to the name of the desk
~        !! accessory/application for use with
~        !! appl_find (aligned to 8 characters
~        !! and terminated by a '\0' byte).
!end_table

!item [Group:]
AV functions
!item [See also:]
AV_STARTED ~ VA_FONTCHANGED ~ VA_SETSTATUS ~ VA_START
(!ende_liste)
!end_node


!begin_node AV_SENDCLICK

(!begin_liste) [Description:]
!item [Name:]
¯AV_SENDCLICK®
!item [Number:]
0x4709
!item [Description:]
An application sends a (!link [mouse event][evnt_multi]) to the AV-Server.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! ev_mmox
WORD 4 !! ev_mmoy
WORD 5 !! ev_mmobutton
WORD 6 !! ev_mmokstate
WORD 7 !! ev_mbreturn
!end_table


!item [Group:]
AV functions
!item [See also:]
evnt_button ~  evnt_multi
(!ende_liste)
!end_node

!begin_node AV_SENDKEY

(!begin_liste) [Description:]
!item [Name:]
¯AV_SENDKEY®
!item [Number:]
0x4710
!item [Description:]
Using this message a Client can send the AV-Server any key events it may not use for
itself.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! Keyboard state (ev_mmokstate)
WORD 4 !! Scan code of the pressed key (ev_mkreturn)
!end_table

As an unofficial extension ('CodeAlpha') there is a concept that allows ASCII
characters for which no scancode exists to be passed as well. For this one
passes 0 for the scancode, the desired ASCII value and in msg[5] the value
$5048 (the latter to indicate that msg[4] is indeed valid and that no
conversion via the scancode tables is required.

This message should always be supported If possible, as with its help
trans-application window cycling can be realised, for instance.

!item [Group:]
AV functions
!item [See also:]
evnt_keybd  ~ evnt_multi ~  (!link [Scancode table][The scancode])
(!ende_liste)
!end_node


!begin_node AV_SETWINDPOS

(!begin_liste) [Description:]
!item [Name:]
¯AV_SETWINDPOS®
!item [Number:]
0x4759
!item [Description:]
With this the Client can be informed of the position and size of the next
directory window to be opened by the AV-Server (with AV_XWIND or AV_OPENWIND).

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! X-position
WORD 4 !! Y-position
WORD 5 !! Width of window
WORD 6 !! Height of window
WORD 7 !! Reserved, always 0
!end_table

The coordinates are given in (!I)absolute(!i) coordinates. If AV_XWIND tops an
existing window rather than opening a new window, this message has no effect!

!item [Group:]
AV functions
!item [See also:]
AV_OPENWIND ~  AV_XWIND
(!ende_liste)
!end_node


!begin_node AV_STARTED

(!begin_liste) [Description:]
!item [Name:]
¯AV_STARTED®
!item [Number:]
0x4738
!item [Description:]
A Client informs the AV-Server it has received and understood the VA_START
message and the memory reserved for the command line can be released.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the command line containing path or filename received by VA_START; can also be NULL.
!end_table

To recognize which (!nolink [VA_START]) message is being dealt with, the values
of (!nolink [VA_START]) are returned.

!item [Group:]
AV functions
!item [See also:]
VA_START ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_STARTPROG

(!begin_liste) [Description:]
!item [Name:]
¯AV_STARTPROG®
!item [Number:]
0x4722
!item [Description:]
An application requests the AV-Server to start a program (or file).

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the program's name (with complete path!)
WORD 5+6 !! Pointer to the command line for the program (may be NULL)
WORD 7 !! Any 16-bit WORD, which will be returned by (!nolink [VA_PROGSTART])
!end_table

In Gemini the (!nolink [installed]) applications are also taken into account. This makes it
possible to specify a file for which a program is then searched for.
!item [Group:]
AV functions
!item [See also:]
VA_PROGSTART ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_STATUS

(!begin_liste) [Description:]
!item [Name:]
¯AV_STATUS®
!item [Number:]
0x4704
!item [Description:]
An accessory can give its current state to Venus, which will store it in the
INF-file and can be restored using AV_GETSTATUS. Before sending AV_STATUS it
(!I)must(!i) send AV_PROTOKOLL to Venus!

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! A pointer to a string, which must not contain any (!nolink [control]) characters and must not be longer than 256 characters; the pointer may be NULL
!end_table

The application must first have registered itself with the Server via
(!nolink [AV_PROTOKOLL]).

!item [Group:]
AV functions
!item [See also:]
AV_GETSTATUS ~ AV_PROTOKOLL ~ AV protocol
(!ende_liste)
!end_node


!begin_node AV_VIEW

(!begin_liste) [Description:]
!item [Name:]
¯AV_VIEW®
!item [Number:]
0x4751
!item [Description:]
The AV-Server calls the viewer for a specific file.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the name of the file to be displayed (only a single file is allowed!)
WORD 5 !! 0 = Calls the viewer
~ !! 1 = Calls the editor
WORD 6-7 !! Reserved, always 0
!end_table

(!B)Note:(!b) Only a (!I)single(!i) file may be specified. If no suitable viewer
is available, an error-message will be returned to the user.

!item [Group:]
AV functions
!item [See also:]
VA_VIEWED ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_WHAT_IZIT

(!begin_liste) [Description:]
!item [Name:]
¯AV_WHAT_IZIT®
!item [Number:]
0x4732
!item [Description:]
A Client requests details about what is located at a given position of the screen.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! X-coordinate
WORD 4 !! Y-coordinate
!end_table

The coordinates are the normal (!nolink [VDI]) coordinates (the origin is the
left upper corner of the screen).
!item [Group:]
AV functions
!item [See also:]
VA_THAT_IZIT ~  AV protocol
(!ende_liste)
!end_node


!begin_node AV_XWIND

(!begin_liste) [Description:]
!item [Name:]
¯AV_XWIND®
!item [Number:]
0x4740
!item [Description:]
Thing opens a directory window, similar to AV_OPENWIND except additional options
are available:

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the path for opening directories
WORD 5+6 !! Pointer to the mask (wildcard) for the available files
WORD 7 !! Bit-mask:
~ !! 0x0001 = Use current top window, if available
~ !! 0x0002 = Use wildcard for object selection
~ !! 0x0004 = Continue using existing window
~ !! All other bit must be set to zero.
!end_table

(!B)Note:(!b) This message should only be used when the reason is clearly
evident to the user.
!item [Group:]
AV functions
!item [See also:]
AV_OPENCONSOLE ~ AV_OPENWIND ~ VA_CONSOLEOPEN ~ VA_WINDOPEN ~ VA_XOPEN ~
AV protocol
(!ende_liste)
!end_node
!end_node


!begin_node VA functions

These messages are sent by (!I)Gemini(!i) or other present AV-Server to an
application:

!begin_xlist [ù VA_SERVER_QUOTING(a)] !compressed
!item [ù VA_ACC_QUOTING(a)]      Test accessory protocol status for quoting
!item [ù VA_CONFONT]             Convey font of the console
!item [ù VA_CONSOLEOPEN]         Convey whether the console window is open
!item [ù VA_COPY_COMPLETE]       Reply to AV_COPY
!item [ù VA_DRAGACCWIND]         Objects were dragged to application's window
!item [ù VA_DRAG_COMPLETE]       AV_DRAG_ON_WINDOW action is completed
!item [ù VA_FILECHANGED]         Reply to AV_FILEINFO.
!item [ù VA_FILECOPIED]          Reply to AV_COPYFILE.
!item [ù VA_FILEDELETED]         Reply to AV_DELFILE.
!item [ù VA_FILEFONT]            Convey font for file window
!item [ù VA_FONTCHANGED]         A set font has been changed
!item [ù VA_OBJECT]              Returns the names of the selected objects
!item [ù VA_PATH_UPDATE]         Contents of a directory have changed
!item [ù VA_PROGSTART]           Information about whether a program could be started
!item [ù VA_PROTOSTATUS]         Reply to AV_PROTOKOLL.
!item [ù VA_SERVER_QUOTING(a)]   Test Server protocol status for quoting
!item [ù VA_SETSTATUS]           Convey status of an application
!item [ù VA_START]               An application has been activated
!item [ù VA_THAT_IZIT]           Provides information about object at screen position
!item [ù VA_VIEWED]              Reply to AV_VIEW.
!item [ù VA_WINDOPEN]            Conveys whether the console window is open
!item [ù VA_XOPEN]               Conveys whether a window could be opened
!end_xlist

See also: AV functions


!begin_node VA_ACC_QUOTING(a)

This is a test of the protocol status of an accessory for quoting.

In C the test may be realized as a macro as follows:

!begin_verbatim
#define VA_ACC_QUOTING(a)   ((a) & 0x10)
!end_verbatim
!end_node


!begin_node VA_CONFONT

(!begin_liste) [Description:]
!item [Name:]
¯VA_CONFONT®
!item [Number:]
0x4715
!item [Description:]
Gives the currently selected font for the console window. Valid are:

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! Console font (ID)
WORD 4 !! Console font size (points)
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_ASKCONFONT ~ AV_ASKFILEFONT ~ VA_FILEFONT
(!ende_liste)
!end_node


!begin_node VA_CONSOLEOPEN

(!begin_liste) [Description:]
!item [Name:]
¯VA_CONSOLEOPEN®
!item [Number:]
0x4719
!item [Description:]
Returns the state of the console window (whether it has been topped or opened).
Valid are:

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! 0 = Not topped/opened
~ !! <> 0 = Is topped
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_OPENCONSOLE ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_COPY_COMPLETE

(!begin_liste) [Description:]
!item [Name:]
¯VA_COPY_COMPLETE®
!item [Number:]
0x4729
!item [Description:]
This message is a direct reply to AV_COPY_DRAGGED. Valid are:

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! State of the copying process
!end_table

!= 0 means that something really was copied or moved. This may be useful if a
window has to be redrawn.

!item [Group:]
VA functions
!item [See also:]
AV_COPY_DRAGGED ~  AV protocol
(!ende_liste)
!end_node


!begin_node VA_DRAGACCWIND

(!begin_liste) [Description:]
!item [Name:]
¯VA_DRAGACCWIND®
!item [Number:]
0x4725
!item [Description:]
The AV-Server (e.g. Thing) sends a message to the Client sharing the information
that one or more object/s has/have been dragged to its window that was
notified with AV_ACCWINDOPEN. Valid are:

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! (!nolink [AES]) handle of the window
WORD 4 !! X-position of the mouse
WORD 5 !! Y-position of the mousee
WORD 6+7 !! Pointer to a string containing the names of the objects.
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_ACCWINDOPEN  ~ AV_ACCWINDCLOSED  ~ AV_DRAG_ON_WINDOW
(!ende_liste)
!end_node


!begin_node VA_DRAG_COMPLETE

(!begin_liste) [Description:]
!item [Name:]
¯VA_DRAG_COMPLETE®
!item [Number:]
0x4735
!item [Description:]
Reply to AV_DRAG_ON_WINDOW message. The AV-Server informs an application that
the action that was triggered by AV_DRAG_ON_WINDOW has terminated.

!begin_xlist [Parameter]
!item [Parameter] Meaning
!item [WORD 3]
Status of the action

A value <> 0 means that something was really copied or moved; the application
may use this for building up a window anew
!end_xlist

The returned value corresponds to the one that is also returned for
VA_COPY_COMPLETE.
!item [Group:]
VA functions
!item [See also:]
AV_DRAG_ON_WINDOW  ~ VA_DRAGACCWIND ~  AV protocol
(!ende_liste)
!end_node


!begin_node VA_FILECHANGED

(!begin_liste) [Description:]
!item [Name:]
¯VA_FILECHANGED®
!item [Number:]
0x4754
!item [Description:]
Reply to AV_FILEINFO sent by the AV-Server to the Client.

!begin_xlist [Parameter]
!item [Parameter] Meaning
!item [WORD 3+4]
Pointer to the name of a file/folder, passed via (!nolink [AV_FILEINFO]),
which can naturally contain a new file/folder name

!item [WORD 5-7]
Reserved, always 0
!end_xlist

(!B)Note:(!b) One should heed that the user may have altered the name in
the dialog and therefore it is possible that the string reachable via words
3+4 will no longer match that of AV_FILEINFO.

!item [Group:]
VA functions
!item [See also:]
AV_FILEINFO ~  AV protocol
(!ende_liste)
!end_node


!begin_node VA_FILECOPIED

(!begin_liste) [Description:]
!item [Name:]
¯VA_FILECOPIED®
!item [Number:]
0x4756
!item [Description:]
Reply to AV_COPYFILE message sent by the AV-Server to the Client.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! 0 = Error
~      !! 1 = All OK
WORD 4-7 !! Reserved, always 0
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_COPYFILE ~  AV protocol
(!ende_liste)
!end_node


!begin_node VA_FILEDELETED

(!begin_liste) [Description:]
!item [Name:]
¯VA_FILEDELETED®
!item [Number:]
0x4758
!item [Description:]
Reply to AV_DELFILE from the AV-Server to the Client.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! 0 = Error
~      !! 1 = All OK
WORD 4-7 !! Reserved, always 0
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_DELFILE  ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_FILEFONT

(!begin_liste) [Description:]
!item [Name:]
¯VA_FILEFONT®
!item [Number:]
0x4713
!item [Description:]
The Server returns the ID and size (in points) of the current font used for
filenames in directory windows.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! ID of font (vst_font)
WORD 4 !! (!nolink [Size]) in points (vst_point)
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_ASKCONFONT ~ AV_ASKFILEFONT ~ VA_CONFONT
(!ende_liste)
!end_node


!begin_node VA_FONTCHANGED

(!begin_liste) [Description:]
!item [Name:]
¯VA_FONTCHANGED®
!item [Number:]
0x4739
!item [Description:]
The AV-Server informs an application that one of its set fonts has been
changed. Valid are:

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! ID of the font used for directories (vst_font)
WORD 4 !! (!nolink [Size]) in points for font used in directories (vst_point)
WORD 5 !! ID of the font used in the console window (vst_font)
WORD 6 !! (!nolink [Size]) in points for font used in the console window (vst_point)
!end_table

The message is sent to all applications that have previously enquired about a
font from the AV-Server.
!item [Group:]
VA functions
!item [See also:]
AV_ASKCONFONT ~ AV_ASKFILEFONT ~ VA_FILEFONT
(!ende_liste)
!end_node


!begin_node VA_OBJECT

(!begin_liste) [Description:]
!item [Name:]
¯VA_OBJECT®
!item [Number:]
0x4717
!item [Description:]
Return the currently selected object(s).

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to a command line with the name(s) of the selected object(s)
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_ASKOBJECT  ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_PATH_UPDATE

(!begin_liste) [Description:]
!item [Name:]
¯VA_PATH_UPDATE®
!item [Number:]
0x4760
!item [Description:]
With this message the AV-Server informs a Client that the contents of a directory
have changed.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the directory
WORD 5-7 !! Reserved, always 0
!end_table

The specified directory always includes a trailing backslash '\' character. The
Client has to first establish via AV_PROTOKOLL that the Server supports this
message, and informs the Server whenever it changes the contents of a directory
or subdirectory. The Client should then re-read all affected directories and
subdirectories, closing any subdirectories which no longer exist if necessary.

!item [Group:]
VA functions
!item [See also:]
AV_PROTOKOLL ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_PROGSTART

(!begin_liste) [Description:]
!item [Name:]
¯VA_PROGSTART®
!item [Number:]
0x4723
!item [Description:]
The AV-Server informs an application whether a specified program was started.


!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! ~0~ = Error
~      !! <>0 = Program started
WORD 4 !! Return code of the program (where available)
WORD 7 !! 16-bit WORD from AV_STARTPROG
!end_table

In general the application will receive a message immediately in case of error;
but if the program is started, then the application receives this message only
after the start of the program, since the routine which executes the Pexec can
no longer know that an application still has to get a message quickly. With
a (!nolink [GEM]) program one can recognize a success also from the AC_CLOSE
message.

The error recognition unfortunately is sub-optimal; furthermore the return value
does not indicate whether the program has run free of error.

!item [Group:]
VA functions
!item [See also:]
AV_STARTPROG ~ VA_START ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_PROTOSTATUS

(!begin_liste) [Description:]
!item [Name:]
¯VA_PROTOSTATUS®
!item [Number:]
0x4701
!item [Description:]
Tells the sender of AV_PROTOKOLL that the application knows something about the
VA protocol. The words 3-7 of the message buffer contain information about which
messages are understood.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! Bit 0 = AV_SENDKEY
~ !! Bit 1~ = AV_ASKFILEFONT
~ !! Bit 2~ = AV_ASKCONFONT, AV_OPENCONSOLE
~ !! Bit 3~ = AV_ASKOBJECT
~ !! Bit 4~ = AV_OPENWIND
~ !! Bit 5~ = AV_STARTPROG
~ !! Bit 6~ = AV_ACCWINDOPEN, AV_ACCWINDCLOSED
~ !! Bit 7~ = AV_STATUS, AV_GETSTATUS
~ !! Bit 8~ = AV_COPY_DRAGGED
~ !! Bit 9~ = AV_PATH_UPDATE, AV_WHAT_IZIT, AV_DRAG_ON_WINDOW
~ !! Bit 10 = AV_EXIT
~ !! Bit 11 = AV_XWIND
~ !! Bit 12 = VA_FONTCHANGED
~ !! Bit 13 = AV_STARTED
~ !! Bit 14 = (!link [Quoting of filenames][AV protocol, Quoting in]) is
~ !! ~~~~~~~~ understood and used
~ !! Bit 15 = AV_FILEINFO
WORD 4 !! Bit 0 = AV_COPYFILE
~ !! Bit 1 = AV_DELFILE
~ !! Bit 2 = AV_VIEW
~ !! Bit 3 = AV_SETWINDPOS
~ !! Bit 4 = Permits creation of symbolic links
~ !! ~     ~ with AV_COPYFILE
~ !! Bit 5 = AV_SENDCLICK
WORD 5 !! Reserved, always 0
WORD 6+7 !! Pointer to the program names of the Servers, prepared for appl_find (8 characters long and NULL-terminated).
!end_table

If a bit is set, the message (group) is supported. All other bits are reserved
for future use and should be set to zero (all unused bits of words 4 and 5 too).
!item [Group:]
VA functions
!item [See also:]
AV_PROTOKOLL ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_SERVER_QUOTING(a)

This is a test of the protocol status of a Server for quoting.

In C the test may be realized as a macro as follows:

!begin_verbatim
#define VA_SERVER_QUOTING(a)  ((a) & 0x40)
!end_verbatim
!end_node


!begin_node VA_SETSTATUS

(!begin_liste) [Description:]
!item [Name:]
¯VA_SETSTATUS®
!item [Number:]
0x4705
!item [Description:]
The AV-server tells an accessory about its stored state as a reply to AV_GETSTATUS.
The state can be set by the accessory.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! Pointer to the saved string or NULL if no information is available.
!end_table

The returned status can be set subsequently by the application.
!item [Group:]
VA functions
!item [See also:]
AV_GETSTATUS ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_START

(!begin_liste) [Description:]
!item [Name:]
¯VA_START®
!item [Number:]
0x4711
!item [Description:]
Using this message an AV-Server passes parameters to desktop accessories or
parallel running applications.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3+4 !! A pointer to the command line, which may be NULL. The command line contains paths or filenames.
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_STARTPROG ~ AV_STARTED ~ VA_PROGSTART
(!ende_liste)
!end_node


!begin_node VA_THAT_IZIT

(!begin_liste) [Description:]
!item [Name:]
¯VA_THAT_IZIT®
!item [Number:]
0x4733
!item [Description:]
The AV-Server tells an application on request what object is placed at a given
position on the screen.
!label VA_OB_UNKNOWN
!label VA_OB_TRASHCAN
!label VA_OB_SHREDDER
!label VA_OB_CLIPBOARD
!label VA_OB_FILE
!label VA_OB_FOLDER
!label VA_OB_DRIVE
!label VA_OB_WINDOW
!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! ID of the appropriate application
WORD 4 !! (!B)Object type:(!b)
~ !! VA_OB_UNKNOWN~~~(0) = Unknown
~ !! VA_OB_TRASHCAN~~(1) = Trash can
~ !! VA_OB_SHREDDER~~(2) = Shredder
~ !! VA_OB_CLIPBOARD~(3) = Clipboard
~ !! VA_OB_FILE~~~~~~(4) = File
~ !! VA_OB_FOLDER~~~~(5) = Folder
~ !! VA_OB_DRIVE~~~~~(6) = Drive
~ !! VA_OB_WINDOW~~~~(7) = Window
~ !! VA_OB_NOTEPAD~~~(8) = Notepad
~ !! VA_OB_NOTE~~~~~~(9) = Note

WORD 5+6 !! Pointer to the name of the object(s), or NULL if there was nothing.
!end_table

All other values are reserved for future purposes.
!item [Group:]
VA functions
!item [See also:]
AV_WHAT_IZIT ~  AV protocol
(!ende_liste)
!end_node


!begin_node VA_VIEWED

(!begin_liste) [Description:]
!item [Name:]
¯VA_VIEWED®
!item [Number:]
0x4752
!item [Description:]
Reply to AV_VIEW from the AV-Server to the Client.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! 0 = Error
~ !! 1 = All OK
WORD 4-7 !! Reserved, always 0
!end_table

The Server informs the Client whether the file will be displayed or not. The answer
is immediate and always sent out if an error occured. Otherwise, in a multi!-tasking
environment, the answer is received as soon as the viewer is topped (made active),
Under Single-(!nolink [TOS]) the answer is received after exiting the viewer, in the
case that the Server had not already been ended.

!item [Group:]
VA functions
!item [See also:]
AV_VIEW  ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_WINDOPEN

(!begin_liste) [Description:]
!item [Name:]
¯VA_WINDOPEN®
!item [Number:]
0x4721
!item [Description:]
Returns the state of the file window (see VA_CONSOLEOPEN).

!item [Group:]
VA functions

!item [See also:]
AV_OPENCONSOLE  ~ VA_CONSOLEOPEN  ~ AV protocol
(!ende_liste)
!end_node


!begin_node VA_XOPEN

(!begin_liste) [Description:]
!item [Name:]
¯VA_XOPEN®
!item [Number:]
0x4741
!item [Description:]
Reply to AV_XWIND, similar to VA_WINDOPEN. The AV-Server informs an application
whether a given window could be opened.

!begin_table [l|l]
Parameter !! Meaning
!hline
WORD 3 !! 0 = no
~ !! <> 0 = Window opened and the directory
~     !! completely read i.e. an available
~     !! window could be topped.
!end_table

!item [Group:]
VA functions
!item [See also:]
AV_OPENWIND  ~ AV_XWIND ~  VA_WINDOPEN
(!ende_liste)
!end_node
!end_node

!end_node
