!begin_node Tadjtime
(!begin_liste) [Availability]
!item [Name:]
¯Adjust time® - correct the time to synchronize the system clock.
!item [Opcode:]
343 (0x157)
!item [Syntax:]
int Tadjtime ( const struct timeval *delta, struct timeval *olddelta );

!item [Description:]
The  Tadjtime()  function  gradually  adjusts  the  system clock (as
returned by Tgettimeofday).  The amount of time by which the clock is
to be adjusted is specified in the structure pointed to by delta.

If the adjustment in delta is positive, then the system clock is
speeded up by some small percentage (i.e., by adding a small amount of
time to the clock value in each second) until  the  adjustment has been
completed.  If the adjustment in delta is negative, then the clock is
slowed down in a similar fashion.

If  a  clock adjustment from an earlier Tadjtime() call is already in
progress at the time of a later Tadjtime() call, and delta is not NULL
for the later call, then the earlier adjustment is stopped, but any
already completed part of that adjustment is not undone.

If olddelta is not NULL, then the buffer that it points to is used to
return the amount of time remaining from any previous adjustment that
has not yet been completed.

!item [Return value:]
A return value 0 if the setting was successful, otherwise a negative error
code is returned.

!item [Notes:]
The adjustment that Tadjtime() makes to the clock is carried out in such
a manner that the clock is always monotonically increasing.  Using
Tadjtime() to adjust the time prevents the problems that can be caused
for certain applications (e.g., make(1)) by abrupt positive or negative
jumps in the system time.

!item [Availability:] This function is available as of FreeMiNT 1.16.

!item [Group:]
Date and Time

!item [See also:] (!link [Binding][Bindings for Tadjtime]) ~ Tsetdate ~ Tsettime
(!ende_liste)


!begin_pnode Bindings for Tadjtime
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int Tadjtime ( const struct timeval *delta, struct timeval *olddelta );
!item [Assembler:]
!begin_verbatim
move.l    olddelta,-(sp)   ; Offset 6
move.l    delta,-(sp)  ; Offset 2
move.w    #343,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
lea       10(sp),sp    ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node

