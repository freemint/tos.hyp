!iflang [english]

!begin_node Fputchar
(!begin_liste) [Availability]
!item [Name:]
ØFputcharÆ - Write a character to a given file.

!item [Opcode:]
264

!item [Syntax:]
int32_t Fputchar ( int16_t fh, int32_t ch, int16_t mode );

!item [Description:]
The function Fputchar writes a character to the file with the handle
(!I)fh(!i). The parameter (!I)mode(!i) is only significant if the file is a
(pseudo-)terminal:

!begin_xlist !compressed [mode]
!item [mode]
Meaning
!item [~]
~
!item [0]
(!B)Raw mode(!b)
(!nl)
No evaluation of (!nolink [control]) characters
!item [1]
(!B)Cooked mode(!b)
(!nl)
Special (!nolink [control]) characters (Control-C, Control-Z) will be looked
for and interpreted if appropriate; the same applies for flow
(!nolink [control]) (Control-S, Control-Q)
!end_xlist

If the file is a (pseudo-)terminal, then all 4 bytes can be tranmitted. In
this way it is possible to transmit simulated (!nolink [BIOS]) scancodes and
Shift-status messages. Otherwise only the low byte of (!I)ch(!i) will be
transmitted.

!item [(!nolink [Return]) value:]
The function can return the following values:

!begin_xlist !compressed [EBADF :]
!item [4 :]
Number of written bytes, if the file is a terminal
!item [1 :]
Output successful, but file is not a terminal
!item [0 :]
Bytes could not be written (perhaps due to flow (!nolink [control]))
!item [EBADF :]
Invalid file handle
!item [~]
A negative (!nolink [BIOS]) error-code if an error occurred during I/O.
!end_xlist

!item [Availability:]
As of the first in MultiTOS integrated MiNT version 1.04.

!item [Group:]
File functions

!item [See also:]
(!link [Binding][Bindings for Fputchar]) ~ Bconout ~ Cauxout ~ Cconout ~
Crawio ~ Fgetchar ~ Fwrite
(!ende_liste)


!begin_node Bindings for Fputchar
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Fputchar ( int16_t fh, int32_t ch, int16_t mode );

!item [Assembler:]
!begin_verbatim
move.w    mode,-(sp)   ; Offset 8
move.l    ch,-(sp)     ; Offset 4
move.w    fh,-(sp)     ; Offset 2
move.w    #264,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
lea       $A(sp),sp    ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node

!else

!begin_node Fputchar
(!begin_liste) [Beschreibung]
!item [Name:]
ØFputcharÆ - Zeichen in ein File ausgeben.

!item [Gemdosnummer:]
264

!item [Deklaration:]
int32_t Fputchar ( int16_t fh, int32_t ch, int16_t mode );

!item [Beschreibung:]
Die Funktion schreibt ein Zeichen in die Datei mit dem Handle (!I)fh(!i).
Der Parameter (!I)mode(!i) ist nur von Bedeutung, wenn die Datei ein
(Pseudo-)Terminal ist:

!begin_xlist !compressed [mode]
!item [mode]
Bedeutung
!item [~]
~
!item [0]
(!B)Raw-Mode(!b)
(!nl)
keine Auswertung der Sonderzeichen.
!item [1]
(!B)Cooked-Mode(!b)
(!nl)
spezielle Kontrollzeichen (Control-C, Control-Z) werden gesucht und ggfs.
interpretiert. Das selbe gilt fÅr die Fluûkontrolle (Control-S, Control-Q).
!end_xlist

Wenn die Datei ein (Pseudo-)Terminal ist, kînnen alle 4 Bytes Åbertragen
werden. Auf diese Art und Weise ist es mîglich, simulierte BIOS-Scancodes
und Shift-Statusmeldungen zu Åbertragen. Anderenfalls wird nur das Low-Byte
von (!I)ch(!i) Åbertragen.

!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:

!begin_xlist !compressed [EBADF :]
!item [4 :]
Anzahl geschriebener Bytes, wenn Datei ein Terminal ist.
!item [1 :]
Ausgabe erfolgreich, aber Datei ist kein Terminal.
!item [0 :]
Bytes konnten nicht ausgegeben werden.
!item [EBADF :]
ungÅltiges Datei-Handle.
!item [~]
Ein negativer (!nolink [BIOS]) Fehlercode, wenn ein I/O Fehler auftrat.
!end_xlist

!item [VerfÅgbar:]
Seit der ersten in MultiTOS integrierten MiNT Version 1.04.

!item [Gruppe:]
Dateifunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Fputchar]) ~ Bconout ~ Cauxout ~ Cconout ~
Crawio ~ Fgetchar ~ Fwrite
(!ende_liste)


!begin_node Bindings fÅr Fputchar
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Fputchar ( int16_t fh, int32_t ch, int16_t mode );

!item [Assembler:]
!begin_verbatim
move.w    mode,-(sp)   ; Offset 8
move.l    ch,-(sp)     ; Offset 4
move.w    fh,-(sp)     ; Offset 2
move.w    #264,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       $A(sp),sp    ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
