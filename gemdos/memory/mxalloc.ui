!iflang [english]


!begin_node Mxalloc
(!begin_liste) [Availability]
!item [Name:]
ØAllocate memory (with preference)Æ - Reserve memory according to specified
preferences.

!item [Opcode:]
68

!item [Syntax:]
void *Mxalloc ( int32_t amount, int16_t mode );

!item [Description:]
The (!nolink [GEMDOS]) routine Mxalloc reserves a block of memory of the
size (!I)amount(!i). One can use the bits of the WORD parameter (!I)mode(!i)
to specify the desired type of memory. The following apply:

!begin_xlist !compressed [Bits]
!item [Bits]
Meaning
!item [~]
~
!item [0-2]
(!B)Treatment of the TT-RAM(!b)
!begin_xlist !compressed [0 =]
!item [0 =]
Allocate ST-RAM only
!item [1 =]
Allocate Alternative-RAM only
!item [2 =]
Allocate either, ST-RAM preferred
!item [3 =]
Allocate either, Alternative-RAM preferred
!end_xlist
!item [3]
Reserved
!item [4-7]
(!B)Protection mode(!b)
!begin_xlist !compressed [0 =]
!item [0 =]
Default (from your PRGFLAGS)
!item [1 =]
Private
!item [2 =]
Global
!item [3 =]
Supervisor-mode-only access
!item [4 =]
World-readable access
!end_xlist
Other values are undefined and reserved.
!item [14]
(!B)No-Free modus(!b)
(!nl)
When set, this bit means "if the owner of this block terminates, don't free
this block. Instead, let MiNT inherit it, so it'll never be freed." This is
a special mode meant for the OS only, and may not remain available to user
processes.
!end_xlist

All further bits are reserved for future purposes. With the value -1L for
(!I)amount(!i) one can inquire the size of the largest contiguous block of
memory (dependent on (!I)mode(!i)).

Under MagiC all memory allocations are logged. If the restriction set with
LIMITMEM is exceeded, A NULL-pointer will be returned. In the case
(!I)amount(!i) = -1, the minimum of free memory and not yet exhausted
LIMITMEM restriction will be returned. Exceptions are calls of the screen
manager (SCRENMGR) which controls the menus. This ensures that even
LIMITMEM-restricted programs do not have problems with menu redraws.

(!B)Note:(!b) A problem exists in ascertaining when the extended modes (bits
3 and following) may be used. This is because some older versions of
(!nolink [GEMDOS]) do not get along with these modes and are partly
responsible for crashing the application or the whole system. For this
reason many programmers test explicitly for the presence of MiNT/MultiTOS or
versions of (!nolink [MagiC]) >= 2.0. Alternatively one can also use the
function Mxmask.

!item [(!nolink [Return]) value:]
The function returns the start address of the reserved block as an untyped
pointer. Mxalloc returns a 0 when insufficient memory is available.

!item [Availability:] 
This function exists only from (!nolink [GEMDOS]) Version 0.19 on.

!item [Group:]
Memory management

!item [See also:]
(!link [Binding] [Bindings for Mxalloc]) ~ Mfree ~ Malloc ~ Maddalt ~
(!link [Program flags][The program flags])
(!ende_liste)


!begin_node Bindings for Mxalloc
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
void *Mxalloc ( int32_t amount, int16_t mode );

!item [Assembler:]
!begin_verbatim
move.w    mode,-(sp)    ; Offset 6
move.l    amount,-(sp)  ; Offset 2
move.w    #68,-(sp)     ; Offset 0
trap      #1            ; GEMDOS
addq.l    #8,sp         ; Correct stack
!end_verbatim
(!ende_liste)
!end_node


!begin_node Mxmask

!begin_verbatim
/*
   Mxmask returns a bit-mask with which one should mask the mode 
   WORD of a Mxalloc call if one wants to use protection bits. 
   This is necessary as Mxalloc unfortunately returns erroneous
   results in some GEMDOS implementations when protection bits are 
   specified, which can result in a system crash. 
   (Ω 1994 Martin Osieka)

   Application example:
   mxMask = Mxmask();
   p = mxMask ? Mxalloc( size, 0x43 & mxMask) : Malloc( size); */

SHORT Mxmask (void)
{
    void *svStack;         /* Supervisor-Stack */
    int32_t sRAM, sRAMg;   /* ST-RAM           */
    int32_t aRAM, aRAMg;   /* Alternate RAM    */
 
    /*
    // Sample table of possible values:
    //           | newfashion  | oldfashion
    // sRAM aRAM | sRAMg aRAMg | sRAMg aRAMg
    //   1    0  |   1     0   |   1     1
    //   0    2  |   0     2   |   2     2
    //   1    2  |   1     2   |   3     3
    */

    svStack = (void *) Super( 0);  /* Disallow task-switching */
 
    sRAM  = (int32_t) Mxalloc( -1, 0);
    /* In error case Mxalloc( -1, 3) */
    sRAMg = (int32_t) Mxalloc( -1, 0x40);
    aRAM  = (int32_t) Mxalloc( -1, 1);
    /* In error case Mxalloc( -1, 3) */
    aRAMg = (int32_t) Mxalloc( -1, 0x41);
 
    Super( svStack);  /* Permit task-switching */

    if (sRAM == -32)
        return 0x0000;  /* Mxalloc is not implemented */
 
    else if ( ((sRAM + aRAM) == sRAMg) && ((sRAM + aRAM) == aRAMg) )
        return 0x0003;  /* oldfashion Mxalloc() */
 
    else
        return 0xFFFF;
 
} /* Mxmask */
!end_verbatim

See also: GEMDOS ~ Memory management
!end_node
!end_node


!else


!begin_node Mxalloc
(!begin_liste) [Beschreibung]
!item [Name:]
ØAllocate memory (with preference)Æ - Speicherplatz reservieren.

!item [Gemdosnummer:]
68

!item [Deklaration:]
void *Mxalloc ( int32_t amount, int16_t mode );

!item [Beschreibung:]
Die GEMDOS-Routine Mxalloc reserviert einen Speicherbereich der Grîûe
(!I)amount(!i). öber die Bits des Parameters (!I)mode(!i) kann die
gewÅnschte Speicherart spezifiziert werden; es gilt:

!begin_xlist !compressed [Bits]
!item [Bits]
Bedeutung
!item [~]
~
!item [0-2]
(!B)Behandlung des TT-RAMs(!b)
!begin_xlist !compressed [0 =]
!item [0 =]
nur ST-RAM
!item [1 =]
nur TT-RAM
!item [2 =]
egal, ST-RAM bevorzugt
!item [3 =]
egal, TT-RAM bevorzugt
!end_xlist
!item [3]
reserviert
!item [4-7]
(!B)Speicherschutz-Modus(!b)
!begin_xlist !compressed [0 =]
!item [0 =]
AbhÑngig von den Programmflags
!item [1 =]
Privat
!item [2 =]
Global
!item [3 =]
Super
!item [4 =]
nur lesbar
!end_xlist
Alle anderen Werte sind undefiniert, und fÅr zukÅnftige Zwecke reserviert.
!item [14]
(!B)No-Free-Modus(!b)
(!nl)
Wenn dieses Bit gesetzt ist und der Besitzer dieses Speichers terminiert,
wird der Speicherbereich nicht freigegeben, sondern an das Betriebssystem
vererbt. Dieser Modus ist nur fÅr das Betriebssystem interessant, und steht
normalen Anwenderprogrammen nicht zur VerfÅgung.
!end_xlist

Alle weiteren Bits sind fÅr zukÅnftige Zwecke reserviert. Mit dem Wert -1
fÅr (!I)amount(!i) kann man die LÑnge des grîûten zusammenhÑngend
verfÅgbaren Speicherblocks (abhÑngig von (!I)mode(!i)) erfragen.

Unter MagiC werden alle Speicherallozierungen mitprotokolliert. Wenn die mit
LIMITMEM vorgegebene BeschrÑnkung Åberschritten wird, wird ein Nullzeiger
zurÅckgegeben. Im Fall (!I)amount(!i) = -1 wird das Minimum von freiem
Speicher und noch nicht ausgeschîpfter LIMITMEM-BeschrÑnkung zurÅckgegeben.
Ausnahmen sind Aufrufe des Bildschirm-Managers (SCRENMGR), der die MenÅs
kontrolliert. Dadurch wird sichergestellt, daû auch per LIMITMEM beschrÑnkte
Programme keine Probleme mit dem Redraw bei MenÅs haben.

(!B)Hinweis:(!b) Ein Problem besteht darin, festzustellen, wann die
erweiterten Modi (Bits 3 und folgende) benutzt werden dÅrfen. Einige Ñltere
Versionen des (!nolink [GEMDOS]) kommen nÑmlich nicht mit diesen Modi
zurecht, und sorgen z.T. fÅr den Absturz der Applikation bzw. des ganzen
Systems. Aus diesem Grund testen viele Programmierer explizit auf das
Vorhandensein von MiNT/MultiTOS oder Versionen von (!nolink [MagiC]) >= 2.0.
Alternativ kann auch die Funktion Mxmask benutzt werden.

!item [Ergebnis:]
Die Funktion liefert als Ergebnis die Anfangsadresse des reservierten
Bereichs als typenlosen Zeiger. Mxalloc liefert als Ergebnis eine 0, wenn
nicht mehr genÅgend Speicher vorhanden ist.

!item [VerfÅgbar:] 
Diese Funktion existiert erst ab (!nolink [GEMDOS])-Version 0.19.

!item [Gruppe:]
Speicherverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Mxalloc]) ~ Mfree ~ Malloc ~ Maddalt ~
(!link [Programmflags][Die Programmflags])
(!ende_liste)


!begin_node Bindings fÅr Mxalloc
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
void *Mxalloc ( int32_t amount, int16_t mode );

!item [Assembler:]
!begin_verbatim
move.w    mode,-(sp)    ; Offset 6
move.l    amount,-(sp)  ; Offset 2
move.w    #68,-(sp)     ; Offset 0
trap      #1            ; GEMDOS aufrufen
addq.l    #8,sp         ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node


!begin_node Mxmask

!begin_verbatim
/*
   Mxmask() liefert eine Bitmaske mit der man das Moduswort eines
   Mxalloc() Aufrufs maskieren sollte, falls man Protectionbits
   benutzen mîchte. Dies ist notwendig, da Mxalloc() bei der Angabe
   von Protectionbits leider in einigen GEMDOS Implementierungen
   fehlerhafte Resultate liefert, die in der Folge zum Absturz des
   Systems fuehren koennen. ((c) 1994 Martin Osieka)
   Anwendungsbeispiel:
   mxMask = Mxmask();
   p = mxMask ? Mxalloc( size, 0x43 & mxMask) : Malloc( size); */

SHORT Mxmask (void)
{
    void *svStack;      /* Supervisor-Stack */
    int32_t sRAM, sRAMg;   /* ST-RAM          */
    int32_t aRAM, aRAMg;   /* Alternate RAM   */
 
    /*
    // Beispieltabelle moeglicher Werte:
    //           | newfashion  | oldfashion
    // sRAM aRAM | sRAMg aRAMg | sRAMg aRAMg
    //   1    0  |   1     0   |   1     1
    //   0    2  |   0     2   |   2     2
    //   1    2  |   1     2   |   3     3
    */

    svStack = (void *) Super( 0);  /* unterbinde Taskwechsel */
 
    sRAM  = (int32_t) Mxalloc( -1, 0);
    /* im Fehlerfall Mxalloc( -1, 3) */
    sRAMg = (int32_t) Mxalloc( -1, 0x40);
    aRAM  = (int32_t) Mxalloc( -1, 1);
    /* im Fehlerfall Mxalloc( -1, 3) */
    aRAMg = (int32_t) Mxalloc( -1, 0x41);
 
    Super( svStack);  /* erlaube Taskwechsel */

    if (sRAM == -32)
        return 0x0000;  /* Mxalloc() ist nicht implementiert */
 
    else if ( ((sRAM + aRAM) == sRAMg) && ((sRAM + aRAM) == aRAMg) )
        return 0x0003;  /* oldfashion Mxalloc() */
 
    else
        return 0xFFFF;
 
} /* Mxmask */
!end_verbatim

Querverweis: GEMDOS ~ Speicherverwaltung
!end_node
!end_node


!endif
