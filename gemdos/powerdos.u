!iflang [english]


!begin_node PowerDOS
!html_name powerdos
!label Puserid
!label Ppriority
!label P_getpid
!label P_getppid
!label Pgetpd
!label Pfindpid
!label Pprocinf
!label P_nice
!label Smalloc
!label Massign
!label Fstatus
!label Fsfirstidx
!label Wake_parent
!label Wait
!label Sleep
!label Ioqueue
!label Wait_dt
!label Dev_create
!label Fm_add
!label Drv_add
!label Devinfo
!label Send
!label Sig_intercept
!label Suspend
!label Q_message
!label Semaphore
!label Mem_share
!label Chgvector
!label Chgsysvar
!label Pname
!label Pvector
!label Pattrib
!label Pmaxmem

PowerDOS is a GEMDOS extension for preemptive multitasking.

For more information, see the PowerDOS Programmer's Manual.

New modes for Pexec provide multitasking and threads support:

!begin_xlist !compressed [0x99]
!item [mode]
Meaning
!item [~]
~
!item [0x10]
Like mode 0, except that the parent continues to operate concurrently with the
newly created child task.
!item [0x16]
Like mode 6, except that the parent continues to operate concurrently with the
newly created child task.
!item [0x17]
Execute a code fragment that is within the text segment of the calling process.
!item [0x18]
Like mode 0x17, except that it allows a number of INTs to be placed on the
stack of the new task.
!end_xlist

PowerDOS adds the function Flock and the cookie _FLK conforming to the
specification for (!nolink [GEMDOS]) File Sharing & Record Locking.

The following list is a synopsis of the PowerDOS routines, sorted
by function numbers:

!begin_xlist [xxx]
!item [128]
(!B)Puserid(!b) Get or set Group.User ID of a process (!nl)
Syntax: int32_t Puserid(int16_t process_id, int16_t flag, int32_t new_group_user)
!item [129]
(!B)Ppriority(!b) Set or get the priority of given process (!nl)
Syntax: int32_t Ppriority(int16_t process_id, int16_t new_priority)
!item [130]
(!B)(!nolink [Pgetpid])(!b) Get current process' process ID (!nl)
Syntax: int16_t (!nolink [Pgetpid])()
!item [131]
(!B)(!nolink [Pgetppid])(!b) Get current process' parent's process ID (!nl)
Syntax: int32_t (!nolink [Pgetppid])()
!item [132]
(!B)Pgetpd(!b) (!nolink [Return]) pointer to process descriptor of given process (!nl)
Syntax: void *Pgetpd(int16_t process_id)
!item [133]
(!B)Pfindpid(!b) Find the process ID of a process with the given name (!nl)
Syntax: int32_t Pfindpid(int8_t *process_name)
!item [134]
(!B)Pprocinf(!b) (!nolink [Return]) information about process (!nl)
Syntax: int32_t Pprocinf(int16_t process_id, struct PROCINFO *buffer)
!item [135]
(!B)(!nolink [Pnice])(!b) Change process priority using delta (!nl)
Syntax: int32_t (!nolink [Pnice])(int16_t process_id, int16_t delta)
!item [136]
(!B)Smalloc(!b) Allocate a block of system memory (top down) (!nl)
Syntax: char *Smalloc(int32_t mem_size)
!item [137]
(!B)Massign(!b) Assign a block of memory owned by calling process to process
of given process ID (!nl)
Syntax: int32_t Massign(int16_t process_id, int8_t *mem_start)
!item [139]
(!B)Fstatus(!b) Perform various status operations on an open file (!nl)
Syntax: int32_t Fstatus(int16_t handle, int16_t sub_function, ...)
!item [140]
(!B)Fsfirstidx(!b) Perform Fsfirst function with index into directory structure (!nl)
Syntax: int32_t Fsfirstidx(int8_t *pathname, int16_t attributes, int16_t index)
!item [141]
(!B)Wake_parent(!b) Wake parent process of current process (!nl)
Syntax: int32_t Wake_parent(int16_t code)
!item [142]
(!B)Wait(!b) Wait for child process to terminate (!nl)
Syntax: int32_t Wait()
!item [143]
(!B)Sleep(!b) Sleep (block) for specified time, or indefinately (!nl)
Syntax: int32_t Sleep(int32_t time)
!item [144]
(!B)Ioqueue(!b) Link to queue of processes waiting for access I/O (!nl)
Syntax: int32_t Ioqueue(int16_t process_id, int32_t time)
!item [145]
(!B)Wait_dt(!b) Wait (block) until a specified date/time (!nl)
Syntax: int32_t Wait_dt(uint32_t date_time)
!item [146]
(!B)Dev_create(!b) Create a new I/O device (!nl)
Syntax: int32_t Dev_create(int8_t *dev_name, int8_t *fm_name, int8_t *drv_name,
                     int8_t *path_vars, int8_t *dev_vars, int16_t share)
!item [147]
(!B)Fm_add(!b) Add a new file manager to the system (!nl)
Syntax: int32_t Fm_add(int8_t *fm_name, int8_t *subroutine_tab,
                     int8_t *fm_vars, int16_t fm_type)
!item [148]
(!B)Drv_add(!b) Add a new device driver to the system, or replace an old one (!nl)
Syntax: int32_t Drv_add(int8_t *drv_name, int8_t *subroutine_tab, 
                     int8_t *drv_vars)
!item [149]
(!B)Devinfo(!b) (!nolink [Return]) device info for requested device index (!nl)
Syntax: int32_t Devinfo(int16_t idx, struct dev_info *buffer)
!item [150]
(!B)Send(!b) Send a signal to a process (!nl)
Syntax: int32_t Send(int16_t process_id, int32_t signal_code)
!item [151]
(!B)Sig_intercept(!b) (!nolink [Install]) signal intercept routine (!nl)
Syntax: int32_t Sig_intercept(int16_t (*intercept_rtn)(int32_t, void*),
                     int32_t *var_ptr)
!item [152]
(!B)Suspend(!b) Suspend a process (!nl)
Syntax: int32_t Suspend(int16_t process_id)
!item [153]
(!B)Q_message(!b) The (!nolink [Message]) Queue (!nl)
Syntax: int16_t Q_message(struct mq_params *mqparams)
!item [154]
(!B)Semaphore(!b) The Semaphore function (!nl)
Syntax: int16_t Semaphore(struct s_params *sparams)
!item [155]
(!B)Mem_share(!b) (!nolink [Shared memory]) (!nl)
Syntax: int16_t Mem_share(struct ms_params *msparams)
!item [158]
(!B)Chgvector(!b) Read or modify a GEMDOS, BIOS or XBIOS function vector (!nl)
Syntax: int32_t Chgvector(int16_t trap_num, int16_t vector_num, int8_t *new_vector)
!item [159]
(!B)Chgsysvar(!b) Read or modify a PowerDOS internal variable (!nl)
Syntax: int32_t Chgsysvar(int16_t var_num, int16_t flag, int32_t new_value)
!item [160]
(!B)Pname(!b) Read or modify the name of a process (!nl)
Syntax: int32_t Pname(int16_t proc_id, int16_t get_set, int8_t *name)
!item [161]
(!B)Pvector(!b) Read or modify a process' user vector (!nl)
Syntax: int32_t Pvector(int16_t proc_id, int32_t vector)
!item [162]
(!B)Pattrib(!b) Set or clear bits in a process' attribute byte (!nl)
Syntax: int32_t Pattrib(int16_t proc_id, unsigned char flag, unsigned char mask)
!item [163]
(!B)Pmaxmem(!b) Set or get the maximum memory returned for Malloc(-1) for a process (!nl)
Syntax: int32_t Pmaxmem(int16_t proc_id, int16_t flag, int32_t size)
!end_xlist

See also: GEMDOS ~  (!link [BIOS function list][BIOS function list]) ~
XBIOS function list ~ (!link [Cookie PDOS][Cookie, PDOS]) ~
(!link [Cookie _FLK][Cookie, _FLK])
!end_node


!else


!begin_node PowerDOS
!html_name powerdos
!label Puserid
!label Ppriority
!label P_getpid
!label P_getppid
!label Pgetpd
!label Pfindpid
!label Pprocinf
!label P_nice
!label Smalloc
!label Massign
!label Fstatus
!label Fsfirstidx
!label Wake_parent
!label Wait
!label Sleep
!label Ioqueue
!label Wait_dt
!label Dev_create
!label Fm_add
!label Drv_add
!label Devinfo
!label Send
!label Sig_intercept
!label Suspend
!label Q_message
!label Semaphore
!label Mem_share
!label Chgvector
!label Chgsysvar
!label Pname
!label Pvector
!label Pattrib
!label Pmaxmem

PowerDOS is a GEMDOS extension for preemptive multitasking.

For more information, see the PowerDOS Programmer's Manual.

New modes for Pexec provide multitasking and threads support:

!begin_xlist !compressed [0x99]
!item [mode]
Meaning
!item [~]
~
!item [0x10]
Like mode 0, except that the parent continues to operate concurrently with the
newly created child task.
!item [0x16]
Like mode 6, except that the parent continues to operate concurrently with the
newly created child task.
!item [0x17]
Execute a code fragment that is within the text segment of the calling process.
!item [0x18]
Like mode 0x17, except that it allows a number of INTs to be placed on the
stack of the new task.
!end_xlist

PowerDOS adds the function Flock and the cookie _FLK conforming to the
specification for (!nolink [GEMDOS]) File Sharing & Record Locking.

Die folgende Liste ist eine (!Uumlaut)bersicht der PowerDOS-Routinen, geordnet
nach Funktionsnummern:

!begin_xlist !compressed [128]
!item [128]
(!B)Puserid(!b) Get or set Group.User ID of a process (!nl)
Syntax: int32_t Puserid(int16_t process_id, int16_t flag, int32_t new_group_user)
!item [129]
(!B)Ppriority(!b) Set or get the priority of given process (!nl)
Syntax: int32_t Ppriority(int16_t process_id, int16_t new_priority)
!item [130]
(!B)(!nolink [Pgetpid])(!b) Get current process' process ID (!nl)
Syntax: int16_t (!nolink [Pgetpid])()
!item [131]
(!B)(!nolink [Pgetppid])(!b) Get current process' parent's process ID (!nl)
Syntax: int32_t (!nolink [Pgetppid])()
!item [132]
(!B)Pgetpd(!b) (!nolink [Return]) pointer to process descriptor of given process (!nl)
Syntax: void *Pgetpd(int16_t process_id)
!item [133]
(!B)Pfindpid(!b) Find the process ID of a process with the given name (!nl)
Syntax: int32_t Pfindpid(int8_t *process_name)
!item [134]
(!B)Pprocinf(!b) (!nolink [Return]) information about process (!nl)
Syntax: int32_t Pprocinf(int16_t process_id, struct PROCINFO *buffer)
!item [135]
(!B)(!nolink [Pnice])(!b) Change process priority using delta (!nl)
Syntax: int32_t (!nolink [Pnice])(int16_t process_id, int16_t delta)
!item [136]
(!B)Smalloc(!b) Allocate a block of system memory (top down) (!nl)
Syntax: char *Smalloc(int32_t mem_size)
!item [137]
(!B)Massign(!b) Assign a block of memory owned by calling process to process
of given process ID (!nl)
Syntax: int32_t Massign(int16_t process_id, int8_t *mem_start)
!item [139]
(!B)Fstatus(!b) Perform various status operations on an open file (!nl)
Syntax: int32_t Fstatus(int16_t handle, int16_t sub_function, ...)
!item [140]
(!B)Fsfirstidx(!b) Perform Fsfirst function with index into directory structure (!nl)
Syntax: int32_t Fsfirstidx(int8_t *pathname, int16_t attributes, int16_t index)
!item [141]
(!B)Wake_parent(!b) Wake parent process of current process (!nl)
Syntax: int32_t Wake_parent(int16_t code)
!item [142]
(!B)Wait(!b) Wait for child process to terminate (!nl)
Syntax: int32_t Wait()
!item [143]
(!B)Sleep(!b) Sleep (block) for specified time, or indefinately (!nl)
Syntax: int32_t Sleep(int32_t time)
!item [144]
(!B)Ioqueue(!b) Link to queue of processes waiting for access I/O (!nl)
Syntax: int32_t Ioqueue(int16_t process_id, int32_t time)
!item [145]
(!B)Wait_dt(!b) Wait (block) until a specified date/time (!nl)
Syntax: int32_t Wait_dt(uint32_t date_time)
!item [146]
(!B)Dev_create(!b) Create a new I/O device (!nl)
Syntax: int32_t Dev_create(int8_t *dev_name, int8_t *fm_name, int8_t *drv_name,
                     int8_t *path_vars, int8_t *dev_vars, int16_t share)
!item [147]
(!B)Fm_add(!b) Add a new file manager to the system (!nl)
Syntax: int32_t Fm_add(int8_t *fm_name, int8_t *subroutine_tab,
                     int8_t *fm_vars, int16_t fm_type)
!item [148]
(!B)Drv_add(!b) Add a new device driver to the system, or replace an old one (!nl)
Syntax: int32_t Drv_add(int8_t *drv_name, int8_t *subroutine_tab, 
                     int8_t *drv_vars)
!item [149]
(!B)Devinfo(!b) (!nolink [Return]) device info for requested device index (!nl)
Syntax: int32_t Devinfo(int16_t idx, struct dev_info *buffer)
!item [150]
(!B)Send(!b) Send a signal to a process (!nl)
Syntax: int32_t Send(int16_t process_id, int32_t signal_code)
!item [151]
(!B)Sig_intercept(!b) (!nolink [Install]) signal intercept routine (!nl)
Syntax: int32_t Sig_intercept(int16_t (*intercept_rtn)(int32_t, void*),
                     int32_t *var_ptr)
!item [152]
(!B)Suspend(!b) Suspend a process (!nl)
Syntax: int32_t Suspend(int16_t process_id)
!item [153]
(!B)Q_message(!b) The (!nolink [Message]) Queue (!nl)
Syntax: int16_t Q_message(struct mq_params *mqparams)
!item [154]
(!B)Semaphore(!b) The Semaphore function (!nl)
Syntax: int16_t Semaphore(struct s_params *sparams)
!item [155]
(!B)Mem_share(!b) (!nolink [Shared memory]) (!nl)
Syntax: int16_t Mem_share(struct ms_params *msparams)
!item [158]
(!B)Chgvector(!b) Read or modify a GEMDOS, BIOS or XBIOS function vector (!nl)
Syntax: int32_t Chgvector(int16_t trap_num, int16_t vector_num, int8_t *new_vector)
!item [159]
(!B)Chgsysvar(!b) Read or modify a PowerDOS internal variable (!nl)
Syntax: int32_t Chgsysvar(int16_t var_num, int16_t flag, int32_t new_value)
!item [160]
(!B)Pname(!b) Read or modify the name of a process (!nl)
Syntax: int32_t Pname(int16_t proc_id, int16_t get_set, int8_t *name)
!item [161]
(!B)Pvector(!b) Read or modify a process' user vector (!nl)
Syntax: int32_t Pvector(int16_t proc_id, int32_t vector)
!item [162]
(!B)Pattrib(!b) Set or clear bits in a process' attribute byte (!nl)
Syntax: int32_t Pattrib(int16_t proc_id, unsigned char flag, unsigned char mask)
!item [163]
(!B)Pmaxmem(!b) Set or get the maximum memory returned for Malloc(-1) for a process (!nl)
Syntax: int32_t Pmaxmem(int16_t proc_id, int16_t flag, int32_t size)
!end_xlist

Querverweis: GEMDOS ~  (!link [BIOS-Funktionsliste][BIOS-Funktionsliste]) ~
XBIOS-Funktionsliste ~ (!link [Cookie PDOS][Cookie, PDOS]) ~
(!link [Cookie _FLK][Cookie, _FLK])
!end_node


!endif
