!iflang [english]


!begin_node Psemaphore
(!begin_liste) [Availability]
!item [Name:]
ØPsemaphoreÆ - Create, use or destroy a semaphore.

!item [Opcode:]
308

!item [Syntax:]
int32_t Psemaphore ( int16_t mode, int32_t id, int32_t timeout );

!item [Description:]
The function Psemaphore implements non-counting semaphores. Only one process
can access a semaphore at the same time.

Semaphores can be used, for instance, to synchronise accesses to data
structures in (!link [shared memory][Shared memory]) by different
subprocesses: Hence a subprocess must try, before it accesses memory, to
obtain possession of the semaphore. This can be created during
initialisation, for instance, and removed again at program termination.

Semaphores are identified by a name. This name is a LONGword that may
contain four ASCII characters. Semaphores whose name starts with an
underscore '_' are reserved for the operating system.

(!B)The parameter (!I)timeout(!i) is only used in (!I)mode 2(!i). The
following assignments apply:(!b)

!begin_xlist !compressed [timeout]
!item [timeout]
= ~0: Return immediately.
!item [~]
= -1: No timeout (wait indefinitely).
!end_xlist

Other values for (!I)timeout(!i) specify the delay time in milliseconds
before a timeout occurs.

(!B)The following values are possible for the parameter (!I)mode(!i):(!b)

!begin_xlist !compressed [mode]
!item [mode]
Meaning
!item [~]
~
!item [0]
Create a semaphore with the ID (!I)id(!i) (and grant ownership to the
calling process)
!item [1]
Destroy semaphore with the ID (!I)id(!i); this works only if the semaphore
is owned by the caller
!item [2]
Request ownership of the semaphore with the ID (!I)id(!i); this blocks the
caller until the semaphore becomes available, or a timeout occurs
!item [3]
Release ownership of semaphore with the ID (!I)id(!i); this works only if
the semaphore is owned by the caller
!end_xlist

(!B)Note:(!b) When a process creates a semaphore, it also owns it
immediately. So that other processes may use it, it must first be released.
As the creation of a semphore has to reserve internal memory, the function
should be used frugally.

If a blocked process is waiting for a semaphore (before the timeout occurs),
and a different process destroys the semaphore, then the function Psemaphore
returns with the message ERANGE, as the requested semaphore no longer
exists.

When a process terminates, all semaphores owned by it are released
automatically (but not destroyed). The ownership of a semaphore can not be
inherited (say with Pfork). If a process creates a semaphore and then
crashes, the semaphore remains and cannot be removed any more.

In MagiC, plausibility checks ensure that no system semaphores can be
released; in addition, only modes 2 and 3 are supported at present.

!item [(!nolink [Return]) value:]
The function can return the following results:

!begin_xlist !compressed [ERANGE:]
!item [E_OK~ :]
No error has arisen
!item [ERROR :]
A semaphore was requested that the caller already owns
!item [EACCDN:]
An attempt was made to create a semaphore that already exists, the caller is
not the owner of the semaphore or a timeout has occurred
!item [ERANGE:]
The specified semaphore does not exist
!end_xlist

!item [Availability:]
Available when a 'MiNT' cookie with a version of at least 0.92 exists and
(!nolink [MagiC]) as of version 3.0.

!item [Group:]
Process functions

!item [See also:]
(!link [Binding][Bindings for Psemaphore]) ~ Semaphores in MagiC
(!ende_liste)


!begin_node Bindings for Psemaphore
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Psemaphore ( int16_t mode, int32_t id, int32_t timeout );

!item [Assembler:]
!begin_verbatim
move.l    timeout,-(sp)  ; Offset 8
move.l    id,-(sp)       ; Offset 4
move.w    mode,-(sp)     ; Offset 2
move.w    #308,-(sp)     ; Offset 0
trap      #1             ; GEMDOS
lea       $C(sp),sp      ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Psemaphore
(!begin_liste) [Beschreibung]
!item [Name:]
ØPsemaphoreÆ - erzeugen, anwenden, zerstîren einer Semaphore.

!item [Gemdosnummer:]
308

!item [Deklaration:]
int32_t Psemaphore ( int16_t mode, int32_t id, int32_t timeout );

!item [Beschreibung:]
Die Funktion implementiert nicht-zÑhlende Semaphore. Nur ein Prozess kann
einen Semaphor zur gleichen Zeit besitzen.

Semaphoren kînnen z.B. benutzt werden, um den Zugriff auf Datenstrukturen im
Shared Memory von unterschiedlichen Teilprozessen zu synchronisieren: So muû
ein Teilprozess, bevor er auf den Speicher zugreift, versuchen, in den
Besitzt des Semaphors zu kommen. Dieser kann z.B. bei der Initialisierung
erzeugt, und bei Programmende wieder entfernt werden.

Semaphore werden durch einen Namen identifiziert. Dieser Name ist ein
Langwort, das auch vier ASCII-Zeichen enthalten kann. Semaphore, deren Namen
mit dem Unterstrich '_' beginnen sind dabei fÅr das Betriebssystem
reserviert.


(!B)Der Parameter (!I)timeout(!i) wird nur im Modus 2 benutzt. Es gilt dabei
die folgende Belegung:(!b)

!begin_xlist !compressed [timeout]
!item [timeout]
= ~0: sofort zurÅckkehren
!item [~]
= -1: kein Timeout (Forever).
!end_xlist

Andere Werte fÅr (!I)timeout(!i) geben die Wartezeit in Millisekunden an,
bevor ein Timeout eintritt.

(!B)FÅr den Parameter (!I)mode(!i) sind folgende Werte mîglich:(!b)

!begin_xlist !compressed [mode]
!item [mode]
Bedeutung
!item [~]
~
!item [0]
Semaphore mit Kennung (!I)id(!i) erzeugen (und besitzen).
!item [1]
Semaphore mit Kennung (!I)id(!i) entfernen. Dies klappt nur, wenn der
Aufrufer die Semaphore besitzt.
!item [2]
Besitz der Semaphore mit Kennung (!I)id(!i) beantragen. Dies blockiert den
Aufrufer bis die Semaphore frei wird, oder ein Timeout eintritt.
!item [3]
Semaphore mit Kennung (!I)id(!i) freigeben. Dies klappt nur, wenn der
Aufrufer die Semaphore besitzt.
!end_xlist

(!B)Hinweis:(!b) Wenn ein Prozess eine Semaphore erzeugt, besitzt er sie
auch sofort. Damit andere Prozesse diese nutzen kînnen, muû sie zunÑchst
freigegeben werden. Da fÅr das Erzeugen einer Semphore interner Speicher
angefordert werden muss, sollte die Funktion sparsam verwendet werden.

Wenn ein blockierter Prozess auf eine Semaphore wartet (bevor der Timeout
eintritt), und ein anderer Prozess entfernt die Semaphore, dann kehrt die
Funktion Psemaphore mit der Meldung ERANGE zurÅck, da die angeforderte
Semaphore nicht lÑnger existiert.

Wenn ein Prozess terminiert, werden alle Semaphore die er besitzt,
automatisch freigegeben (aber nicht zerstîrt). Der Besitz einer Semaphore
kann nicht vererbt werden (etwa mit Pfork). Wenn ein Prozess eine Semaphore
erzeugt und dann abstÅrzt, bleibt die Semaphore erhalten, und kann nicht
mehr entfernt werden.

In MagiC sorgen PlausibilitÑtsÅberprÅfungen dafÅr, daû keine
System-Semaphoren freigegeben werden kînnen; auûerdem werden z.Zt. nur die
Modi 2 und 3 unterstÅtzt.

!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:

!begin_xlist !compressed [ERANGE:]
!item [E_OK~ :]
kein Fehler aufgetreten.
!item [ERROR :]
es wurde eine Semaphore beantragt, die der Antragsteller bereits besitzt.
!item [EACCDN:]
es wurde versucht eine Semaphore zu erzeugen, die bereits existiert, der
Aufrufer ist nicht im Besitz der Semaphore oder ein Timeout ist eingetreten.
!item [ERANGE:]
der angegebene Semaphore existiert nicht.
!end_xlist

!item [VerfÅgbar:]
VerfÅgbar, wenn ein 'MiNT' Cookie mit einer Versionsnummer von mindestens
0.92 existiert und in MagiC ab Version 3.0.

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:]
(!link [Binding][Bindings fÅr Psemaphore]) ~ Semaphoren in MagiC
(!ende_liste)


!begin_node Bindings fÅr Psemaphore
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Psemaphore ( int16_t mode, int32_t id, int32_t timeout );

!item [Assembler:]
!begin_verbatim
move.l    timeout,-(sp)  ; Offset 8
move.l    id,-(sp)       ; Offset 4
move.w    mode,-(sp)     ; Offset 2
move.w    #308,-(sp)     ; Offset 0
trap      #1             ; GEMDOS aufrufen
lea       $C(sp),sp      ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
