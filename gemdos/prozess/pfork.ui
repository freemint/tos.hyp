!iflang [english]

!begin_node Pfork
(!begin_liste) [Availability]
!item [Name:]
ØPforkÆ - Create a copy of the current process.

!item [Opcode:]
283

!item [Syntax:]
int16_t Pfork ( void );

!item [Description:]
The function Pfork creates a copy of the current process. The child process
inherits a copy of the address space of the parent process, i.e. changes
made to variables by the child have no effect on the parent.

The newly created process starts its work when the function Pfork returns.

If the parent is in supervisor-mode when this call is made, the child is
launched in user-mode anyway.

New processes launched with this call should not use Mshrink, but are
required to do any (!nolink [GEM]) initialisation such as appl_init and
v_openvwk again (if they need to use (!nolink [GEM])). Both parent and child
use Pterm or Pterm0 to terminate themselves.

!item [(!nolink [Return]) value:]
The function can return the following results:
!begin_xlist !compressed [ENSMEM:]
!item [E_OK~ :]
In child process
!item [>0~~~ :]
New process ID in parent process
!item [ENSMEM:]
Not enough memory available to create the new process
!end_xlist

!item [Availability:]
As of the first in MultiTOS integrated MiNT version 1.04.

!item [Group:]
Process functions

!item [See also:]
(!link [Binding] [Bindings for Pfork]) ~ Pexec ~  Pvfork ~
(!link [Threads][Threads in MagiC])
(!ende_liste)


!begin_node Bindings for Pfork
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int16_t Pfork ( void );

!item [Assembler:]
!begin_verbatim
move.w    #283,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
addq.l    #2,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node

!else

!begin_node Pfork
(!begin_liste) [Beschreibung]
!item [Name:]
ØPforkÆ - Kopie des aktuellen Prozesses erzeugen.

!item [Gemdosnummer:]
283

!item [Deklaration:]
int16_t Pfork ( void );

!item [Beschreibung:]
Die Funktion erzeugt eine Kopie des aktuellen Prozesses. Der Child-Prozeû
erbt dabei eine Kopie des Adreûraums des Parent-Prozesses, d.h. énderungen,
die der Child an Variablen macht, haben keinen Einfluû auf den Parent.

Der neu erzeugte Prozeû beginnt seine Arbeit, wenn die Funktion Pfork
zurÅckkehrt.

Wenn der Parent im Supervisor-Modus ist, wenn diese Funktion aufgerufen
wird, wird das Child dennoch im User-Modus gestartet.

Ein neuer Prozess, der mit dieser Funktion gestartet wird, darf nicht
Mshrink aufrufen, muû aber jede (!nolink [GEM]) Initialisierung wie
appl_init und v_openvwk erneut ausfÅhren (wenn er (!nolink [GEM])
benîtigt). Parent und Child mÅssen beide Pterm oder Pterm0 aufrufen, um
sich zu beenden.

!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !compressed [ENSMEM:]
!item [E_OK~ :]
im Child-Prozeû.
!item [>0~~~ :]
neue Prozess-ID im Parent-Prozeû.
!item [ENSMEM:]
nicht genug Speicher vorhanden, um den neuen Prozeû zu erzeugen.
!end_xlist

!item [VerfÅgbar:]
Seit der ersten in MultiTOS integrierten MiNT Version 1.04.

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Pfork]) ~ Pexec ~  Pvfork ~
(!link [Threads][Threads in MagiC])
(!ende_liste)


!begin_node Bindings fÅr Pfork
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int16_t Pfork ( void );

!item [Assembler:]
!begin_verbatim
move.w    #283,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
