!iflang [english]

!begin_node Pexec
(!begin_liste) [Availability]
!item [Name:]
ØProgram executionÆ - Load and execute a program.

!item [Opcode:]
75

!item [Syntax:]
int32_t Pexec ( uint16_t mode, ... );

!item [Description:]
The function Pexec loads and launches a program. With  the parameter
(!I)mode(!i) one can select from several variants:
!begin_xlist [mode]
!item [mode]
Meaning

!item [0]
int32_t Pexec (0, int8_t *name, int8_t *cmdline, int8_t *env);

(!B)Load and go:(!b) Loads and launches the program specified in
(!I)name(!i) and passes the command line (!I)cmdline(!i). Returns a WORD
exit code when the child terminates. The following apply for the parameter
(!I)env(!i):
!begin_xlist !compressed [NULL]
!item [-1]
=  Do not create an environment
!item [NULL]
=  Inherit the environment of the parent
!end_xlist
Any other value is a pointer to the environment to be inherited.

!item [3]
(!nolink [PD]) *Pexec (3, int8_t* name, int8_t *cmdline, int8_t *env);

(!B)Load, don't go:(!b) This is used most often for launching overlays or
for loading programs in a debugger. Corresponds to (!I)mode 0(!i) with the
difference that the program is not launched immediately, but that a pointer
to the child processes' basepage is returned as a LONG. The parent owns the
memory of the child's environment and basepage and hence must free them when
finished with the child.

!item [4]
int32_t Pexec (4, 0L, PD *basepage, 0L);

(!B)Just go:(!b) Launches an already loaded program with basepage at the
specified address. The basepage should have been created with (!I)mode 3(!i)
or (!I)5(!i).

!item [5]
(!nolink [PD]) *Pexec (5, 0L, int8_t *cmdline, int8_t *env);

(!B)Create basepage:(!b) First of all (!nolink [GEMDOS]) creates a new
environment. Then the largest block of free memory is allocated and a
basepage is created in the first 256 bytes. The following applies for the
parameter (!I)env(!i):
!begin_xlist !compressed [NULL]
!item [-1]
= Do not create an environment
!item [NULL]
= Inherit the environment of the parent
!end_xlist
Any other value is a pointer to the environment to be inherited.

With MiNT, use of this mode in conjunction with (!I)mode 3(!i) can be used
to emulate the Pvfork call without blocking the parent.

!item [6]
int32_t Pexec (6, 0L, PD *basepage, 0L);

(!B)Just go, then free:(!b) Corresponds to (!I)mode 4(!i) but with the
difference that the allocated memory belongs to the launched process (child)
and not to the launcher (parent); thus the basepage memory blocks are freed
automatically when the child is terminated with Pterm. Together with
(!I)mode 3(!i) one can achieve the same effect with it as with (!I)mode
0(!i). This mode is available only from (!nolink [GEMDOS]) Version 0.15.

!item [7]
PD *Pexec (7, uint32_t prgflags, int8_t *cmdline, int8_t *env);

(!B)Create basepage, respecting prgflags:(!b) Similar to (!I)mode 5(!i), but
in (!I)prgflags(!i) one can pass the same information as in the ph_prgflags
field of the program header. This mode is used by the (!nolink [BIOS]) of
the TT030 to launch GEM, and is only available as of (!nolink [GEMDOS])
Version 0.19.

!item [100]
int32_t Pexec (100, int8_t *name, int8_t *cmdline, int8_t *env);

(!B)Load, go, don't wait:(!b) Similar to (!I)mode 0(!i), only the caller
does not wait until the launched program is terminated, i.e. the parent
process is returned to immediately while the child continues to excecute.
The return value is a negative error-code or the positive PID of the child.

!item [101]
As this mode is only used internally by MagiC for inheriting path and file
handles, the details of the exact syntax will be forgone here.

!item [102]
Is used internally by MagiC to remove a given process. Therefore the details
of the exact syntax will be forgone here.

!item [104]
int32_t Pexec (104, int8_t *name, PD *basepage, 0L);

(!B)Just go, don't wait:(!b) Similar to (!I)mode 4(!i), only the caller does
not wait until the launched program is terminated. A process will be
launched whose basepage was set earlier with (!I)mode 3, 5(!i) or (!I)7(!i).
One should note that the environment and the basepage of the child is also
owned by the parent (in fact the child inherits all the memory that is
possessed by the parent). The parameter (!I)name(!i) is a pointer to a
string that describes the name of the new process; with a NULL value the
name of the parent process will be used. The function returns a negative
error-code, or the positive PID of the child.

!item [106]
int32_t Pexec (106, int8_t *name, PD *basepage, 0L);

(!B)Just go, don't wait, no sharing:(!b) Similar to (!I)mode 104(!i),
however the environment and basepage of the child are (!I)not(!i) in the
possession of the parent, and the child has no access to memory that was
allocated to the parent process. At the termination of the child its memory
is released again. In combination with (!I)mode 3(!i), therefore, Pexec
(106, ...) corresponds to (!I)mode 100(!i) (while (!I)mode 3(!i) followed by
(!I)mode 6(!i) corresponds to a call of Pexec (0, ...)).
(!nl)
Is no longer supported from MagiC 2.0 onwards.

!item [107]
Corresponds essentially with (!I)mode 7(!i), and is used internally by
MagiC since version 2.10. Hence the details of the exact syntax will be forgone here.

!item [108]
Is used by (!nolink [MagiC]) since version 2.10 internally for launching a desk accessory.
Since the exact syntax is not officially documented, it is better for own
programs to fall back on shel_write.

!item [200]
int32_t Pexec (200, int8_t *name, int8_t *cmdline, int8_t *env);

(!B)Replace program and go:(!b) Similar to (!I)mode 100(!i), however the new
process overwrites the old one completely. Though the old process retains
its PID and most of its attributes, all the memory it occupied will be
released. While Pexec (0, ...) can be taken as a subprogram call
(call...return), this mode acts more like a 'goto'.
!end_xlist
(!B)Note:(!b) Not all the modes are available under all varieties of
operating system; therefore careful note should be taken of the return value
of the function. Unknown modes results in a function return of EINVFN.

Command lines are passed as a (!I)Pascal format(!i) string, i.e. the first
byte contains the length of the line (maximum 124 characters).

!item [(!nolink [Return]) value:]
(!B)Return value:(!b) The function returns the exit code of the child
process. If an overlay was loaded, the result contains the basepage of the
overlay. With a negative result, an error has arisen.

!item [Availability:]
All (!nolink [GEMDOS]) versions.

!item [Group:]
Process functions

!item [See also:]
(!link [Binding][Bindings for Pexec]) ~ shel_write ~
(!link [Program flags][The program flags]) ~ ARGV procedure
(!ende_liste)


!begin_node Bindings for Pexec
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pexec ( uint16_t mode, ... );

!item [Assembler:]
!begin_verbatim
pea       env          ; Offset 12
pea       cmdline      ; Offset  8 
pea       name         ; Offset  4 
move.w    mode,-(sp)   ; Offset  2
move.w    #75,-(sp)    ; Offset  0
trap      #1           ; GEMDOS
lea       $10(sp),sp   ; Correct stack
!end_verbatim

!item [GFA-Basic]
Adresse%=Gemdos(&H4B,W:mode%,L:name%,L:cmdline%,L:env)
(!ende_liste)
!end_node
!end_node

!else

!begin_node Pexec
(!begin_liste) [Beschreibung]
!item [Name:]
Øprogram executionÆ - Programm laden und ausfÅhren.

!item [Gemdosnummer:]
75

!item [Deklaration:]
int32_t Pexec ( uint16_t mode, ... );

!item [Beschreibung:]
Die Funktion lÑdt und startet ein Programm. öber den Parameter (!I)mode(!i)
lassen sich verschiedene Varianten auswÑhlen:
!begin_xlist [mode]
!item [mode]
Bedeutung

!item [0]
int32_t Pexec (0, int8_t *name, int8_t *cmdline, int8_t *env);

(!B)Load and go:(!b) LÑdt und startet das in (!I)name(!i) angegebene
Programm, und Åbergibt die Kommandozeile (!I)cmdline(!i). FÅr den Parameter
(!I)env(!i) gilt:
!begin_xlist !compressed [NULL]
!item [-1]
=  kein Environment anlegen.
!item [NULL]
=  Environment des Parent vererben.
!end_xlist
Jeder andere Wert ist ein Zeiger auf das zu vererbene Environment.

!item [3]
(!nolink [PD]) *Pexec (3, int8_t* name, int8_t *cmdline, int8_t *env); (!nl)

(!B)Load, don't go:(!b) wird meist zum Starten von Overlays oder zum Laden
von Programmen in einem Debugger benutzt. Entspricht (!I)mode(!i) 0, mit dem
Unterschied, daû das Programm nicht sofort gestartet wird, sondern ein
Zeiger auf die Basepage als LONG zurÅckgeliefert wird. Der Parent ist der
EigentÅmer des Speichers, den die Basepage und das Environment des Childs
belegen und muû ihn freigeben, wenn das Child sich beendet hat.

!item [4]
int32_t Pexec (4, 0L, PD *basepage, 0L); (!nl)

(!B)Just go:(!b) startet ein bereits geladenes Programm. Die Basepage sollte
mit mode 3 oder 5 erzeugt worden sein.

!item [5]
(!nolink [PD]) *Pexec (5, 0L, int8_t *cmdline, int8_t *env); (!nl)

(!B)Create Basepage:(!b) ZunÑchst legt GEMDOS ein neues Environment an. Dann
wird der grîûte zusammenhÑngende Speicherblock alloziert und in den ersten
256 Byte eine Basepage angelegt. FÅr den Parameter (!I)env(!i) gilt:
!begin_xlist !compressed [NULL]
!item [-1]
=  kein Environment anlegen.
!item [NULL]
=  Environment des Parent vererben.
!end_xlist
Jeder andere Wert ist ein Zeiger auf das zu vererbende Environment.

Unter MiNT kann dieser Mode zusammen mit (!I)mode 3(!i) dazu benutzt werden,
einen Aufruf von Pvfork ohne Blockieren des parent zu emulieren.

!item [6]
int32_t Pexec (6, 0L, PD *basepage, 0L); (!nl)

(!B)Just go, then free:(!b) Entspricht (!I)mode(!i) 4, mit dem Unterschied,
daû allozierter Speicher dem gestarteten Prozess und nicht dem Starter
gehîrt, so daû der Speicher, den die Basepage belegt, automatisch
freigegeben wird, wenn das Child mit Pterm terminiert. Zusammen mit Modus 3
kann damit der gleiche Effekt erzielt werden, wie durch Modus 0. Dieser
Modus steht erst ab (!nolink [GEMDOS])-Version 0.15 zur VerfÅgung.

!item [7]
PD *Pexec (7, uint32_t prgflags, int8_t *cmdline, int8_t *env);

(!B)Create Basepage, respecting prgflags:(!b) Analog (!I)mode(!i) 5, nur
kann in (!I)prgflags(!i) die gleiche Information wie im Feld ph_prgflags des
Programm-Headers Åbergeben werden. Dieser Modus wird vom BIOS des TT
benutzt, um GEM zu starten, und steht erst ab GEMDOS Version 0.19 zur
VerfÅgung.

!item [100]
int32_t Pexec (100, int8_t *name, int8_t *cmdline, int8_t *env);

(!B)Load, go, don't wait:(!b) Analog (!I)mode(!i) 0, nur wartet der
Aufrufer nicht, bis das gestartete Programm beendet wird, d.h. die Funktion
kehrt sofort zum Parent Prozess zurÅck, wÑhrend das Child startet. Der
RÅckgabewert ist ein negativer Fehlercode oder die positive PID des Childs.

!item [101]
da dieser Modus nur MagiC-intern zum Vererben von Pfad- und Dateihandles
benutzt wird, wird auf die Angabe der genauen Syntax an dieser Stelle
verzichtet.

!item [102]
wird (!nolink [MagiC])-intern verwendet, um einen bestimmten Prozess zu entfernen. Auf
die genaue Syntax wird daher an dieser Stelle verzichtet.

!item [104]
int32_t Pexec (104, int8_t *name, PD *basepage, 0L); (!nl)

(!B)Just go, don't wait:(!b) Analog (!I)mode(!i) 4, nur wartet der Aufrufer
nicht, bis das gestartete Programm beendet wird. Es wird ein Prozess
gestartet, dessen Basepage vorher durch einen Modus von 3, 5 oder 7 gesetzt
wurde. Zu beachten ist, daû das Environment und die Basepage des Childs sich
auch im Besitz des Parents befinden (tatsÑchlich erbt der Child allen
Speicher, der sich im Besitz des Parents befindet). Der Parameter
(!I)name(!i) ist ein Zeiger auf einen String, der den Namen des neuen
Prozesses beschreibt; bei einem NULL-Wert wird der Name des Parent-Prozesses
benutzt. Die Funktion liefert einen negativen Fehlercode, oder die positive
PID des Childs zurÅck.

!item [106]
int32_t Pexec (106, int8_t *name, PD *basepage, 0L); (!nl)

(!B)Just go, don't wait, no sharing:(!b) Analog (!I)mode(!i) 104, allerdings
befinden sich Environment und Basepage des Childs (!I)nicht(!i) im Besitz
des Parents, und der Child hat keinen Zugriff auf Speicher, welcher dem
Parent-Prozess zugeteilt wurde. Beim Beenden des Childs wird dessen
Speicherplatz wieder freigegeben. In Verbindung mit Modus 3 entspricht Pexec
(106, ...) daher dem Modus 100 (wÑhrend Modus 3 gefolgt von Modus 6 einem
Aufruf von Pexec (0, ...) entspricht).
(!nl)
Wird ab MagiC 2.0 nicht mehr unterstÅtzt.

!item [107]
entspricht im wesentlichen (!I)mode(!i) 7, und wird intern von MagiC seit Version 2.10
verwendet. Auf die genaue Syntax wird daher an dieser Stelle verzichtet.

!item [108]
wird von (!nolink [MagiC]) seit Version 2.10 intern zum Starten eines Accessories verwendet.
Da die genaue Syntax offiziell nicht dokumentiert ist, sollten eigene
Programme besser auf shel_write zurÅckgreifen.

!item [200]
int32_t Pexec (200, int8_t *name, int8_t *cmdline, int8_t *env);

(!B)Replace program and go:(!b) Analog (!I)mode(!i) 100, jedoch Åberschreibt der neue
Prozess den alten vollstÑndig. Der alte Prozess behÑlt zwar seine PID und
die meisten seiner Attribute, aber sein gesamter Speicherplatz wird
freigegeben. WÑhrend Pexec (0, ...) als Unterprogrammaufruf (call...return)
angesehen werden kann, wirkt dieser Modus eher wie ein 'goto'.
!end_xlist
(!B)Hinweis:(!b) Nicht alle Modi sind unter allen Betriebssystemvarianten
verfÅgbar; deshalb sollte der RÅckgabewert der Funktion beachtet werden.
Unbekannte Modi sorgen fÅr ein Funktionsergebnis von EINVFN.

Kommandozeilen werden als String im (!I)Pascal-Format(!i) Åbergeben, d.h. im
ersten Byte befindet sich die LÑnge der Zeile (maximal 124 Zeichen).

!item [Ergebnis:]
Die Funktion liefert als Ergebnis den Abschluûcode des Child-Prozesses. Wenn
ein Overlay geladen wurde, enthÑlt das Ergebnis die Basepage des Overlays.
Bei einem negativen Resultat ist ein Fehler aufgetreten.


!item [VerfÅgbar:]
Alle GEMDOS Versionen.

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Pexec]) ~ shel_write ~
(!link [Programmflags][Die Programmflags]) ~ ARGV-Verfahren
(!ende_liste)


!begin_node Bindings fÅr Pexec
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pexec ( uint16_t mode, ... );

!item [Assembler:]
!begin_verbatim
pea       env          ; Offset 12
pea       cmdline      ; Offset  8 
pea       name         ; Offset  4 
move.w    mode,-(sp)   ; Offset  2
move.w    #75,-(sp)    ; Offset  0
trap      #1           ; GEMDOS aufrufen
lea       $10(sp),sp   ; Stack korrigieren
!end_verbatim

!item [GFA-Basic]
Adresse%=Gemdos(&H4B,W:mode%,L:name%,L:cmdline%,L:env)
(!ende_liste)
!end_node
!end_node

!endif
