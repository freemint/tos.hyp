!iflang [english]

!begin_node Psetpriority
(!begin_liste) [Availability]
!item [Name:]
ØPsetpriorityÆ - Set the current priority value for a process.

!item [Opcode:]
345 (0x0159)

!item [Syntax:]
int32_t Psetpriority ( int16_t which, int16_t who, int16_t pri );

!item [Description:]
The function Psetpriority sets the priority (!I)pri(!i) (not an increment
but an absolute value) for the processes specified by (!I)which(!i) and
(!I)who(!i). The interpretation of parameter (!I)who(!i) depends on
(!I)which(!i):

PRIO_PROCESS (0) sets the priority of process with process ID (!I)who(!i).
A (!I)who(!i) of 0 implies the process ID of the calling process.

PRIO_PGRP (1) sets the priority of the process group with process group ID
(!I)who(!i). A (!I)who(!i) of 0 implies the process group ID of the calling
process.

PRIO_USER (2) sets the priority of the process of the user with user ID
(!I)who(!i). A (!I)who(!i) of 0 implies the user ID of the calling process.

!label PRIO_MIN
!label PRIO_MAX
The (!I)pri(!i) argument is silently changed to the maximum (resp. minimum)
possible value if it is not in the range between PRIO_MIN (-20) and PRIO_MAX
(+20).

This call makes calls Pnice and Prenice obsolete.

!item [(!nolink [Return]) value:]
The function returns E_OK on success or a negative error-code otherwise. The
following error conditions are defined:

EINVAL, invalid argument for (!I)who(!i), (!I)which(!i) or (!I)pri(!i).

EACCES, the calling process is not an owner of one or more of the selected
processes; the other selected processes are still affected

EPERM, the calling process does not have privileges to change the priority
of one or more of the selected processes; this can only happen if an attempt
was made to change the priority of a process to a positive value

ESRCH, the combination of (!I)which(!i) and (!I)who(!i) does not match any
existing process.

The error condition reported is the last error condition encountered (in
other words if both EACCES and EPERM occur the return value is arbitrary).

!item [Availability:]
As of MiNT 1.15.0

!item [Group:]
Process functions

!item [See also:] (!link [Binding][Bindings for Psetpriority]) ~ Pgetpriority
(!ende_liste)


!begin_node Bindings for Psetpriority
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Psetpriority ( int16_t which, int16_t who, int16_t pri );
!item [Assembler:]
!begin_verbatim
move.w    pri,-(sp)    ; Offset 6
move.w    who,-(sp)    ; Offset 4
move.w    which,-(sp)  ; Offset 2
move.w    #345,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
addq.l    #8,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node

!else

!begin_node Psetpriority
(!begin_liste) [Beschreibung]
!item [Name:]
ØPsetpriorityÆ - sets the current priority value for a process.

!item [Gemdosnummer:]
345 (0x0159)

!item [Deklaration:]
int32_t Psetpriority ( int16_t which, int16_t who, int16_t pri );

!item [Beschreibung:]
This function  sets the priority (!I)pri(!i) (not an increment but an absolute value)
for the processes specified by (!I)which(!i) and (!I)who(!i). The interpretation
of parameter (!I)who(!i) depends on (!I)which(!i):

PRIO_PROCESS (0) sets the priority of process with process 
id (!I)who(!i). A (!I)who(!i) of 0 implies the process id of the calling process.

PRIO_PGRP (1) sets the priority of the process group with 
process group id (!I)who(!i). A (!I)who(!i) of 0 implies the process group id of
the calling process.

PRIO_USER (2) sets the priority of the process of the user 
with user id (!I)who(!i). A (!I)who(!i) of 0 implies the user 
id of the calling process.

!label PRIO_MIN
!label PRIO_MAX
The (!I)pri(!i) argument is silently changed to the maximum 
(resp. minimum) possible value if it is not in the range between 
PRIO_MIN (-20) and PRIO_MAX (+20).

This call makes calls Pnice and Prenice obsolete.

!item [Ergebnis:]
The function returns E_OK 
on success or a negative error code otherwise. The following error 
conditions are defined:

EINVAL, invalid argument for (!I)who(!i), 
(!I)which(!i) or (!I)pri(!i).

EACCES, the calling process is not an owner of one or more of 
the selected processes. The other selected processes are still affected.
EPERM, the calling process does not have privileges to change 
the priority of one or more of the selected processes. This can only 
happen if an attempt was made to change the priority of a process to a 
positive value.

ESRCH, the combination of (!I)which(!i) and 
(!I)who(!i) does not match any existing process.

The error condition reported is the last error condition encountered 
(in other words if both EACCES and EPERM occur the return 
value is arbitrary).

!item [VerfÅgbar:]
ab MiNT 1.15.0

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:] (!link [Binding][Bindings fÅr Psetpriority]) ~ Pgetpriority
(!ende_liste)


!begin_node Bindings fÅr Psetpriority
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Psetpriority ( int16_t which, int16_t who, int16_t pri );
!item [Assembler:]
!begin_verbatim
move.w    pri,-(sp)    ; Offset 6
move.w    who,-(sp)    ; Offset 4
move.w    which,-(sp)  ; Offset 2
move.w    #345,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
