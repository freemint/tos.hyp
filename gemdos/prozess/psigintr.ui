!iflang [english]


!begin_node Psigintr
(!begin_liste) [Availability]
!item [Name:]
ØPsigintrÆ - Assigns a signal to a particular exception vector.

!item [Opcode:]
318 (0x013e)

!item [Syntax:]
int32_t  Psigintr ( int16_t vec, int16_t sig );

!item [Description:]
The function Psigintr assigns a signal to a particular exception vector.
When the exception occurs, the kernel will send the signal to the process.

(!I)vec(!i) specifies the exception vector. This is the same value as
specified for Setexc() call. (!I)sig(!i) specifies the signal number that
is supposed to be delivered when an exception assigned to the vector
(!I)vec(!i) occurs. When both (!I)sig(!i) and (!I)vec(!i) are zero, all
handlers installed by your program are removed.

You should install a signal-handler prior to making this call, otherwise
your process will most probably get killed by the first occurrence of the
interrupt assigned to vec vector.(!nl)
Also notice that the function is not available on machines equipped with
68000 and 68010 processors.

This function has been totally rewritten as of MiNT version 1.15.1. However,
the only change visible to programs is that the old value of (!I)vec(!i) is
no longer returned (it had little use anyway). Also, since long stack frames
are needed, a 68020 or newer processor is required.

The handler set up by Psigintr gets removed when your process terminates.

!item [(!nolink [Return]) value:]
Returns E_OK on success, or a negative (!nolink [GEMDOS]) error code
otherwise: 

!begin_xlist !compressed [ENOSYS:]
!item [EBADARG:]
A signal or vector number was specified outside the allowed range. Only
autovectors ($60-$7c), traps ($80-$bc) and user defined interrupts
($0100-$03fc) are allowed (other interrupts already generate fixed signals).
!item [ENOMEM:]
The kernel ran out of memory while trying to allocate RAM for internal
structures needed by this call.
!item [ENXIO:]
The interrupt you want to register has no service routine
(!nolink [installed]).
!item [ENOSYS:]
The function is not available (wrong architecture).
!end_xlist

!item [Availability:]
When a 'MiNT' cookie with a version of at least 1.11 exists. As of MiNT
version 1.15.1 this call is available only on machines equipped with 68020
processor or higher.

(!red)
This function has been disabled as of FreeMiNT 1.16.
(!coloff)

!item [Group:]
Process functions

!item [See also:]
(!link [Binding] [Bindings for Psigintr]) ~ Pause ~ Pkill ~ Psigsetmask ~
Psignal ~ Signals
(!ende_liste)


!begin_node Bindings for Psigintr
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t  Psigintr ( int16_t vec, int16_t sig );

!item [Assembler:]
!begin_verbatim
move.w    sig,-(sp)    ; Offset 4
move.w    vec,-(sp)    ; Offset 2
move.w    #318,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
addq.l    #6,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Psigintr
(!begin_liste) [Beschreibung]
!item [Name:]
ØPsigintrÆ - assigns a signal to a particular exception vector.

!item [Gemdosnummer:]
318 (0x013e)

!item [Deklaration:]
int32_t  Psigintr ( int16_t vec, int16_t sig );

!item [Beschreibung:]
This function assigns a signal to a particular exception vector. When
the exception occurs, the kernel will send the signal to the process.

(!I)vec(!i) specifies the exception vector. This is the same value as
specified for Setexc() call. (!I)sig(!i) specifies the signal number that
is supposed to be delivered when an exception assigned to the vector
(!I)vec(!i) occurs. When both (!I)sig(!i) and (!I)vec(!i) are zero, all
handlers installed by your program are removed.

You should install a signal handler 
prior to making this call, otherwise your process will most probably 
get killed by the first occurrence of the interrupt assigned to 
vec vector. (!nl)
Also notice that the function is not available on machines 
equipped with 68000 and 68010 processors.

This function has been totally rewritten as of MiNT version 1.15.1. However,
the only change visible to programs is that the old value of vec is no
longer returned (it had little use anyway). Also, since long stack frames
are needed, a 68020 or newer processor is required.

The handler set up by Psigintr gets removed when your process terminates.

!item [Ergebnis:]
Returns E_OK on success, or a negative GEMDOS error code otherwise:

!begin_xlist !compressed [ENOSYS:]
!item [EBADARG:]
A signal or vector number was specified outside the allowed range. Only
autovectors ($60-$7c), traps ($80-$bc) and user defined interrupts
0100-$03fc) are allowed (other interrupts already generate fixed signals).
!item [ENOMEM:]
The kernel ran out of memory while trying to allocate RAM for internal
structures needed by this call.
!item [ENXIO:]
The interrupt you want to register has no service routine
(!nolink [installed]).
!item [ENOSYS:]
The function is not available (wrong architecture).
!end_xlist

!item [VerfÅgbar:]
When a 'MiNT' cookie with a version of at least 1.11 exists. As of MiNT
version 1.15.1 this call is available only on machines equipped with 68020
processor or newer.

(!red)
This function has been disabled as of FreeMiNT 1.16.
(!coloff)

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Psigintr]) ~ Pause ~ Pkill ~ Psigsetmask ~
Psignal ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Psigintr
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t  Psigintr ( int16_t vec, int16_t sig );

!item [Assembler:]
!begin_verbatim
move.w    sig,-(sp)    ; Offset 4
move.w    vec,-(sp)    ; Offset 2
move.w    #318,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
