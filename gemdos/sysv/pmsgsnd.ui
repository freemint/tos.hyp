!iflang [english]

!begin_node Pmsgsnd
(!begin_liste) [Availability]
!item [Name:]
(!rdouble)Send to message queue(!ldouble) - Write a message to a message queue.

!item [Opcode:]
378

!item [Syntax:]
int32_t Pmsgsnd ( int32_t msqid, const void *msgp, int32_t msgsz,
                  int32_t msgflg );

!item [Description:]
The (!nolink [GEMDOS]) routine Pmsgsnd sends a message (!I)msgp(!i) to the
message queue identified by (!I)msqid(!i). The following apply:
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [msqid]
(!nolink [Message]) queue identifier
!item [msgp]
Pointer to a msgbuf structure
!item [msgsz]
(!nolink [Size]) of message data
!item [msgflg]
If there is no space available in the message queue and (!I)msgflg(!i) is set
to IPC_NOWAIT (0x0800), the function returns an error code, otherwise the
process is blocked until the message can be sent
!end_xlist

(!B)Note:(!b) The complete documentation about (!nolink [System V IPC]) and POSIX is
available from multiple sources: IEEE, The Open Group, Unix manpages.

!item [(!nolink [Return]) value:]
E_OK if successful or a negative GEMDOS error code. The function currently
returns ENOSYS.

!item [Availability:] This function is currently not implemented.

!item [Group:]
System V IPC

!item [See also:]
(!link [Binding] [Bindings for Pmsgsnd]) ~ Pmsgctl ~ Pmsgget ~ Pmsgrcv
(!ende_liste)


!begin_node Bindings for Pmsgsnd
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pmsgsnd ( int32_t msqid, const void *msgp, int32_t msgsz,
                  int32_t msgflg );

!item [Assembler:]
!begin_verbatim
move.l    msgflg,-(sp) ; Offset 14
move.l    msgsz,-(sp)  ; Offset 10
pea       msgp         ; Offset 6
move.l    msqid,-(sp)  ; Offset 2
move.w    #378,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
lea       18(sp),sp    ; Correct stack
!end_verbatim

(!ende_liste)
!end_node
!end_node

!else

!begin_node Pmsgsnd
(!begin_liste) [Beschreibung]
!item [Name:]
(!rdouble)Send To (!nolink [Message]) Queue(!ldouble) - Write a message to a message queue.

!item [Gemdosnummer:]
378

!item [Deklaration:]
int32_t Pmsgsnd ( int32_t msqid, const void *msgp, int32_t msgsz,
                  int32_t msgflg );

!item [Beschreibung:]
The (!nolink [GEMDOS]) routine Pmsgsnd sends a message (!I)msgp(!i) to the
message queue identified by (!I)msqid(!i). The following apply:
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [msqid]
(!nolink [Message]) queue identifier
!item [msgp]
Pointer to a msgbuf structure
!item [msgsz]
(!nolink [Size]) of message data
!item [msgflg]
If there is no space available in the message queue and (!I)msgflg(!i) is set
to IPC_NOWAIT (0x0800), the function returns an error code, otherwise the
process is blocked until the message can be sent
!end_xlist

(!B)Note:(!b) The complete documentation about (!nolink [System V IPC]) and POSIX is
available from multiple sources: IEEE, The Open Group, Unix manpages.

!item [Ergebnis:]
E_OK if successful or a negative GEMDOS error code. The function currently
returns ENOSYS.

!item [Verf(!uumlaut)gbar:]
This function is currently not implemented.

!item [Gruppe:]
System V IPC

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r Pmsgsnd]) ~ Pmsgctl ~ Pmsgget ~ Pmsgrcv
(!ende_liste)


!begin_node Bindings f(!uumlaut)r Pmsgsnd
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pmsgsnd ( int32_t msqid, const void *msgp, int32_t msgsz,
                  int32_t msgflg );

!item [Assembler:]
!begin_verbatim
move.l    msgflg,-(sp) ; Offset 14
move.l    msgsz,-(sp)  ; Offset 10
pea       msgp         ; Offset 6
move.l    msqid,-(sp)  ; Offset 2
move.w    #378,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       18(sp),sp    ; Stack korrigieren
!end_verbatim

(!ende_liste)
!end_node
!end_node

!endif
