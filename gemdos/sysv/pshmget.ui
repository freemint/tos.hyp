!iflang [english]

!begin_node Pshmget
(!begin_liste) [Availability]
!item [Name:]
(!rdouble)Get shared memory segment(!ldouble) - Allocate a shared
memory segment.

!item [Opcode:]
368

!item [Syntax:]
int32_t Pshmget ( int32_t key, int32_t size, int32_t shmflg );

!item [Description:]
The (!nolink [GEMDOS]) routine Pshmget returns an identifier of an existing
shared memory segment or creates a new one. The following apply:
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [key]
Obtain the identifer of an existing segment when (!I)shmflg(!i) is zero and
(!I)key(!i) is not IPC_PRIVATE (0).
A new shared memory segment is created if (!I)key(!i) is IPC_PRIVATE, or
(!I)key(!i) is not IPC_PRIVATE, no segment (!I)key(!i) exists and IPC_CREAT
is specified in (!I)shmflg(!i).
!item [size]
If (!I)key(!i) is IPC_PRIVATE, or if (!I)key(!i) is not IPC_PRIVATE, no segment
(!I)key(!i) exists and IPC_CREAT is specified in (!I)shmflg(!i),
(!I)size(!i) specifies the requested size for the segment (this value will be
rounded up to a multiple of PAGE_SIZE). 
!item [msgflg]
If both IPC_CREAT (0x0200) and IPC_EXCL (0x0400) are specified
in (!I)shmflg(!i) and a segment (!I)key(!i) already exists, the function
returns EEXIST. The least significant 9 bits specify the permissions
(see Fchmod)
!end_xlist

(!B)Note:(!b) The complete documentation about (!nolink [System V IPC]) and
POSIX is available from multiple sources: IEEE, The Open Group, Unix manpages.

!item [(!nolink [Return]) value:]
Returns a shared memory segment identifier or a negative GEMDOS error code.
The function currently returns ENOSYS.

!item [Availability:] This function is currently not implemented.

!item [Group:]
System V IPC

!item [See also:]
(!link [Binding] [Bindings for Pshmget]) ~ Pshmat ~ Pshmctl ~ Pshmdt
(!ende_liste)


!begin_node Bindings for Pshmget
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pshmget ( int32_t key, int32_t size, int32_t shmflg );

!item [Assembler:]
!begin_verbatim
move.l    shmflg,-(sp) ; Offset 10
move.l    size,-(sp)   ; Offset 6
move.l    key,-(sp)    ; Offset 2
move.w    #368,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
lea       14(sp),sp    ; Correct stack
!end_verbatim

(!ende_liste)
!end_node
!end_node

!else

!begin_node Pshmget
(!begin_liste) [Beschreibung]
!item [Name:]
(!rdouble)Get Shared Memory Segment(!ldouble) - Allocate a shared
memory segment.

!item [Gemdosnummer:]
368

!item [Deklaration:]
int32_t Pshmget ( int32_t key, int32_t size, int32_t shmflg );

!item [Beschreibung:]
The (!nolink [GEMDOS]) routine Pshmget returns an identifier of an existing
shared memory segment or creates a new one. The following apply:
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [key]
Obtain the identifer of an existing segment when (!I)shmflg(!i) is zero and
(!I)key(!i) is not IPC_PRIVATE (0).
A new shared memory segment is created if (!I)key(!i) is IPC_PRIVATE, or
(!I)key(!i) is not IPC_PRIVATE, no segment (!I)key(!i) exists and IPC_CREAT
is specified in (!I)shmflg(!i).
!item [size]
If (!I)key(!i) is IPC_PRIVATE, or if (!I)key(!i) is not IPC_PRIVATE, no segment
(!I)key(!i) exists and IPC_CREAT is specified in (!I)shmflg(!i),
(!I)size(!i) specifies the requested size for the segment (this value will be
rounded up to a multiple of PAGE_SIZE). 
!item [msgflg]
If both IPC_CREAT (0x0200) and IPC_EXCL (0x0400) are specified
in (!I)shmflg(!i) and a segment (!I)key(!i) already exists, the function
returns EEXIST. The least significant 9 bits specify the permissions
(see Fchmod)
!end_xlist

(!B)Note:(!b) The complete documentation about (!nolink [System V IPC]) and
POSIX is available from multiple sources: IEEE, The Open Group, Unix manpages.

!item [Ergebnis:]
Returns a shared memory segment identifier or a negative GEMDOS error code.
The function currently returns ENOSYS.

!item [Verf(!uumlaut)gbar:]
This function is currently not implemented.

!item [Gruppe:]
System V IPC

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r Pshmget]) ~ Pshmat ~ Pshmctl ~ Pshmdt
(!ende_liste)


!begin_node Bindings f(!uumlaut)r Pshmget
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pshmget ( int32_t key, int32_t size, int32_t shmflg );

!item [Assembler:]
!begin_verbatim
move.l    shmflg,-(sp) ; Offset 10
move.l    size,-(sp)   ; Offset 6
move.l    key,-(sp)    ; Offset 2
move.w    #368,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       14(sp),sp    ; Stack korrigieren
!end_verbatim

(!ende_liste)
!end_node
!end_node

!endif
