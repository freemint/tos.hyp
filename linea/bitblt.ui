!iflang [english]


!begin_node Bit block transfer
!html_name linea_bitblt
(!begin_liste) [Availability]

!item [Name:]
ØBit block transferÆ

!item [(!nolink [Line-A]) number:]
$A007

!item [Syntax:]
(!link [See 'Bindings for bit_blt'] [Bindings for bit_blt])

!item [Description:]
This (!nolink [Line-A]) function copies between a rectangular source and
destination block. For this the source area can be combined with a raster.
Source and destination can be combined with one of 16 possible logical
operations. This function also serves as the basis for the (!nolink [Line-A])
functions Text block transfer and Copy raster form.

For the parameters a structure of the type BITBLT has to be filled and passed
in register A6.

The following logical combinations are available:
!begin_table [c|l|l]
Operation !! Function !!
!hline
 0 !! D' = 0         !!  Destination is background colour
 1 !! D' = S & D     !!
 2 !! D' = S & ~D    !!
 3 !! D' = S         !!
 4 !! D' = ~S & D    !!
 5 !! D' = D         !!
 6 !! D' = S ^ D     !!
 7 !! D' = S | D     !!
 8 !! D' = ~(S | D)  !!
 9 !! D' = ~(S ^ D)  !!
10 !! D' = ~D        !!
11 !! D' = S | ~D    !!
12 !! D' = ~S        !!
13 !! D' = ~S | D    !!
14 !! D' = ~ (S & D) !!
15 !! D' = 1         !! Destination is foreground colour
!end_table

D' is the destination after the combination, S and D are the source and
destination before the combination. & is the logical AND combination,
| is OR, ^ is the exclusive OR (XOR) combination, ! is a NOT inversion.

!item [(!nolink [Return]) value:]
The function does not have a return value.

!item [Availability:]
All (!nolink [TOS]) versions.

!item [See also:]
(!link [Binding] [Bindings for bit_blt]) ~
(!link [Text block transfer][Text block transfer]) ~
(!link [Copy raster form][Copy raster form])

(!ende_liste)


!begin_node Bindings for bit_blt
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void bit_blt(BITBLT *bitblt);
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Save registers
move.l    bitblt,A6          ; Address BITBLT structure
dc.w      $A007              ; Line-A opcode
movem.l   (A7)+,D0-D2/A0-A2  ; Restore registers
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Bit block transfer
!html_name linea_bitblt
(!begin_liste) [Beschreibung:]

!item [Name:]
ØBit block transferÆ

!item [(!nolink [Line-A]) Nummer:]
$A007

!item [Binding:]
(!link [Bindings fÅr bit_blt] [Bindings fÅr bit_blt])

!item [Beschreibung:]
Diese Line-A Funktion kopiert zwischen einem rechteckigen Quell- und
Zielbereich. Dabei kann der Quellbereich zusÑtzlich mit einem Raster
verknÅpft werden. Quelle und Ziel kînnen durch eine von 16 mîglichen
logischen Operationen verknÅpft werden. Diese Funktion dient auch als Basis
fÅr die Line-A Funktionen Text block transfer und Copy raster form.

FÅr die Parameter muû eine Struktur des Typs BITBLT ausgefÅllt und in
Register A6 Åbergeben werden.

Folgende logische VerknÅpfungen stehen zur VerfÅgung:
!begin_table [c|l|l]
Operation !! Funktion !!
!hline
 0 !! D' = 0         !!  Ziel ist Hintergrundfarbe
 1 !! D' = S & D     !!
 2 !! D' = S & ~D    !!
 3 !! D' = S         !!
 4 !! D' = ~S & D    !!
 5 !! D' = D         !!
 6 !! D' = S ^ D     !!
 7 !! D' = S | D     !!
 8 !! D' = ~(S | D)  !!
 9 !! D' = ~(S ^ D)  !!
10 !! D' = ~D        !!
11 !! D' = S | ~D    !!
12 !! D' = ~S        !!
13 !! D' = ~S | D    !!
14 !! D' = ~ (S & D) !!
15 !! D' = 1         !! Ziel ist Vordergrundfarbe
!end_table

D' ist das Ziel (Destination) nach der VerknÅpfung, S und D sind Quelle
(Source) und Ziel (Destination) vor der VerkÅpfung. & ist die logische UND
(AND) VerknÅpfung, | ODER (OR), ^ Exklusiv ODER (XOR) und ~ die
Invertierung.

!item [Ergebnis:]
Die Funktion liefert keinen Returnwert.

!item [VerfÅgbar:]
Alle TOS-Versionen.

!item [Querverweis:]
(!link [Binding] [Bindings fÅr bit_blt]) ~
(!link [Text block transfer][Text block transfer]) ~
(!link [Copy raster form][Copy raster form])

(!ende_liste)


!begin_node Bindings fÅr bit_blt
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void bit_blt(BITBLT *bitblt);
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Register retten
move.l    bitblt,A6          ; Adresse BITBLT Struktur
dc.w      $A007              ; Line-A Opcode
movem.l   (A7)+,D0-D2/A0-A2  ; Register restaurieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
