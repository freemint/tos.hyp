!iflang [english]


!begin_node Text block transfer
!html_name linea_textblt
(!begin_liste) [Availability]

!item [Name:]
ØText block transferÆ

!item [(!nolink [Line-A]) number:]
$A008

!item [Syntax:]
(!link [Bindings fÅr text_blt] [Bindings for text_blt])

!item [Description:]
This (!nolink [Line-A]) function outputs a single character. The source for
the character must have the same buildup as in a GDOS raster font. One can
can regard the font data as a large image, whose height corresponds to the 
character height. All characters lie close to each other in this "image".
Additionally a GDOS font contains an offset table, containing the offset for 
each character in this large image. The parameter ade_lo of the font header
contains the first ASCII character for which an image and thus also an offset 
is present. This offset is to be passed together with the font data to this
(!nolink [Line-A]) function. The Y-offset is usually 0. As (!nolink [Line-A])
does not manage the fonts itself and also does not know the font header,
corresponding  parameters for the font data have to be passed. To 
this must be added a string of other parameters for various effects such as
italic..., for instance. The following (!nolink [Line-A]) variables are used:
               
!begin_xlist !compressed [mono_status]
!item [Variable]
Meaning
!item [~]
~
!item [wrt_mode]
Writing mode, the following are possible: 

!begin_xlist [REPLACE 0] !compressed
!item [REPLACE 0]
Replace
!item [TRANS   1]
Transparent (OR)
!item [XOR     2]
Inverse (XOR)
!item [INVERS  3]
Inverse Transparent (XOR with not(LN_MASK))
!end_xlist
!item [xacc_dda]
Should be set at each call to $8000
!item [dda_inc]
Scaling factor
!item [t_sclsts]
Scaling direction, i.e. whether one is enlarging or reducing
!item [mono_status]
1 if all characters have the same width, i.e. we are dealing with a
non-proprtional font, else 0
!item [sourcex]
X-coordinate of the character in font to be output; can be obtained from the 
offset table
!item [sourcey]
Y-coordinate of the character in the font, normally 0
!item [destx]
X-coordinate of the screen position at which the character is to be output
!item [desty]
Y-coordinate of the screen position at which the character is to be output
!item [delx]
Width of the character, can also be obtained from the font header
!item [dely]
Height of the character, can also be obtained from the font header
!item [fbase]
The pointer to the font data, i.e. the 
????????????????????????????
!item [fwidth]
Width of the font image
!item [style]
Specifies the text effects; individualbits represent individual effects and 
may be combined:
!begin_xlist [Bit 0] !compressed
!item [Bit 0]
Bold
!item [Bit 1]
Light
!item [Bit 2]
Skewed ("italics")
!item [Bit 3]
Underlined (is ignored)
!item [Bit 4]
Outlined
!end_xlist
!item [litemask]
A mask for light
!item [skewmask]
A mask for skewed
!item [weight]
The width for bold
!item [r_off]
The right offset for skewed, so more or less a parameter for the "slope" of the
character
!item [l_off]
The left offset for skewed, so more or less a parameter for the "slope" of the
character
!item [scale]
1, if scaling is desired
!item [chup]
Rotation angle in 1/10 degree; however, only rotation of multiples of 90 degrees
are possible, i.e. values 0, 900, 1800, 2700
!item [text_fg]
Text colour
!item [text_bg]
Background colour
!item [scrtchp]
A buffer that should offer twice as much space as occupied by the character, so 
that (!nolink [Line-A])} can calculate the text effects
!item [scrpt2]
An index into the buffer that points to the centre of the buffer, i.e. specifies 
half of the bufer size

!item [clip]
1 if (!link [clipping][Clipping]) is desired, else 0
!item [xmn_clip]
X-coordinate of the top left corner of the (!link [clipping][Clipping]) region,
if clipping is switched on
!item [ymn_clip]
Y-coordinate of the top left corner of the (!link [clipping][Clipping]) region,
if clipping is switched on
!item [xmx_clip]
X-coordinate of the bottom right corner of the (!link [clipping][Clipping])
region, if clipping is switched on
!item [ymx_clip]
Y-coordinate of the bottom right corner of the (!link [clipping][Clipping])
region, if clipping is switched on
!end_xlist

The binding from TC passes a pointer to the font header, flags for scaling, style,
rotation vector, foreground and background colour not to the text_blt 
function, but uses the separate function set_text_blt for setting the parameters
in the (!nolink [Line-A]) parameter block. Data about the font are set automatically.

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
All (!nolink [TOS]) versions.

!item [See also:]
(!link [Binding] [Bindings for text_blt]) ~
(!link [Bit block transfer][Bit block transfer])

(!ende_liste)


!begin_node Bindings for text_blt
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void text_blt( int16_t x, int16_t y, uint8_t c );
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Save registers
move.l    pParamblk,A0       ; Pointer parameter block LINEA
move.w    wmode,(36,A0)      ; Writing mode in LINEA.wrt_mode
move.w    mode,(54,A0)       ; Clip mode in LINEA.clip
move.w    cx1,(56,A0)        ; Top left clip corner, X-coordinate in LINEA.xmn_clip
move.w    cy1,(58,A0)        ; Top left clip corner, Y-coordinate in LINEA.ymn_clip
move.w    cx2,(60,A0)        ; Bottom right clip corner, X-coordinate in LINEA.xmx_clip
move.w    cy2,(62,A0)        ; Bottom right clip corner, Y-coordinate in LINEA.ymx_clip
move.w    #$8000,(64,A0)     ; Put $8000 in xacc_dda 
move.w    dda_inc,(66,A0)    ; Scaling factor in LINEA.dda_inc
move.w    t_sclsts,(68,A0)   ; Scaling direction in LINEA.t_sclsts
move.w    mono_status,(70,A0); Proportional font in LINEA.mono_status
move.w    sourcex,(72,A0)    ; X-coordinate in font in LINEA.sourcex
move.w    sourcey,(74,A0)    ; Y-coordinate in font in LINEA.sourcey
move.w    destx,(76,A0)      ; X-destination coordinate LINEA.destx
move.w    desty,(78,A0)      ; Y-destination coordinate in LINEA.desty
move.w    delx,(80,A0)       ; Width of the character in LINEA.delx
move.w    dely,(82,A0)       ; Height of the character LINEA.dely
move.l    fbase,(84,A0)      ; Start of font data in LINEA.fbase
move.w    fwidth,(88,A0)     ; Width of the font image in LINEA.fwidth
move.w    style,(90,A0)      ; Write style in LINEA.style
move.w    litemask,(92,A0)   ; Mask for light in LINEA.litemask
move.w    skewmask,(94,A0)   ; Mask for skewed in LINEA.skewmask
move.w    weight,(96,A0)     ; Width for bold in LINEA.weight
move.w    r_off,(98,A0)      ; Skewed offset right in LINEA.r_off
move.w    l_off,(100,A0)     ; Skewed offset left in LINEA.l_off
move.w    scale,(102,A0)     ; VScaling yes/no in LINEA.scale
move.w    chup,(104,A0)      ; Rotation angle in LINEA.chup
move.w    text_fg,(106,A0)   ; Text colour LINEA.text_fg
move.l    scrtchp,(108,A0)   ; Buffer in LINEA.scrtchp
move.w    scrpt2,(112,A0)    ; Index to mid-buffer in LINEA.scrpt2
move.w    text_bg,(114,A0)   ; Background colour in LINEA.text_bg
dc.w      $A008              ; Line-A opcode
movem.l   (A7)+,D0-D2/A0-A2  ; Restore registers
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Text block transfer
!html_name linea_textblt
(!begin_liste) [Beschreibung:]

!item [Name:]
ØText block transferÆ

!item [(!nolink [Line-A]) Nummer:]
$A008

!item [Binding:]
(!link [Bindings fÅr text_blt] [Bindings fÅr text_blt])

!item [Beschreibung:]
Diese Line-A Funktion gibt ein einzelnes Zeichen aus. Die Quelle fÅr das
Zeichen muû den gleichen Aufbau wie in einem GDOS Rasterfont haben. Man
kann die Fontdaten als ein groûes Bild betrachten, dessen Hîhe der
Zeichenhîhe entspricht. SÑmtliche Zeichen stehen dicht nebeneinander in
diesem "Bild". ZusÑtzlich enthÑlt ein GDOS Font eine Offset Tabelle, in
der fÅr jedes Zeichen der Offset in diesem groûen Bild steht. Der Parameter
ade_lo des Fontheaders gibt dabei das erste ASCII Zeichen an, fÅr das ein
Image und damit auch ein Offset enthalten ist. Dieser Offset ist neben dem
Anfang der Fontdaten an diese Line-A Funktion zu Åbergeben. Der Y-Offset ist
gewîhnlich 0. Da Line-A die ZeichensÑtze nicht selbst verwaltet und auch
den Fontheader nicht kennt, mÅssen entsprechende Paramter auf die Fontdaten
Åbergeben werden. Hinzu kommen eine Reihe weiterer Paramter fÅr die diversen
Effekte wie z.B. kursiv, ... Die folgenden Line-A Variablen werden benutzt:

!begin_xlist !compressed [mono_status]
!item [Variable]
Bedeutung
!item [~]
~
!item [wrt_mode]
Schreibmodes, es sind die folgenden Modie mîglich:

!begin_xlist [REPLACE 0] !compressed
!item [REPLACE 0]
Replace
!item [TRANS   1]
Transparent (OR)
!item [XOR     2]
Inverse (XOR)
!item [INVERS  3]
Inverse Transparent (XOR mit not(LN_MASK))
!end_xlist
!item [xacc_dda]
Sollte vor jedem Aufruf auf $8000 gesetzt werden.
!item [dda_inc]
Vergrîûerungsfaktor.
!item [t_sclsts]
Vergrîûerungsrichtung, also ob Verkleinert oder Vergrîûert wird.
!item [mono_status]
1 wenn sÑmtliche Zeichen die gleiche Breite haben, es also ein
nichtproportionaler Font ist, sonst 0.
!item [sourcex]
X-Koordinate des auszugebenden Zeichens im Font und kann durch die Offset
Tabelle ermittelt werden.
!item [sourcey]
Y-Koordinate des auszugebenden Zeichens im Font, normalerweise 0.
!item [destx]
X-Koordinate der Bildschirmposition, an der das Zeichen ausgegeben werden
soll.
!item [desty]
Y-Koordinate der Bildschirmposition, an der das Zeichen ausgegeben werden
soll.
!item [delx]
Breite des Zeichens, kann ebenfalls aus dem Fontheader ermittelt werden.
!item [dely]
Hîhe des Zeichens, kann ebenfalls aus dem Fontheader ermittelt werden.
!item [fbase]
Der Zeiger auf die Fontdaten, also das "Bild" mit den einzelnen Zeichen.
!item [fwidth]
Breite des Fontimage.
!item [style]
Gibt die Texteffekte an. Einzelne Bits stehen fÅr einzelne Effekte und
kînnen kombiniert werden:

!begin_xlist [Bit 0] !compressed
!item [Bit 0]
Fettschrift
!item [Bit 1]
Helle Schrift
!item [Bit 2]
Kursivschrift
!item [Bit 3]
Unterstrichen (wird ignoriert)
!item [Bit 4]
Umrissene Schrift "outline"
!end_xlist
!item [litemask]
Eine Maske fÅr helle (light) Schrift.
!item [skewmask]
Eine Maske fÅr kursive (skew) Schrift.
!item [weight]
Die Breite bei Fettschrift (Bold).
!item [r_off]
Der rechten Offset fÅr Kursivschrift, also quasi ein Paramter fÅr die
"SchrÑgstellung" des Zeichens.
!item [l_off]
Der linke Offset fÅr Kursivschrift, also quasi ein Paramter fÅr die
"SchrÑgstellung" des Zeichens.
!item [scale]
1, wenn eine Skalierung erwÅnscht ist.
!item [chup]
Rotationswinkel in 1/10 Grad. Es sind allerdings nur Drehungen um ein
Vielfaches von 90 Grad mîglich, also die Werte 0, 900, 1800, 2700.
!item [text_fg]
Textfarbe.
!item [text_bg]
Hintergrundfarbe.
!item [scrtchp]
Ein Puffer, der doppelt soviel Platz bieten sollte, wie das Zeichen belegt,
damit (!nolink [Line-A]) die Texteffekte berechnen kann.
!item [scrpt2]
Ein Index in den Puffer, der auf die Puffermitte zeigt, also die halbe
Puffergrîûe angibt.
!item [clip]
1 wenn Clipping gewÅnscht wird, 0 sonst.
!item [xmn_clip]
X-Koordinate die linken oberen Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!item [ymn_clip]
Y-Koordinate die linken oberen Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!item [xmx_clip]
X-Koordinate der rechten unteren Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!item [ymx_clip]
Y-Koordinate der rechten unteren Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!end_xlist

Das Binding von TC Åbergibt einen Zeiger auf den Font Header, Flags fÅr
Skalierung, Stil, Rotationsvektor, Vorder- und Hintergrundfarbe nicht an
die text_blt Funktion, sondern benutzt die separate Funktion set_text_blt()
zum Setzen der Parameter in dem Line-A Paramterblock. Daten Åber den Font
werden dabei automatisch gesetzt.

!item [Ergebnis:]
Die Funktion liefert keinen Returnwert.

!item [VerfÅgbar:]
Alle TOS-Versionen.

!item [Querverweis:]
(!link [Binding] [Bindings fÅr text_blt]) ~
(!link [Bit block transfer][Bit block transfer])

(!ende_liste)


!begin_node Bindings fÅr text_blt
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void text_blt( int16_t x, int16_t y, uint8_t c );
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Register retten
move.l    pParamblk,A0       ; Zeiger Parameterblock LINEA
move.w    wmode,(36,A0)      ; Writemode in LINEA.wrt_mode
move.w    mode,(54,A0)       ; Clipmode in LINEA.clip
move.w    cx1,(56,A0)        ; linke obere Clip-Ecke, X-Koordinate in LINEA.xmn_clip
move.w    cy1,(58,A0)        ; linke obere Clip-Ecke, Y-Koordinate in LINEA.ymn_clip
move.w    cx2,(60,A0)        ; rechte untere Clip-Ecke, X-Koordinate in LINEA.xmx_clip
move.w    cy2,(62,A0)        ; rechte untere Clip-Ecke, Y-Koordinate in LINEA.ymx_clip
move.w    #$8000,(64,A0)     ; xacc_dda mit $8000 besetzen
move.w    dda_inc,(66,A0)    ; Vergrîûerungsfaktor in LINEA.dda_inc
move.w    t_sclsts,(68,A0)   ; Vergrîûerungsrichtung in LINEA.t_sclsts
move.w    mono_status,(70,A0); Proportionalschrift in LINEA.mono_status
move.w    sourcex,(72,A0)    ; X-Koordinate im Font in LINEA.sourcex
move.w    sourcey,(74,A0)    ; Y-Koordinate im Font in LINEA.sourcey
move.w    destx,(76,A0)      ; X-Zielkoordinate in LINEA.destx
move.w    desty,(78,A0)      ; Y-Zielkoordinate in LINEA.desty
move.w    delx,(80,A0)       ; Breite des Zeichens in LINEA.delx
move.w    dely,(82,A0)       ; Hîhe des Zeichens in LINEA.dely
move.l    fbase,(84,A0)      ; Start der Font-Daten in LINEA.fbase
move.w    fwidth,(88,A0)     ; Breite des Fontimage in LINEA.fwidth
move.w    style,(90,A0)      ; Schreibstil in LINEA.style
move.w    litemask,(92,A0)   ; Maske fÅr Light in LINEA.litemask
move.w    skewmask,(94,A0)   ; Maske fÅr Kursiv in LINEA.skewmask
move.w    weight,(96,A0)     ; Breite bei Bold in LINEA.weight
move.w    r_off,(98,A0)      ; Kursiv-Offset rechts in LINEA.r_off
move.w    l_off,(100,A0)     ; Kursiv-Offset links in LINEA.l_off
move.w    scale,(102,A0)     ; Vergrîûerung ja/nein in LINEA.scale
move.w    chup,(104,A0)      ; Rotationswinkel in LINEA.chup
move.w    text_fg,(106,A0)   ; Textfarbe in LINEA.text_fg
move.l    scrtchp,(108,A0)   ; Puffer in LINEA.scrtchp
move.w    scrpt2,(112,A0)    ; Index in Puffermitte in LINEA.scrpt2
move.w    text_bg,(114,A0)   ; Hintergrundfarbe in LINEA.text_bg
dc.w      $A008              ; Line-A Opcode
movem.l   (A7)+,D0-D2/A0-A2  ; Register restaurieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
