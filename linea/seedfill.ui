!iflang [english]


!begin_node Seedfill
!html_name linea_seedfill
(!begin_liste) [Availability]

!item [Name:]
ØSeedfillÆ

!item [(!nolink [Line-A]) number:]
$A00F

!item [Syntax:]
(!link [See 'Bindings for seed_fill'] [Bindings for seed_fill])

!item [Description:]
This (!nolink [Line-A]) function fills an area with a colour, and so
corresponds to the (!nolink [VDI]) function v_contourfill.

Passed in the first word of ptsin (ptsin[0] in C) is the X-coordinate and
in the second word of ptsin (ptsin[1] in C) the Y-coordinate of the start
point. Into the first word of intin (intin[0] in C) the mode word is written.
If the mode word is greater than 0, it specifies the colour of the surround
border up to which filling is to take place. If the mode word is smaller
than 0, the surround border consists of all pixels that do not have the colour
of the start point.

The following (!nolink [Line-A]) variables are used:

!begin_xlist !compressed [fill_abort]
!item [Variable]
Meaning
!item [~]
~
!item [fill_abort]
This is the address of a function that is called at the end of each line. If
this function returns the value 0 in d0, then  the filling will be continued,
else it will be broken off.
!item [patptr]
Pointer to a field with 16-bit line patterns
!item [patmsk]
Number of line patterns - 1. Depending on the y-coordinate one pattern will be
selec!-ted now from the field of line patterns. The index of the line pattern used
can be calculated with (y mod (patmsk + 1)). By specifying several line patterns
and using multiple calls of this function for consecutive lines, it is easy to
draw complex patterns as well.
!item [multifill]
0 when the pattern has only one plane, and 1 for several planes
!item [wrt_mode]
Writing mode; the following modes are possible:

!begin_xlist [REPLACE 0] !compressed
!item [REPLACE 0]
Replace
!item [TRANS   1]
Transparent (OR)
!item [XOR     2]
Inverse (XOR)
!item [INVERS  3]
Inverse Transparent (XOR with not(LN_MASK))
!end_xlist

!item [clip]
1 if (!link [clipping][Clipping]) is desired, else 0
!item [xmn_clip]
X-coordinate of the top left corner of the (!link [clipping][Clipping]) region,
if clipping is switched on
!item [ymn_clip]
Y-coordinate of the top left corner of the (!link [clipping][Clipping]) region,
if clipping is switched on
!item [xmx_clip]
X-coordinate of the bottom right corner of the (!link [clipping][Clipping])
region, if clipping is switched on
!item [ymx_clip]
Y-coordinate of the bottom right corner of the (!link [clipping][Clipping])
region, if clipping is switched on
!end_xlist

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
All (!nolink [TOS]) versions.

!item [See also:]
(!link [Binding] [Bindings for seed_fill]) ~
v_contourfill

(!ende_liste)


!begin_node Bindings for seed_fill
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void seed_fill( void ); /* WARNING: NOT supported ! */
!item [Assembler:]
It is assumed that the intin and ptsin fields have already 
been entered in the (!nolink [Line-A]) parameter block.

!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Save registers
move.l    pParamblk,A0       ; Pointer parameter block LINEA
move.l    (8,A0),A1          ; Address intin to A1
move.w    mode_wort,(A1)     ; Mode word to intin[0]
move.l    (12,A0),A1         ; Address ptsin to A1
move.w    x,(A1)             ; X-coordinate to ptsin[0]
move.w    y,(2,A1)           ; Y-coordinate to ptsin[1]
move.w    wmode,(36,A0)      ; Writing mode in LINEA.wrt_mode
move.w    patptr,(44,A0)     ; Line pattern in LINEA.patptr
move.w    patmsk,(48,A0)     ; Number of patterns in LINEA.patmsk
move.w    multifill,(50,A0)  ; Plane flag in LINEA.multifill
move.w    mode,(54,A0)       ; Clip mode in LINEA.clip
move.w    cx1,(56,A0)        ; Top left clip corner, X-coordinate in LINEA.xmn_clip
move.w    cy1,(58,A0)        ; Top left clip corner, Y-coordinate in LINEA.ymn_clip
move.w    cx2,(60,A0)        ; Bottom right clip corner, X-coordinate in LINEA.xmx_clip
move.w    cy2,(62,A0)        ; Bottom right clip corner, Y-coordinate in LINEA.ymx_clip
move.l    fill_abort,(118,A0); Abort function to LINEA.fill_abort
dc.w      $A00F              ; Line-A opcode
movem.l   (A7)+,D0-D2/A0-A2  ; Restore registers
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Seedfill
!html_name linea_seedfill
(!begin_liste) [Beschreibung:]

!item [Name:]
ØSeedfillÆ

!item [(!nolink [Line-A]) Nummer:]
$A00F

!item [Binding:]
(!link [Bindings fÅr seed_fill] [Bindings fÅr seed_fill])

!item [Beschreibung:]
Diese Line-A Funktion fÅllt einen Bereich mit einer Farbe aus und entspricht
damit der VDI Funktion v_contourfill.

Im ersten Word von ptsin (ptsin[0] in C) wird die X-Koordinate und im
zweiten Word von ptsin (ptsin[1] in C) wird die Y-Koordinate des Startpunkts
Åbergeben. In das erste Wort von intin (intin[0] in C) wird das Mode-Wort
geschrieben. Ist das Mode-Wort grîûer 0, gibt es die Farbe der Umgrenzung
an, bis zu der gefÅllt werden soll. Ist das Mode-Wort kleiner 0, besteht
die Umgenzung aus allen Pixeln, die nicht die Farbe des Startpunkts haben.

Die folgenden Line-A Variablen werden benutzt:

!begin_xlist !compressed [fill_abort]
!item [Variable]
Bedeutung
!item [~]
~
!item [fill_abort]
Dies ist die Adresse eine Funktion, die am Ende jeder Zeile aufgerufen wird.
Liefert diese Funktion in D0 den Wert 0, wird mit dem FÅllen fortgefahren,
ansonsten abgebrochen.
!item [patptr]
Zeiger auf ein Feld mit 16 Bit Linienmustern.
!item [patmsk]
Anzahl Linienmuster - 1. In AbhÑngigkeit von der y-Koordinate wird nun aus
dem Feld mit den Linienmustern eines ausgewÑhlt. Der Index des verwendeten
Linienmusters lÑût sich durch (y mod (patmsk + 1)) berechnen. Durch die
Angabe mehrerer Linienmuster und mehrmaliges Aufrufen dieser Funktion fÅr
aufeinanderfolgende Zeilen lassen sich leicht auch komplexe Muster zeichnen.
!item [multifill]
0, wenn das Muster nur eine Ebene hat und 1 fÅr mehrere Ebenen.
!item [wrt_mode]
Schreibmodes, es sind die folgenden Modie mîglich:

!begin_xlist [REPLACE 0] !compressed
!item [REPLACE 0]
Replace
!item [TRANS   1]
Transparent (OR)
!item [XOR     2]
Inverse (XOR)
!item [INVERS  3]
Inverse Transparent (XOR mit not(LN_MASK))
!end_xlist

!item [clip]
1 wenn Clipping gewÅnscht wird, 0 sonst.
!item [xmn_clip]
X-Koordinate der linken oberen Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!item [ymn_clip]
Y-Koordinate der linken oberen Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!item [xmx_clip]
X-Koordinate der rechten unteren Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!item [ymx_clip]
Y-Koordinate der rechten unteren Ecke des Clipping Bereichs, wenn Clipping
eingeschaltet ist.
!end_xlist

!item [Ergebnis:]
Die Funktion liefert keinen Returnwert.

!item [VerfÅgbar:]
Alle TOS-Versionen.

!item [Querverweis:]
(!link [Binding] [Bindings fÅr seed_fill]) ~
v_contourfill

(!ende_liste)


!begin_node Bindings fÅr seed_fill
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void seed_fill( void ); /* WARNING: NOT supported ! */
!item [Assembler:]
Es wird angenommen, daû das intin und ptsin Feld schon in den Line-A
Parameterblock eingetragen wurde.

!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Register retten
move.l    pParamblk,A0       ; Zeiger Parameterblock LINEA
move.l    (8,A0),A1          ; Adresse intin nach A1
move.w    mode_wort,(A1)     ; Mode-Wort nach intin[0]
move.l    (12,A0),A1         ; Adresse ptsin nach A1
move.w    x,(A1)             ; X-Koordinate nach ptsin[0]
move.w    y,(2,A1)           ; Y-Koordinate nach ptsin[1]
move.w    wmode,(36,A0)      ; Writemode in LINEA.wrt_mode
move.w    patptr,(44,A0)     ; Linienmuster in LINEA.patptr
move.w    patmsk,(48,A0)     ; Anzahl Muster in LINEA.patmsk
move.w    multifill,(50,A0)  ; Ebenenflag in LINEA.multifill
move.w    mode,(54,A0)       ; Clipmode in LINEA.clip
move.w    cx1,(56,A0)        ; linke obere Clip-Ecke, X-Koordinate in LINEA.xmn_clip
move.w    cy1,(58,A0)        ; linke obere Clip-Ecke, Y-Koordinate in LINEA.ymn_clip
move.w    cx2,(60,A0)        ; rechte untere Clip-Ecke, X-Koordinate in LINEA.xmx_clip
move.w    cy2,(62,A0)        ; rechte untere Clip-Ecke, Y-Koordinate in LINEA.ymx_clip
move.l    fill_abort,(118,A0); Abbruchfunktion nach LINEA.fill_abort
dc.w      $A00F              ; Line-A Opcode
movem.l   (A7)+,D0-D2/A0-A2  ; Register restaurieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
