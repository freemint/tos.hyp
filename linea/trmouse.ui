!iflang [english]


!begin_node Transform mouse
!html_name linea_transform
(!begin_liste) [Availability]

!item [Name:]
ØTransform mouseÆ

!item [(!nolink [Line-A]) number:]
$A00B

!item [Syntax:]
(!link [See 'Bindings for transform_mouse'] [Bindings for transform_mouse])

!item [Description:]
This (!nolink [Line-A]) function sets the mouse pointer to a new shape. The
required parameters are passed via the intin field. Alternatively, the AES
structure MFORM may be used instead. For the call of the (!nolink [Line-A])
function, the intin in the (!nolink [Line-A]) parameter block is set to this
structure, and after the call the old value is restored again.

!begin_verbatim
typedef struct mfstr
{
   int16_t mf_xhot;
   int16_t mf_yhot;
   int16_t mf_nplanes;
   int16_t mf_fg;
   int16_t mf_bg;
   int16_t mf_mask[16];
   int16_t mf_data[16];
} MFORM;
!end_verbatim

!begin_xlist !compressed [mf_nplanes]
!item [Variable]
Meaning
!item [~]
~
!item [mf_xhot]
X-coordinate of the hot-spot of the mouse form; for actions performed by the
mouse it is important where this point is positioned in the mouse form
!item [mf_yhot]
Y-coordinate of the hot-spot of the mouse form; for actions performed by the
mouse it is important where this point is positioned in the mouse form
!item [mf_nplanes]
Must be set to 1, as the mouse form may only have one colour plane
!item [mf_fg]
The colour of the mask
!item [mf_bg]
The colour of the data
!item [mf_mask]
The 16 * 16 pixel-sized mask. Each 1 in the mask clears the background at that
point (or sets the background colour). This way one can prevent 'shine-through'
of the background at places where no mouse data are drawn, and to provide the
mouse pointer with a 'frame' to offset it from the background.
!item [mf_data]
The 16 * 16 pixel-sized mouse form. Each 1 in the mouse form creates one dot in the
colour mf_bg on the screen.
!end_xlist

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
All (!nolink [TOS]) versions.

!item [See also:]
(!link [Binding] [Bindings for transform_mouse]) ~
(!link [Undraw sprite][Undraw sprite]) ~ (!link [Draw sprite][Draw sprite])

(!ende_liste)


!begin_node Bindings for transform_mouse
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void transform_mouse( MFORM *mform );
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Save registers
move.l    pParamblk,A0       ; Pointer parameter block LINEA
move.l    (8,A0),-(A7)       ; Save old value of the intin field
move.l    mform,(8,A0)       ; Field with mouse form in LINEA.intin
dc.w      $A00B              ; Line-A opcode
move.l    pParamblk,A0       ; Pointer parameter block LINEA
move.l    (A7)+,(8,A0)       ; Restore old value of the intin field
movem.l   (A7)+,D0-D2/A0-A2  ; Restore registers
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Transform mouse
!html_name linea_transform
(!begin_liste) [Beschreibung:]

!item [Name:]
ØTransform mouseÆ

!item [(!nolink [Line-A]) Nummer:]
$A00B

!item [Binding:]
(!link [Bindings fÅr transform_mouse] [Bindings fÅr transform_mouse])

!item [Beschreibung:]
Diese Line-A Funktion setzt den Mauszeiger auf ein neues Erscheinungsbild.
Die nîtigen Parameter werden Åber das intin Feld Åbergeben. Alternativ kann
auch die AES Struktur MFORM benutzt werden. FÅr den Aufruf der Line-A
Funktion wird intin im Line-A Parameterblock auf diese Struktur gesetzt
und nach dem Aufruf wird der alte Wert restauriert.

!begin_verbatim
typedef struct mfstr
{
   int16_t mf_xhot;
   int16_t mf_yhot;
   int16_t mf_nplanes;
   int16_t mf_fg;
   int16_t mf_bg;
   int16_t mf_mask[16];
   int16_t mf_data[16];
} MFORM;
!end_verbatim

!begin_xlist !compressed [mf_nplanes]
!item [Variable]
Bedeutung
!item [~]
~
!item [mf_xhot]
X-Koordinate des Aktionspunkts der Mausform. FÅr die Aktion der Maus ist
maûgeblich, wo sich dieser Punkt der Mausform befindet.
!item [mf_yhot]
Y-Koordinate des Aktionspunkts der Mausform. FÅr die Aktion der Maus ist
maûgeblich, wo sich dieser Punkt der Mausform befindet.
!item [mf_nplanes]
Muû auf 1 gesetzt werden, da die Mausform nur eine Farbebene haben darf.
!item [mf_fg]
Die Farbe der Maske.
!item [mf_bg]
Die Farbe der Daten fest.
!item [mf_mask]
Die 16 * 16 Pixel groûe Maske. Jede 1 in der Maske lîscht den Hintergrund an
der Stelle (bzw. setzt die Hintergrundfarbe). Damit kann an den Stellen, an
denen keine Mausdaten gezeichnet werden, das "Druchscheinen" eines
Hintergrunds verhindern und z.B. die Maus mit einem "Rahmen" von dem
Untergrund abgesetzt werden.
!item [mf_data]
Die 16 * 16 Pixel groûe Mausform. Jede 1 in der Mausform erzeugt einen Punkt
der Farbe mf_bg auf dem Bildschirm.
!end_xlist

!item [Ergebnis:]
Die Funktion liefert keinen Returnwert.

!item [VerfÅgbar:]
Alle TOS-Versionen.

!item [Querverweis:]
(!link [Binding] [Bindings fÅr transform_mouse]) ~
(!link [Undraw sprite][Undraw sprite]) ~ (!link [Draw sprite][Draw sprite])

(!ende_liste)


!begin_node Bindings fÅr transform_mouse
!ignore_index
(!begin_liste) [Assembler]
!item [Pure-C:]
void transform_mouse( MFORM *mform );
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2,-(A7)  ; Register retten
move.l    pParamblk,A0       ; Zeiger Parameterblock LINEA
move.l    (8,A0),-(A7)       ; alten Wert des intin Feldes retten
move.l    mform,(8,A0)       ; Feld mit Mausform in LINEA.intin
dc.w      $A00B              ; Line-A Opcode
move.l    pParamblk,A0       ; Zeiger Parameterblock LINEA
move.l    (A7)+,(8,A0)       ; alten Wert des intin Feldes restaurieren
movem.l   (A7)+,D0-D2/A0-A2  ; Register restaurieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
