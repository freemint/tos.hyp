!iflang [english]


!begin_node WavePlay
(!begin_liste) [Availability]

!item [Name:]
ØWavePlayÆ - Replay a sample

!item [Opcode:]
165

!item [Syntax:]
int32_t WavePlay( int16_t flags, int32_t rate, int32_t sptr, int32_t slen );

!item [Description:]
The (!nolink [XBIOS]) routine WavePlay starts the playback of a sample using the
DMA sound system on the STe, TT030, Falcon030 or Milan.

(!I)flags(!i) is a bit-vector for the description of the sample or of the function
to be executed:

Bit 0 set: Sample is mono (!nl)
Bit 1 set: Sample is 16-bit

If bit 5 in '_SND' cookie is set:

Bit 4 set: Sample, if 16-bit, is in Intel format (!nl)
Bit 5 set: Sample is unsigned (!nl)
Bit 6 set: Sample format is as recorded by MilanBlaster

Bit 8 set: See description in Atari Compendium Vol. I,
           (!nolink [XBIOS]) pp. 4.110-4.112. It is not supported
           by the MilanBlaster XBios

(!I)rate(!i) is the sample frequency in Hz

(!I)sptr(!i) is the start address of the sample (with the MilanBlaster can
also lie in TT-RAM)

(!I)slen(!i) is the length of the sample in bytes

!item [(!nolink [Return]) value:]
If successful the function returns the value 0, the playback was then
started and can be be halted at any time with buffoper(0). The end of
the sample has been reached when buffoper(-1) bit 0 is cleared. In case
of error, -1 is returned, while if no sound was played (either because the
user had not previously assigned a sound or SAM was disabled) a 1 is returned.

!item [Availability:]
The function is available when bit 5 in the '(!link [_SND][Cookie, _SND])'
cookie is set or the 'SAM\0' cookie is present.

!item [Group:]
Sound routines

!item [See also:]
(!link [Binding] [Bindings for WavePlay])

(!ende_liste)


!begin_node Bindings for WavePlay
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t WavePlay( int16_t flags, int32_t rate, int32_t sptr, int32_t slen );
!item [Assembler:]
!begin_verbatim
move.l    slen,-(sp)   ; Offset 12
pea       sptr         ; Offset 8
move.l    rate,-(sp)   ; Offset 4
move.w    flags,-(sp)  ; Offset 2
move.w    #165,-(sp)   ; Offset 0
trap      #14          ; Call XBIOS
addq.l    #16,sp       ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node WavePlay
(!begin_liste) [Beschreibung]

!item [Name:]
ØWavePlayÆ - Abspielen eines Samples

!item [Xbiosnummer:]
165

!item [Deklaration:]
int32_t WavePlay( int16_t flags, int32_t rate, int32_t sptr, int32_t slen );

!item [Beschreibung:]
Die XBIOS-Routine WavePlay startet das abspielen eines Samples.

(!I)flags(!i) ist ein Bitvektor fÅr die Beschreibung des
Samples bzw. auszufÅhrenden Funktion:

Bit 0 gesetzt: Sample ist Mono. (!nl)
Bit 1 gesetzt: Sample ist 16Bit.

Ist Bit 5 im '(!nolink [_SND])' Cookie gesetzt.

Bit 4 gesetzt: Sample ist, wenn 16Bit, Intelformat. (!nl)
Bit 5 gesetzt: Sample ist ohne Vorzeichen. (!nl)
Bit 6 gesetzt: Sampleformat ist so wie es von MilanBlaster aufgenommen wurde.

Bit 8 gesetzt: siehe Beschreibung im Atari Compendium
               Band I, (!nolink [XBIOS]) 4.110-4.112. Wird vom MilanBlaster-XBios
               nicht unterstÅtzt.

(!I)rate(!i) ist die Samplefrequenz in Hz.

(!I)sptr(!i) ist die Startadresse des Samples. (kann bei MilanBlaster auch im
TT-Ram liegen)

(!I)slen(!i) ist die lÑnge des Samples in Byte.

!item [Ergebnis:]
Im Erfolgsfall liefert die Funktion den Wert 0, die
Wiedergabe wurde dann gestartet und kann durch
buffoper(0) jederzeit unterbrochen werden. Das Ende
des Samples wurde erreicht wenn (!nolink [buffoper])(-1) Bit 0 gelîscht ist.

!item [VerfÅgbar:]
Die Funktion ist verfÅgbar wenn Bit 5 im '(!link [_SND][Cookie, _SND])'
Cookie gesetzt oder der 'SAM\0' Cookie vorhanden ist.

!item [Gruppe:]
Soundroutinen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr WavePlay])

(!ende_liste)


!begin_node Bindings fÅr WavePlay
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t WavePlay( int16_t flags, int32_t rate, int32_t sptr, int32_t slen );
!item [Assembler:]
!begin_verbatim
move.l    slen,-(sp)   ; Offset 12
pea       sptr         ; Offset 8
move.l    rate,-(sp)   ; Offset 4
move.w    flags,-(sp)  ; Offset 2
move.w    #165,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #16,sp       ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
