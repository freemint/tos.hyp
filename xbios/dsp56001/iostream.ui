!iflang [english]


!begin_node Dsp_IOStream
(!begin_liste) [Availability]

!item [Name:]
ØDsp_IOStreamÆ - Data transfer from and to DSP via two
interrupts

!item [Opcode:]
101

!item [Syntax:]
void Dsp_IOStream( int8_t *data_in, int8_t *data_out, int32_t block_insize,
                   int32_t block_outsize, int32_t num_blocks,
                   int32_t *blocks_done );

!item [Description:]
The function sends and receives simultaneously via DSP
interrupt handling (!I)num_blocks(!i) data blocks with
a size of (!I)block_insize(!i) or (!I)block_outsize(!i) DSP-words
from/to the DSP. The sent data is taken from the
buffer (!I)data_in(!i), the received data is stored in the
buffer (!I)data_out.(!i) For each interrupt one block is
sent and one received (except for the first and last
interrupt). At the same time the counter (!I)blocks_done(!i),
which keeps track of the number of blocks transferred,
will be incremented. As the data is transferred via an
interrupt, the function does not have to wait. Via
(!I)blocks_done(!i) the program can then determine whether
the transfer has been completed.

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
The function is available only on computers with the
DSP-56001 signal processor.

!item [Group:]
DSP programming

!item [See also:]
(!link [Binding] [Bindings for Dsp_IOStream]) ~ Dsp_DoBlock ~
Dsp_BlkUnpacked ~ Dsp_BlkHandShake ~ Dsp_BlkWords ~ Dsp_BlkBytes ~
Dsp_InStream ~ Dsp_OutStream ~ Dsp_GetWordSize ~ Dsp_SetVectors ~
Dsp_RemoveInterrupts ~ Dsp_MultBlocks

(!ende_liste)


!begin_node Bindings for Dsp_IOStream
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

void Dsp_IOStream( int8_t *data_in, int8_t *data_out, int32_t block_insize,
                   int32_t block_outsize, int32_t num_blocks,
                   int32_t *blocks_done );
!item [Assembler:]
!begin_verbatim
pea       blocks_done          ; Offset 22
move.l    num_blocks,-(sp)     ; Offset 18
move.l    block_outsize,-(sp)  ; Offset 14
move.l    block_insize,-(sp)   ; Offset 10
pea       data_out             ; Offset  6
pea       data_in              ; Offset  2
move.w    #101,-(sp)           ; Offset  0
trap      #14                  ; Call XBIOS
lea       $1A(sp),sp           ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Dsp_IOStream
(!begin_liste) [Beschreibung]

!item [Name:]
ØDsp_IOStreamÆ - Datentransfer vom und zum DSP via Interrupt

!item [Xbiosnummer:]
101

!item [Deklaration:]
void Dsp_IOStream( int8_t *data_in, int8_t *data_out, int32_t block_insize,
                   int32_t block_outsize, int32_t num_blocks,
                   int32_t *blocks_done );

!item [Beschreibung:]
Die Funktion sendet und empfÑngt gleichzeitig mittels
DSP-Interruptbehandlung (!I)num_blocks(!i) Datenblîcke mit einer Grîûe von
(!I)block_insize(!i) bzw. (!I)block_outsize(!i) DSP-Worten vom DSP. Die
gesendeten Daten werden dem Puffer (!I)data_in(!i) entnommen, die
empfangenen Daten werden im Puffer (!I)data_out(!i) abgelegt. Bei jedem
Interrupt wird ein Block gesendet und einer empfangen (eine Ausnahme bilden
der erste und der letzte Interrupt). Gleichzeitig wird der ZÑhler
(!I)blocks_done(!i), der die Anzahl der Åbertragenen Blîcke wiedergibt,
inkrementiert. Da die Daten per Interrupt Åbertragen werden, muû die
Funktion nicht warten. öber (!I)blocks_done(!i) kann das Programm im
weiteren Verlauf feststellen, ob die öbertragung beendet ist.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.

!item [VerfÅgbar:]
Die Funktion ist nur auf Computern mit dem Signalprozessor DSP56001
verfÅgbar.

!item [Gruppe:]
DSP-Programmierung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Dsp_IOStream]) ~ Dsp_DoBlock ~
Dsp_BlkUnpacked ~ Dsp_BlkHandShake ~ Dsp_BlkWords ~ Dsp_BlkBytes ~
Dsp_InStream ~ Dsp_OutStream ~ Dsp_GetWordSize ~ Dsp_SetVectors ~
Dsp_RemoveInterrupts ~ Dsp_MultBlocks

(!ende_liste)


!begin_node Bindings fÅr Dsp_IOStream
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

void Dsp_IOStream( int8_t *data_in, int8_t *data_out, int32_t block_insize,
                   int32_t block_outsize, int32_t num_blocks,
                   int32_t *blocks_done );
!item [Assembler:]
!begin_verbatim
pea       blocks_done          ; Offset 22
move.l    num_blocks,-(sp)     ; Offset 18
move.l    block_outsize,-(sp)  ; Offset 14
move.l    block_insize,-(sp)   ; Offset 10
pea       data_out             ; Offset  6
pea       data_in              ; Offset  2
move.w    #101,-(sp)           ; Offset  0
trap      #14                  ; XBIOS aufrufen
lea       $1A(sp),sp           ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
