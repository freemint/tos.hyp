!iflang [english]


!begin_node Dsp_LoadProg
(!begin_liste) [Availability]

!item [Name:]
ØDsp_LoadProgÆ - Load and execute DSP program

!item [Opcode:]
108

!item [Syntax:]
int16_t Dsp_LoadProg( int8_t *file, int16_t ability, int8_t *buffer );

!item [Description:]
The function Dsp_LoadProg loads the DSP program with
the name (!I)file(!i) from disk. The program must be in the
.LOD format and must not exceed the memory space
reserved by Dsp_Reserve. The parameter (!I)ability(!i)
identifies the program. (!I)buffer(!i) points to a memory
block where the DSP can place the binary code it
generates for the time being. The size of the memory
block can be calculated with the formula:
!begin_verbatim
DSP-wordsize *
( Number of program and data words in the LOD file +
( DSP-wordsize * Number of blocks in the .LOD file ))
!end_verbatim
After this the program will be executed.

!item [(!nolink [Return]) value:]
The function returns the value 0 if successful, or
-1 in case of error.

!item [Availability:]
The function is available only on computers with the
DSP-56001 signal processor.

!item [Group:]
DSP programming

!item [See also:]
(!link [Binding] [Bindings for Dsp_LoadProg]) ~ Dsp_Lock ~ Dsp_Unlock ~
Dsp_Available ~ Dsp_Reserve ~ Dsp_ExecProg ~ Dsp_ExecBoot ~ Dsp_LodToBinary

(!ende_liste)


!begin_node Bindings for Dsp_LoadProg
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int16_t Dsp_LoadProg( int8_t *file, int16_t ability, int8_t *buffer );
!item [Assembler:]
!begin_verbatim
pea       buffer         ; Offset 8
move.w    ability,-(sp)  ; Offset 6
pea       file           ; Offset 2
move.w    #108,-(sp)     ; Offset 0
trap      #14            ; Call XBIOS
lea       $C(sp),sp      ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Dsp_LoadProg
(!begin_liste) [Beschreibung]

!item [Name:]
ØDsp_LoadProgÆ - DSP Programm laden und starten

!item [Xbiosnummer:]
108

!item [Deklaration:]
int16_t Dsp_LoadProg( int8_t *file, int16_t ability, int8_t *buffer );

!item [Beschreibung:]
Die Funktion Dsp_LoadProg lÑdt das DSP-Programm mit dem Namen
(!I)file(!i). Das Programm muû im .LOD-Format vorliegen und darf den
durch Dsp_Reserve reservierten Speicher nicht Åberschreiten. Der Parameter
(!I)ability(!i) identifiziert das Programm. (!I)buffer(!i) zeigt auf einen
Speicherbereich, in dem das generierte Programm zwischengespeichert werden
kann. Die Grîûe des Speicherbereichs berechnet sich nach der Formel
!begin_verbatim
DSP-Wortgrîûe * 
( Anzahl der Programm- und Datenworte in der .LOD-Datei +
( DSP-Wortgrîûe * Anzahl der Blîcke in der .LOD-Datei ))
!end_verbatim
Danach wird das Programm ausgefÅhrt.

!item [Ergebnis:]
Die Funktion liefert im positiven Fall den Wert 0, und im Fehlerfall den
Wert -1 zurÅck.

!item [VerfÅgbar:]
Die Funktion ist nur auf Computern mit dem Signalprozessor DSP56001
verfÅgbar.

!item [Gruppe:]
DSP-Programmierung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Dsp_LoadProg]) ~ Dsp_Lock ~ Dsp_Unlock ~
Dsp_Available ~ Dsp_Reserve ~ Dsp_ExecProg ~ Dsp_ExecBoot ~ Dsp_LodToBinary

(!ende_liste)


!begin_node Bindings fÅr Dsp_LoadProg
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int16_t Dsp_LoadProg( int8_t *file, int16_t ability, int8_t *buffer );
!item [Assembler:]
!begin_verbatim
pea       buffer         ; Offset 8
move.w    ability,-(sp)  ; Offset 6
pea       file           ; Offset 2
move.w    #108,-(sp)     ; Offset 0
trap      #14            ; XBIOS aufrufen
lea       $C(sp),sp      ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
