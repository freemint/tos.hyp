!iflang [english]


!begin_node NVMaccess
(!begin_liste) [Availability]

!item [Name:]
ØNVMacessÆ - Configure the "(!B)N(!b)on-(!B)V(!b)olatile (!B)M(!b)emory" of
             the real-time clock.

!item [Opcode:]
46

!item [Syntax:]
int16_t NVMaccess( int16_t op, int16_t start, int16_t count, int8_t *buffer );

!item [Description:]
The (!nolink [XBIOS]) routine NVMaccess permits the configuration
of the NVM of the real-time clock. This has available
50 bytes of non-volatile RAM, where the last two bytes
are used as a checksum. The following apply:
!begin_table [l|l]
Parameter !! Meaning
!hline
op !! 0 = Read out NVM and check the checksum.
~  !! 1 = Write to NVM, check the checksum
~  !! ~~~~and reset it
~  !! 2 = Initialize NVM and set checksum
~  !! ~
start !! Start-byte.
(!nolink [count]) !! Number of bytes to transfer.
buffer !! Buffer from or to which to write.
!end_table

!item [(!nolink [Return]) value:]
The function returns the value 0 if no error has
occurred. A value of -5 means that the arguments
were not within the permitted region. A return value
of -12 identifies an inconsistent checksum.

!item [Availability:]
Atari TT ((!nolink [TOS]) 3.xx) and Falcon ((!nolink [TOS]) 4.xx)

!item [Group:]
Date, Time and Timer

!item [See also:]
(!link [Binding] [Bindings for NVMaccess]) ~
(!link [Assignment of the NVM][Assignment of the real-time clock's NVM])

(!ende_liste)


!begin_node Bindings for NVMaccess
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int16_t NVMaccess( int16_t op, int16_t start, int16_t count, int8_t *buffer );
!item [Assembler:]
!begin_verbatim
pea       buffer       ; Offset 8
move.w    count,-(sp)  ; Offset 6
move.w    start,-(sp)  ; Offset 4
move.w    op,-(sp)     ; Offset 2
move.w    #46,-(sp)    ; Offset 0
trap      #14          ; Call XBIOS
lea       $C(sp),sp    ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node NVMaccess
(!begin_liste) [Beschreibung]

!item [Name:]
ØNVMacessÆ - Konfiguration des "non volatile memory" der Echtzeituhr.

!item [Xbiosnummer:]
46

!item [Deklaration:]
int16_t NVMaccess( int16_t op, int16_t start, int16_t count, int8_t *buffer );

!item [Beschreibung:]
Die (!nolink [XBIOS])-Routine NVMaccess ermîglicht die Konfiguration des NVM der
Echtzeituhr. Diese verfÅgt Åber 50 Bytes nicht-flÅchtiges RAM, wobei die
letzten zwei Bytes als PrÅfsumme verwendet werden. Es gilt:
!begin_table [l|l]
Parameter !! Bedeutung
!hline
op !! 0 = NVM auslesen und PrÅfsumme checken
~  !! 1 = NVM beschreiben, PrÅfsumme checken
~  !! ~~~~und neu setzen
~  !! 2 = NVM initialisieren und PrÅfsumme setzen
~  !! ~
start !! Startbyte
(!nolink [count]) !! Anzahl der zu Åbertragenden Bytes
buffer !! Puffer aus bzw. in den geschrieben wird
!end_table

!item [Ergebnis:]
Die Funktion liefert den Wert 0, wenn kein Fehler aufgetreten ist. Ein Wert
von -5 bedeutet, daû die Argumente nicht im erlaubten Bereich waren. Ein
RÅckgabewert von -12 kennzeichnet eine nicht konsistente PrÅfsumme.

!item [VerfÅgbar:]
Atari TT ((!nolink [TOS]) 3.xx) und Falcon ((!nolink [TOS]) 4.xx)

!item [Gruppe:]
Datum, Uhrzeit und Zeitgeber

!item [Querverweis]
(!link [Binding] [Bindings fÅr NVMaccess]) ~
(!link [Belegung des NVM][Die Belegung des NVM der Echtzeit-Uhr])

(!ende_liste)


!begin_node Bindings fÅr NVMaccess
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int16_t NVMaccess( int16_t op, int16_t start, int16_t count, int8_t *buffer );
!item [Assembler:]
!begin_verbatim
pea       buffer       ; Offset 8
move.w    count,-(sp)  ; Offset 6
move.w    start,-(sp)  ; Offset 4
move.w    op,-(sp)     ; Offset 2
move.w    #46,-(sp)    ; Offset 0
trap      #14          ; XBIOS aufrufen
lea       $C(sp),sp    ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
