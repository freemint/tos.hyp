!iflang [english]


!begin_node Flopwr
(!begin_liste) [Availability]

!item [Name:]
ØFloppy writeÆ - Write individual sectors on a floppy disk.

!item [Opcode:]
9

!item [Syntax:]
int16_t Flopwr( VOID *buf, int32_t filler, int16_t devno, int16_t sectno,
                int16_t trackno, int16_t sideno, int16_t count );

!item [Description:]
The (!nolink [XBIOS]) routine Flopwr writes one or more physical 
sectors to a floppy disk. The following apply:
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [buf]
Pointer to memory block to be used as a buffer for the sectors to be written
!item [filler]
Unused
!item [devno]
Drive (0 = Drive A: etc.)
!item [sectno]
Start sector (normally between 1 and 9)
!item [trackno]
Track number (normally between 0 and 79)
!item [sideno]
Side of the floppy disk (0 or 1)
!item [count]
Number of sectors to be written
!end_xlist

!item [(!nolink [Return]) value:]
The function returns 0 if the operation was successful
or a non-zero error-code if not.
               
!item [Availability:]
All (!nolink [TOS]) versions.

!item [Group:]
Drive functions

!item [See also:]
(!link [Binding] [Bindings for Flopwr]) ~ DMAread ~ DMAwrite ~ Floprd

(!ende_liste)


!begin_node Bindings for Flopwr
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int16_t Flopwr( VOID *buf, int32_t filler, int16_t devno, int16_t sectno,
                int16_t trackno, int16_t sideno, int16_t count );
!item [Assembler:]
!begin_verbatim
move.w    count,-(sp)    ; Offset 18
move.w    sideno,-(sp)   ; Offset 16
move.w    trackno,-(sp)  ; Offset 14
move.w    sectno,-(sp)   ; Offset 12
move.w    devno,-(sp)    ; Offset 10
move.l    filler,-(sp)   ; Offset  6
pea       buf            ; Offset  2
move.w    #9,-(sp)       ; Offset  0
trap      #14            ; Call XBIOS
lea       $14(sp),sp     ; Correct stack
!end_verbatim

!item [GFA-Basic]
Fehler%=Xbios(9,L:buf%,L:filler%,W:devno%,W:sectno%,W:trackno%,W:sideno,W:count%)

(!ende_liste)
!end_node
!end_node


!else


!begin_node Flopwr
(!begin_liste) [Beschreibung]

!item [Name:]
ØFloppy writeÆ - schreibt einzelne Sektoren auf eine Platteneinheit.

!item [Xbiosnummer:]
9

!item [Deklaration:]
int16_t Flopwr( VOID *buf, int32_t filler, int16_t devno, int16_t sectno,
                int16_t trackno, int16_t sideno, int16_t count );

!item [Beschreibung:]
Die XBIOS-Routine Flopwr schreibt einen oder mehrere physikalische Sektoren
auf eine Diskette. Es gilt:
!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [buf]
Zeiger auf Speicherbereich mit den zu schreibenden Sektoren
!item [filler]
unbenutzt
!item [devno]
Laufwerk (0=Laufwerk-A, 1=Laufwerk-B)
!item [sectno]
Startsektor (normal zwischen 1 und 9)
!item [trackno]
Tracknummer (normal zwischen 0 und 79)
!item [sideno]
Seite der Diskette (0 oder 1)
!item [count]
Anzahl der zu schreibenden Sektoren
!end_xlist

!item [Ergebnis:]
Die Funktion liefert als Ergebnis eine 0, wenn kein Fehler passiert ist,
ansonsten einen Fehlercode.

!item [VerfÅgbar:]
Alle (!nolink [TOS]) Versionen.

!item [Gruppe:]
Laufwerksfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Flopwr]) ~ DMAread ~ DMAwrite ~ Floprd

(!ende_liste)


!begin_node Bindings fÅr Flopwr
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int16_t Flopwr( VOID *buf, int32_t filler, int16_t devno, int16_t sectno,
                int16_t trackno, int16_t sideno, int16_t count );
!item [Assembler:]
!begin_verbatim
move.w    count,-(sp)    ; Offset 18
move.w    sideno,-(sp)   ; Offset 16
move.w    trackno,-(sp)  ; Offset 14
move.w    sectno,-(sp)   ; Offset 12
move.w    devno,-(sp)    ; Offset 10
move.l    filler,-(sp)   ; Offset  6
pea       buf            ; Offset  2
move.w    #9,-(sp)       ; Offset  0
trap      #14            ; XBIOS aufrufen
lea       $14(sp),sp     ; Stack korrigieren
!end_verbatim

!item [GFA-Basic]
Fehler%=Xbios(9,L:buf%,L:filler%,W:devno%,W:sectno%,W:trackno%,W:sideno,W:count%)

(!ende_liste)
!end_node
!end_node


!endif
