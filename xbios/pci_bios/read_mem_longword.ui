!iflang [english]

!begin_node read_mem_longword
#!html_name read_mem_longword

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Read memory longword(!ldouble)

!item [Opcode:]
321

!item [Syntax:]
int32_t read_mem_longword (int32_t handle, uint32_t offset, uint32_t *address);

!item [Description:]
This function reads 32-bit values from a memory region and take care of the byte
ordering - ie. the data and address are converted as if Motorola byte ordering
was in use. A driver can use this function for access to registers and small
buffers. For larger amounts of data, the driver can choose to use his own copy
routines, provided it knows the byte order in use.

!begin_ilist [address]
!item [handle]
Device handle

!item [offset]
Address to access (in PCI memory address space)

!item [address]
Pointer to data in memory

!end_ilist

!item [(!nolink [Return]) value:]
(!link [PCI-BIOS Error codes][PCI-BIOS Error codes]). If successful, read data
at buffer pointed to by (!I)address(!i).

!item [Availability:]
PCI-(!nolink [BIOS])

!item [Group:]
PCI-BIOS

!item [See also:]
(!link [Binding] [Bindings for read_mem_longword]) ~
read_mem_byte ~ fast_read_mem_byte ~
read_mem_word ~ fast_read_mem_word ~
fast_read_mem_longword

(!ende_liste)


!begin_node Bindings for read_mem_longword
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t read_mem_longword (int32_t handle, uint32_t offset, uint32_t *address);
!item [Assembler:]
!begin_verbatim
pea       address       ; Offset 10
move.l    offset,-(sp)  ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #321,-(sp)    ; Offset 0
trap      #14           ; Call XBIOS
lea       14(sp),sp     ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node read_mem_longword
#!html_name read_mem_longword

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Read memory longword(!ldouble)

!item [Xbiosnummer:]
321

!item [Deklaration:]
int32_t read_mem_longword (int32_t handle, uint32_t offset, uint32_t *address);

!item [Beschreibung:]
This function reads 32-bit values from a memory region and take care of the byte
ordering - ie. the data and address are converted as if Motorola byte ordering
was in use. A driver can use this function for access to registers and small
buffers. For larger amounts of data, the driver can choose to use his own copy
routines, provided it knows the byte order in use.

!begin_ilist [address]
!item [handle]
Device handle

!item [offset]
Address to access (in PCI memory address space)

!item [address]
Pointer to data in memory

!end_ilist

!item [Ergebnis:]
PCI-BIOS Fehlercodes. If successful, read data at buffer pointed to by
(!I)address(!i).

!item [Verf(!uumlaut)gbar:]
PCI-(!nolink [BIOS])

!item [Gruppe:]
PCI-BIOS

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r read_mem_longword]) ~
read_mem_byte ~ fast_read_mem_byte ~
read_mem_word ~ fast_read_mem_word ~
fast_read_mem_longword

(!ende_liste)


!begin_node Bindings f(!uumlaut)r read_mem_longword
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t read_mem_longword (int32_t handle, uint32_t offset, uint32_t *address);
!item [Assembler:]
!begin_verbatim
pea       address       ; Offset 10
move.l    offset,-(sp)  ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #321,-(sp)    ; Offset 0
trap      #14           ; XBIOS aufrufen
lea       14(sp),sp     ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
