!iflang [english]

!begin_node phys_to_virt
#!html_name phys_to_virt

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Physical to virtual(!ldouble) - Convert physical CPU to virtual address

!item [Opcode:]
342

!item [Syntax:]
int32_t phys_to_virt (uint32_t address, uint32_t *pointer);

!item [Description:]
This function converts from physical CPU addresses to virtual addresses. This
is necessary since the memory may be mapped non-linear by the PMMU even when
not using virtual memory (it is on the MILAN).

It does not depend on a special device, thus it does not get a device handle.

This function might be limited to (!nolink [TOS]) or (!nolink [TOS])-like operating systems. If an
operating system uses a different memory layout, it may need to provide its
own functions which drivers can use.

When using this function, the driver does not need to care about DMA offsets at
all.

!begin_xlist [address]
!item [address]
Physical CPU address

!item [pointer]
Pointer to mem-struct for results

!end_xlist

(!B)Note:(!b) This function is the reverse of virt_to_phys. It might be slow,
so the driver should avoid using it if it can determine the address by other
means.

!item [(!nolink [Return]) value:]
(!link [PCI-BIOS Error codes][PCI-BIOS Error codes]). If successful,
mem-struct is filled as follows:
!begin_xlist [uint32_t] !compressed
!item [uint32_t] CPU (virtual) address
!item [uint32_t] length of contiguous mapped area
!end_xlist

!item [Availability:]
PCI-(!nolink [BIOS])

!item [Group:]
PCI-BIOS

!item [See also:]
(!link [Binding] [Bindings for phys_to_virt]) ~
bus_to_virt ~ get_pagesize ~
virt_to_bus ~ virt_to_phys

(!ende_liste)


!begin_node Bindings for phys_to_virt
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t phys_to_virt (uint32_t address, uint32_t *pointer);
!item [Assembler:]
!begin_verbatim
pea       pointer       ; Offset 6
move.l    address,-(sp) ; Offset 2
move.w    #342,-(sp)    ; Offset 0
trap      #14           ; Call XBIOS
lea       10(sp),sp     ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node phys_to_virt
#!html_name phys_to_virt

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Physical To Virtual(!ldouble) - Convert physical CPU to virtual address

!item [Xbiosnummer:]
342

!item [Deklaration:]
int32_t phys_to_virt (uint32_t address, uint32_t *pointer);

!item [Beschreibung:]
This function converts from physical CPU addresses to virtual addresses. This
is necessary since the memory may be mapped non-linear by the PMMU even when
not using virtual memory (it is on the MILAN).

It does not depend on a special device, thus it does not get a device handle.

This function might be limited to (!nolink [TOS]) or (!nolink [TOS])-like operating systems. If an
operating system uses a different memory layout, it may need to provide its
own functions which drivers can use.

When using this function, the driver does not need to care about DMA offsets at
all.

!begin_xlist [address]
!item [address]
Physical CPU address

!item [pointer]
Pointer to mem-struct for results

!end_xlist

(!B)Note:(!b) This function is the reverse of virt_to_phys. It might be slow,
so the driver should avoid using it if it can determine the address by other
means.

!item [Ergebnis:]
PCI-BIOS Fehlercodes. If successful, mem-struct is filled as follows:
!begin_xlist [uint32_t] !compressed
!item [uint32_t] CPU (virtual) address
!item [uint32_t] length of contiguous mapped area
!end_xlist

!item [Verf(!uumlaut)gbar:]
PCI-(!nolink [BIOS])

!item [Gruppe:]
PCI-BIOS

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r phys_to_virt]) ~
bus_to_virt ~ get_pagesize ~
virt_to_bus ~ virt_to_phys

(!ende_liste)


!begin_node Bindings f(!uumlaut)r phys_to_virt
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t phys_to_virt (uint32_t address, uint32_t *pointer);
!item [Assembler:]
!begin_verbatim
pea       pointer       ; Offset 6
move.l    address,-(sp) ; Offset 2
move.w    #342,-(sp)    ; Offset 0
trap      #14           ; XBIOS aufrufen
lea       10(sp),sp     ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
