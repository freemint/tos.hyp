!iflang [english]

!begin_node get_card_used
#!html_name get_card_used

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Get card used flag(!ldouble)

!item [Opcode:]
317

!item [Syntax:]
int32_t get_card_used (int32_t handle, uint32_t *address);

!item [Description:]
This function is used to manage which card is in use by which driver. A driver
can provide a means by which a call-back function can be called from another
driver to deactivate this driver. This is necessary for the first driver to
unhook from interrupt chains etc., before the new driver can take over.

The returned status is either 0 (the card is free), 1 (the card is in use),
2 (the card is in use, but the driver can be uninstalled) or 3 (the card is in
use, but can be taken over without further actions).

Case 3 means that the driver which brought the card to this state may not hook
into interrupt chains or other system resources which need to be unhooked when
another driver takes over the card.

If the return code is 2, the call-back function entry of the driver is returned
in the memory pointer to by (!I)address(!i).

!begin_xlist [address]
!item [handle]
Device handle

!item [address]
Pointer to longword where call-back address is stored

!end_xlist

(!B)Call-back handlers:(!b) Call-back functions are invoked by calling the
call-back entry point, they return with RTS. Call-back functions may only
modify those registers which are used to pass arguments or results.
Call-back functions must be called in supervisor mode with at least 1024
bytes stack available. The call-back function number is passed in D0.L. If the
driver supports call-back functions, the following functions are mandatory:
!begin_xlist !compressed [Try to remove driver (1)]
!item [Call-back]
Description
!item [Get Driver ID (0)]
call_back0: (!nl)
Input: D0.L = call-back function number, ie. 0 (!nl)
Output: D0.L = driver ID (same as the driver's XBRA ID)
!item [Try to remove driver (1)]
call_back1: (!nl)
Input: D0.L = call-back function number, ie. 1 (!nl)
Output: D0.L = result code: 0=success (card is free), 1=can't uninstall
!end_xlist

!item [(!nolink [Return]) value:]
(!link [PCI-BIOS Error codes][PCI-BIOS Error codes])

!item [Availability:]
PCI-(!nolink [BIOS])

!item [Group:]
PCI-BIOS

!item [See also:]
(!link [Binding] [Bindings for get_card_used]) ~
set_card_used

(!ende_liste)


!begin_node Bindings for get_card_used
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t get_card_used (int32_t handle, uint32_t *address);
!item [Assembler:]
!begin_verbatim
pea       address       ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #317,-(sp)    ; Offset 0
trap      #14           ; Call XBIOS
lea       10(sp),sp     ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node get_card_used
#!html_name get_card_used

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Get card used flag(!ldouble)

!item [Xbiosnummer:]
317

!item [Deklaration:]
int32_t get_card_used (int32_t handle, uint32_t *address);

!item [Beschreibung:]
This function is used to manage which card is in use by which driver. A driver
can provide a means by which a call-back function can be called from another
driver to deactivate this driver. This is necessary for the first driver to
unhook from interrupt chains etc., before the new driver can take over.

The returned status is either 0 (the card is free), 1 (the card is in use),
2 (the card is in use, but the driver can be uninstalled) or 3 (the card is in
use, but can be taken over without further actions).

Case 3 means that the driver which brought the card to this state may not hook
into interrupt chains or other system resources which need to be unhooked when
another driver takes over the card.

If the return code is 2, the call-back function entry of the driver is returned
in the memory pointer to by (!I)address(!i).

!begin_xlist [address]
!item [handle]
Device handle

!item [address]
Pointer to longword where call-back address is stored

!end_xlist

(!B)Call-back handlers:(!b) Call-back functions are invoked by calling the
call-back entry point, they return with RTS. Call-back functions may only
modify those registers which are used to pass arguments or results.
Call-back functions must be called in supervisor mode with at least 1024
bytes stack available. The call-back function number is passed in D0.L. If the
driver supports call-back functions, the following functions are mandatory:
!begin_xlist !compressed [Try to remove driver (1)]
!item [Call-back]
Description
!item [Get Driver ID (0)]
call_back0: (!nl)
Input: D0.L = call-back function number, ie. 0 (!nl)
Output: D0.L = driver ID (same as the driver's XBRA ID)
!item [Try to remove driver (1)]
call_back1: (!nl)
Input: D0.L = call-back function number, ie. 1 (!nl)
Output: D0.L = result code: 0=success (card is free), 1=can't uninstall
!end_xlist

!item [Ergebnis:]
PCI-BIOS Fehlercodes

!item [Verf(!uumlaut)gbar:]
PCI-(!nolink [BIOS])

!item [Gruppe:]
PCI-BIOS

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r get_card_used]) ~ 
set_card_used

(!ende_liste)


!begin_node Bindings f(!uumlaut)r get_card_used
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t get_card_used (int32_t handle, uint32_t *address);
!item [Assembler:]
!begin_verbatim
pea       address       ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #317,-(sp)    ; Offset 0
trap      #14           ; XBIOS aufrufen
lea       10(sp),sp     ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
