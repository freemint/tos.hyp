!iflang [english]

!begin_node bus_to_virt
#!html_name bus_to_virt

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Bus to virtual(!ldouble) - Convert PCI bus to virtual address

!item [Opcode:]
340

!item [Syntax:]
int32_t bus_to_virt (int32_t handle, uint32_t address, uint32_t *pointer);

!item [Description:]
This function converts from PCI bus addresses to virtual addresses (as the
CPU uses them). This is necessary since the memory may be mapped non-linear by
the PMMU even when not using virtual memory (it is on the MILAN).

It is required that a resource (ie. a region of memory or IO space on a PCI
card) is mapped contiguously, so that a simple offset can be used when copying
to/from memory on a PCI card.

This function might be limited to (!nolink [TOS]) or (!nolink [TOS])-like operating systems. If an
operating system uses a different memory layout, it may need to provide its
own functions which drivers can use.

When using this function, the driver does not need to care about DMA offsets at
all.

!begin_xlist [address]
!item [handle]
Device handle

!item [address]
PCI bus address

!item [pointer]
Pointer to mem-struct for results

!end_xlist

(!B)Note:(!b) This function is the reverse of virt_to_bus. It might be slow,
so the driver should avoid using it if it can determine the address by other
means.

!item [(!nolink [Return]) value:]
(!link [PCI-BIOS Error codes][PCI-BIOS Error codes]). If successful,
mem-struct is filled as follows:
!begin_xlist [uint32_t] !compressed
!item [uint32_t] CPU (virtual) address
!item [uint32_t] length of contiguous mapped area
!end_xlist

!item [Availability:]
PCI-(!nolink [BIOS])

!item [Group:]
PCI-BIOS

!item [See also:]
(!link [Binding] [Bindings for bus_to_virt]) ~
get_pagesize ~ phys_to_virt ~
virt_to_bus ~ virt_to_phys

(!ende_liste)


!begin_node Bindings for bus_to_virt
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t bus_to_virt (int32_t handle, uint32_t address, uint32_t *pointer);
!item [Assembler:]
!begin_verbatim
pea       pointer       ; Offset 10
move.l    address,-(sp) ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #340,-(sp)    ; Offset 0
trap      #14           ; Call XBIOS
lea       14(sp),sp     ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node bus_to_virt
#!html_name bus_to_virt

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Bus To Virtual(!ldouble) - Convert PCI bus to virtual address

!item [Xbiosnummer:]
340

!item [Deklaration:]
int32_t bus_to_virt (int32_t handle, uint32_t address, uint32_t *pointer);

!item [Beschreibung:]
This function converts from PCI bus addresses to virtual addresses (as the
CPU uses them). This is necessary since the memory may be mapped non-linear by
the PMMU even when not using virtual memory (it is on the MILAN).

It is required that a resource (ie. a region of memory or IO space on a PCI
card) is mapped contiguously, so that a simple offset can be used when copying
to/from memory on a PCI card.

This function might be limited to (!nolink [TOS]) or (!nolink [TOS])-like operating systems. If an
operating system uses a different memory layout, it may need to provide its
own functions which drivers can use.

When using this function, the driver does not need to care about DMA offsets at
all.

!begin_xlist [address]
!item [handle]
Device handle

!item [address]
PCI bus address

!item [pointer]
Pointer to mem-struct for results

!end_xlist

(!B)Note:(!b) This function is the reverse of virt_to_bus. It might be slow,
so the driver should avoid using it if it can determine the address by other
means.

!item [Ergebnis:]
PCI-BIOS Fehlercodes. If successful, mem-struct is filled as follows:
!begin_xlist [uint32_t] !compressed
!item [uint32_t] CPU (virtual) address
!item [uint32_t] length of contiguous mapped area
!end_xlist

!item [Verf(!uumlaut)gbar:]
PCI-(!nolink [BIOS])

!item [Gruppe:]
PCI-BIOS

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r bus_to_virt]) ~
get_pagesize ~ phys_to_virt ~
virt_to_bus ~ virt_to_phys

(!ende_liste)


!begin_node Bindings f(!uumlaut)r bus_to_virt
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t bus_to_virt (int32_t handle, uint32_t address, uint32_t *pointer);
!item [Assembler:]
!begin_verbatim
pea       pointer       ; Offset 10
move.l    address,-(sp) ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #340,-(sp)    ; Offset 0
trap      #14           ; XBIOS aufrufen
lea       14(sp),sp     ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
