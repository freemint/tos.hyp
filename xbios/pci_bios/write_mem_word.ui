!iflang [english]

!begin_node write_mem_word
#!html_name write_mem_word

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Write memory word(!ldouble)

!item [Opcode:]
326

!item [Syntax:]
int32_t write_mem_word (int32_t handle, uint32_t offset, uint16_t val);

!item [Description:]
This function writes 16-bit values to a memory region and take care of the byte
ordering - ie. the data and address are converted as if Motorola byte ordering
was in use. A driver can use this function for access to registers and small
buffers. For larger amounts of data, the driver can choose to use his own copy
routines, provided it knows the byte order in use.


!begin_ilist [handle]
!item [handle]
Device handle

!item [offset]
Address to access (in PCI memory address space)

!item [val]
Data to write (16 bits)

!end_ilist

!item [(!nolink [Return]) value:]
PCI-BIOS Error codes

!item [Availability:]
PCI-(!nolink [BIOS])

!item [Group:]
PCI-BIOS

!item [See also:]
(!link [Binding] [Bindings for write_mem_word]) ~
write_mem_byte ~ write_mem_longword ~
read_mem_byte ~ read_mem_word ~ read_mem_longword

(!ende_liste)


!begin_node Bindings for write_mem_word
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t write_mem_word (int32_t handle, uint32_t offset, uint16_t val);
!item [Assembler:]
!begin_verbatim
move.w    val,-(sp)     ; Offset 10
move.l    offset,-(sp)  ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #326,-(sp)    ; Offset 0
trap      #14           ; Call XBIOS
lea       12(sp),sp     ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node write_mem_word
#!html_name write_mem_word

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Write Memory Word(!ldouble)

!item [Xbiosnummer:]
326

!item [Deklaration:]
int32_t write_mem_word (int32_t handle, uint32_t offset, uint16_t val);

!item [Beschreibung:]
This function writes 16-bit values to a memory region and take care of the byte
ordering - ie. the data and address are converted as if Motorola byte ordering
was in use. A driver can use this function for access to registers and small
buffers. For larger amounts of data, the driver can choose to use his own copy
routines, provided it knows the byte order in use.

!begin_ilist [handle]
!item [handle]
Device handle

!item [offset]
Address to access (in PCI memory address space)

!item [val]
Data to write (16 bits)

!end_ilist

!item [Ergebnis:]
PCI-BIOS Fehlercodes

!item [Verf(!uumlaut)gbar:]
PCI-(!nolink [BIOS])

!item [Gruppe:]
PCI-BIOS

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r write_mem_word]) ~
write_mem_byte ~ write_mem_longword ~
read_mem_byte ~ read_mem_word ~ read_mem_longword

(!ende_liste)


!begin_node Bindings f(!uumlaut)r write_mem_word
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t write_mem_word (int32_t handle, uint32_t offset, uint16_t val);
!item [Assembler:]
!begin_verbatim
move.w    val,-(sp)     ; Offset 10
move.l    offset,-(sp)  ; Offset 6
move.l    handle,-(sp)  ; Offset 2
move.w    #326,-(sp)    ; Offset 0
trap      #14           ; XBIOS aufrufen
lea       12(sp),sp     ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
