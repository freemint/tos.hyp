!iflang [english]


!begin_node VSetscreen
(!begin_liste) [Availability]

!item [Name:]
Øset screenÆ - initializes the screen.

!item [Opcode:]
5

!item [Syntax:]
void VSetscreen( void *laddr, void *paddr, int16_t rez, int16_t mode );

!item [Description:]
The (!nolink [XBIOS]) routine VsetScreen corresponds to the 
Setscreen function with an additional parameter, and 
serves for altering the current screen resolution and 
screen memory addresses.
!begin_table [l|l]
Parameter !! Meaning
!hline
laddr !! Address of the logical screen memory 
paddr !! Address of the physical screen memory 
rez !! 0 = ST Low 
~~~ !! 1 = ST Medium
~~~ !! 2 = ST High 
~~~ !! 3 = Resolution used, from (!I)mode(!i) 
mode !! modecode (see VsetMode) 
!end_table
A value of -1 here means that the corresponding  
address or resolution will not be altered.

(!B)Note:(!b) One should always check whether possible 
changes were really performed successfully. 
During resolution changes the (!link [VT52 emulator][VT-52 terminal]) is 
automatically initialized.

The additional parameter (!I)mode(!i) is only available if the 
cookie '(!link [_VDO][Cookie, _VDO])' has the value 0x00030000 or greater.

For the (!nolink [TOS]) of the Milan there is an additional 
function for (!link [Setscreen][Setscreen, Milan]), entsprechendes gilt
auch fÅr den (!link [ct60][Setscreen, ct60]).
##West##

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
The function is only available on computers of the Falcon series.

!item [Group:]
Screen functions

!item [See also:]
(!link [Binding] [Bindings for VSetscreen])

(!ende_liste)

!begin_node Bindings for VSetscreen
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

void VSetscreen( void *laddr, void *paddr, int16_t rez, int16_t mode );
!item [Assembler:]
!begin_verbatim
move.w    mode,-(sp)   ; Offset 12
move.w    rez,-(sp)    ; Offset 10
move.l    paddr,-(sp)  ; Offset  6
move.l    laddr,-(sp)  ; Offset  2
move.w    #5,-(sp)     ; Offset  0
trap      #14          ; Call XBIOS
lea       14(sp),sp    ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node VSetscreen
(!begin_liste) [Beschreibung]

!item [Name:]
Øset screenÆ - initialisiert den Bildschirm.

!item [Xbiosnummer:]
5

!item [Deklaration:]
void VSetscreen( void *laddr, void *paddr, int16_t rez, int16_t mode );

!item [Beschreibung:]
Die XBIOS-Routine VSetscreen entspricht der Funktion Setscreen allerdings
mit einem zusÑtzlichen Parameter und dient dazu, Auflîsung und
Bildschirmspeicheradressen zu verÑndern. Es gilt:
!begin_table [l|l]
Parameter !! Bedeutung
!hline
laddr !! Adresse des log. Bildschirmspeichers
paddr !! Adresse des phys. Bildschirmspeichers
rez !! 0 = ST-Niedrig
~~~ !! 1 = ST-Mittel
~~~ !! 2 = ST-Hoch
~~~ !! 3 = benutzte Auflîsung aus (!I)mode(!i)
mode !! modecode (siehe Vsetmode)
!end_table
Ein Wert von -1 bedeutet in diesem Zusammenhang, daû die entsprechende
Adresse bzw. Auflîsung nicht ver!-Ñndert wird.

(!B)Hinweis:(!b) Es sollte stets kontrolliert werden, ob eventuelle
VerÑnderungen wirklich erfolgreich aus!-gefÅhrt werden konnten. Bei einer
énderung der Auf!-lîsung wird automatisch der VT-52 Emulator
initiali!-siert.

Der zusÑtzliche Parameter (!I)mode(!i) steht nur zur VerfÅgung, wenn der
Cookie '(!link [_VDO][Cookie, _VDO])' den Wert 0x00030000 oder grîûer hat.

Beim TOS des Milans gibt es zusÑtzliche Funktionen bei
(!link [Setscreen][Setscreen, Milan]), entsprechendes gilt auch fÅr den
(!link [ct60][Setscreen, ct60]).

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Die Funktion ist nur auf Computern der Falcon-Serie verfÅgbar.

!item [Gruppe:]
Bildschirmfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr VSetscreen])

(!ende_liste)

!begin_node Bindings fÅr VSetscreen
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

void VSetscreen( void *laddr, void *paddr, int16_t rez, int16_t mode );
!item [Assembler:]
!begin_verbatim
move.w    mode,-(sp)   ; Offset 12
move.w    rez,-(sp)    ; Offset 10
move.l    paddr,-(sp)  ; Offset  6
move.l    laddr,-(sp)  ; Offset  2
move.w    #5,-(sp)     ; Offset  0
trap      #14          ; XBIOS aufrufen
lea       14(sp),sp    ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
