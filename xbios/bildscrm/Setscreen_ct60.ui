!iflang [english]

!begin_node Setscreen, ct60

(!begin_liste) [Availability]

!item [Name:]
Øset screenÆ - Initializes the screen

!item [Opcode:]
5

!item [Syntax:]
void (!nolink [Setscreen])( void *par1, void *par2, int16_t rez, int16_t command );

!item [Description:]
This (!nolink [XBIOS]) routine corresponds to the Setscreen
function with additional parameters, and serves for
altering the screen resolution and screen memory
addresses.
!begin_table [l|l]
Parameter !! Meaning
!hline
par1 !! Depending on function - see below
par2 !! Depending on function - see below
rez !! Always 0x564E ('VN' for Vsetscreen New)
command !! Command
!end_table

The following values are defined for (!I)command(!i):
!begin_description [CMD_ALLOCPAG]

!item [CMD_GETMODE (0)]
Getting current mode

int32_t mode; (!nl)
Setscreen(-1,&mode,0x564E,CMD_GETMODE);

!item [CMD_SETMODE (1)]
Set new graphic mode

int32_t mode=0x1023   /* 800*608*16 */ (!nl)
(!nolink [Setscreen])(-1,mode,0x564E,CMD_SETMODE)

This function is identical to Vsetscreen(0, 0, 3, modecode); (!nl)
BIOS and VDI will be initialised. Not the AES.

!item [CMD_GETINFO (2)]
Get screen info structure for mode
!begin_verbatim
SCREENINFO si;
/* Structure size has to be set         */
si.size = sizeof(SCREENINFO); 
/* ID of the mode or 0 for current mode */
si.devID =0x1022;             
/* status of the operation              */
si.scrFlags=0;                
Setscreen(-1,&si,0x564E,CMD_GETINFO);
if(si.scrFlags & SCRINFO_OK)
  puts("OK");
else
  puts("Error");
!end_verbatim

!item [CMD_ALLOCPAGE (3)]
Allocate screenpage
!begin_verbatim
/* Frame address or -1 */
int32_t adr=0;
Setscreen(-1,mode,0x564E,CMD_ALLOCPAGE);
if(adr)
  puts("OK");
else
  puts("Error");
!end_verbatim
This only allocates one page. A further call will only return the frame
address.

!item [CMD_FREEPAGE (4)]
Release screenpage

(!nolink [Setscreen])(-1,-1,0x564E,CMD_FREEPAGE)

The graphics card memory will be released again. If the second page had
still been active the call will switch back to the first page with Logbase
and Physbase set.

!item [CMD_FLIPPAGE (5)]
Switch to screenpage

(!nolink [Setscreen])(-1,-1,0x564E,CMD_FLIPPAGE)

Will switch to the second screenpage. Logbase and Physbase will be set.

!item [CMD_ALLOCMEM (6)]
Allocate memory on the graphics card
!begin_verbatim
SCRMEMBLK blk;

blk.size=sizeof(SCRMEMBLK);
/* alloc a block of 200 lines*/
blk.blk_y=200;

Setscreen(-1,&blk,0x564E,CMD_ALLOCMEM);
if(blk.blk_start)
  puts("OK");
else
  puts("Out of memory");
!end_verbatim
The width of the block is currently always the width of the virtual
screen. For the hardware functions this block will be like a
screen (0,0,blk_w,blk_h), the coordinates start in the top left
corner (0,0). It will be internally recalculated.

!item [CMD_FREEMEM (7)]
Release graphics card memory

(!nolink [Setscreen])(-1,&blk,0x564E,CMD_FREEMEM) (!nl)
blk of the block to be released.

!item [CMD_SETADR (8)]
Set screen to fixed address
!begin_verbatim
/* logical address or -1  */
int32_t logbase=blk.blk_start;
/* physical address or -1 */
int32_t physbase=blk.blk_start;

Setscreen(logbase,physbase,0x564E,CMD_SETADR);
!end_verbatim

!item [CMD_ENUMMODES (9)]
Requests all available modes
!begin_verbatim
int32_t cdecl enumfunc(SCREENINFO *inf,int32_t flag)
{
  printf("%s\n",inf->name);
  return ENUMMODE_CONT;
}

Setscreen(-1,&enumfunc,0x564E,CMD_ENUMMODES);
!end_verbatim
The function "enumfunc" will be called once for every available mode.
ENUMMODE_EXIT (0) will cancel CMD_ENUMMODES. ENUMMODE_CONT (1) will continue.
The parameters are handed over to the stack using the C standard.

!label CMD_TESTMODE
!item [CMD_TESTMODE (10)]
Test a graphic mode
!begin_verbatim
/* 800*600*16M */
int32_t modecode=VESA_600+HORFLAG2+VGA+COL80+BPS32;
Setscreen(-1,modecode,0x564E,CMD_TESTMODE);
!end_verbatim
Only the BIOS is initialised, and a screen test arrives
with colored wide lines.

This function not exist inside the MilanTOS.

!label CMD_COPYPAGE
!item [CMD_COPYPAGE (11)]
Copy screenpage
!begin_verbatim
Vsetscreen(-1,0,0x564E,CMD_COPYPAGE);
Copy first screenpage to second screenpage
Vsetscreen(-1,1,0x564E,CMD_COPYPAGE);
Copy second screenpage to first screenpage
!end_verbatim
This function not exist inside the MilanTOS.

!label CMD_FILLMEM
!item [CMD_FILLMEM (12)]
Fill memory on the graphics card
!begin_verbatim
SCRFILLMEMBLK blk;
blk.size=sizeof(SCRFILLMEMBLK);
blk.blk_op = BLK_COPY;
blk.blk_color = 0x112233;  /* background fill color */

Vsetscreen(-1,&blk,0x564E,CMD_SETMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim
Fill a block with a color with the GPU at (blk_x,
blk_y), size is blk_w, blk_h. (!nl)
Note that this structure has the same size and same entry
the the structure SCRMEMBLK for the entry for size,
blk_status, blk_x, blk_y, blk_y, blk_w and blk_h for use
the allocated structure with a cast.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_COPYMEM
!item [CMD_COPYMEM (13)]
Copy memory on the graphics card
!begin_verbatim
SCRCOPYMEMBLK blk;
blk.size=sizeof(SCRCOPYMEMBLK);

Vsetscreen(-1,&blk,0x564E,CMD_COPYMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim
Copy a block with the GPU at (blk_src_x, blk_src_y)
to (blk_dst_x, blk_dst_y), size is blk_w, blk_h. (!nl)
Note that this structure has the same size and same entry
the the structure SCRMEMBLK for the entry for size,
blk_status, blk_x, blk_y, blk_y, blk_w and blk_h for use
the allocated structure with a cast when blk_x is
blk_dst_x and blk_y is blk_dst_y.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_TEXTUREMEM
!item [CMD_TEXTUREMEM (14)]
Put texture in memory on the graphics card
!begin_verbatim
SCRTEXTUREMEMBLK blk;
blk.size=sizeof(SCRTEXTUREMEMBLK);

Vsetscreen(-1,&blk,0x564E,CMD_TEXTUREMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim
Copy a 65K texture from CPU local area to a 65K screen
or an ARGB texture to a 32M screen pixel format multiple
times (best results are with little source texture and
big screen for destination).

This function need a texture support inside the TOS. (!nl)
This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_GETVERSION
!item [CMD_GETVERSION (15)]
!begin_verbatim
/* if the function is not implemented, 0x0100 is the first release */
long version = 0x0100;
Vsetscreen(-1,&version,0x564E,CMD_GETVERSION);
!end_verbatim

(!nolink [Return ])  the version of the video XBIOS.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_LINEMEM
!item [CMD_LINEMEM (16)]
Draw line on the graphics card
!begin_verbatim
SCRLINEMEMBLK blk;
blk.size=sizeof(SCRLINEMEMBLK);
blk.blk_fbcolor = 0x112233;  /* foreground fill color */
blk.blk_bgcolor = 0;  /* background fill color */
blk.blk_pattern = 0xffffffff;  /* solid line */

Vsetscreen(-1,&blk,0x564E,CMD_LINEMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim

Draw a line with colors with the GPU at (blk_x1,
blk_y1) to (blk_x2, blk_y2).

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_CLIPMEM
!item [CMD_CLIPMEM (17)]
Set clipping rectangle on the graphic card
!begin_verbatim
SCRCLIPMEMBLK blk;
blk.size=sizeof(SCRCLIPMEMBLK);
blk.blk_clip_on = 1; /* clipping flag 1:on,
                                      0:off */

Vsetscreen(-1,&blk,0x564E,CMD_CLIPMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim

Enable or diable clipping rectange at (blk_x, blk_y),
size is blk_w, blk_h.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_SYNCMEM
!item [CMD_SYNCMEM (18)]
Wait an empty GPU fifo for sync the drawing engine with the memory.
!begin_verbatim
Vsetscreen(-1,-1,0x564E,CMD_SYNCMEM);
!end_verbatim
This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.

!label CMD_BLANK
!item [CMD_BLANK (19)]
Blank / unblank screen.
!begin_verbatim
int32_t blank = 1; /* (0): unblank
                      (1): blank normal
                      (2): VSYNC suspend
                      (3): HSYNC suspend
                      (4): powerdown */
Vsetscreen(-1,blank,0x564E,CMD_BLANK);
!end_verbatim

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.

!end_description

!item [(!nolink [Return]) value:]
Nothing (or current modecode in (!nolink [TOS]) mode)

!item [Availability:]
Only valid with internal (!nolink [TOS]) Radeon driver (PCI.HEX) for the
ct60 (2007-01-24).

!item [Group:]
Screen functions

!item [See Also:]
Setscreen ~ VSetscreen ~ Setscreen, Milan

(!ende_liste)

!end_node

!else

!begin_node Setscreen, ct60

(!begin_liste) [Beschreibung]

!item [Name:]
Øset screenÆ - initialisiert den Bildschirm.

!item [Xbiosnummer:]
5

!item [Deklaration:]
void (!nolink [Setscreen])( void *par1, void *par2, int16_t rez, int16_t command );

!item [Beschreibung:]
Diese (!nolink [XBIOS])-Routine entspricht der Funktion Setscreen allerdings
mit einem zusÑtzlichen Parameter und dient dazu, Auflîsung und
Bildschirmspeicheradressen zu verÑndern.
!begin_table [l|l]
Parameter !! Bedeutung
!hline
par1 !! Je nach Funktion, s.u.
par2 !! Je nach Funktion, s.u.
rez !! immer 0x564E ('VN' fÅr Vsetscreen New)
command !! Kommando
!end_table

Folgende Werte sind fÅr (!I)command(!i) definiert:
!begin_description [CMD_ALLOCPAG]

!item [CMD_GETMODE (0)]
Getting current mode

int32_t mode; (!nl)
(!nolink [Setscreen])(-1,&mode,0x564E,CMD_GETMODE);
This function is identical to VsetMode(-1);

!item [CMD_SETMODE (1)]
Set new graphic mode

int32_t mode=0x1023   /* 800*608*16 */ (!nl)
(!nolink [Setscreen])(-1,mode,0x564E,CMD_SETMODE)

This function is identical to Vsetscreen(0, 0, 3, modecode); (!nl)
BIOS and VDI will be initialised. Not the AES.

!item [CMD_GETINFO (2)]
Get screen info structure for mode
!begin_verbatim
SCREENINFO si;
/* Structure size has to be set         */
si.size = sizeof(SCREENINFO);
/* ID of the mode or 0 for current mode */
si.devID =0x1022;             
/* status of the operation              */
si.scrFlags=0;                
Setscreen(-1,&si,0x564E,CMD_GETINFO);
if(si.scrFlags & SCRINFO_OK)
  puts("OK");
else
  puts("Error");
!end_verbatim

!item [CMD_ALLOCPAGE (3)]
Allocate screenpage
!begin_verbatim
/* Frame address or -1 */
int32_t adr=0;
Setscreen(-1,mode,0x564E,CMD_ALLOCPAGE);
if(adr)
  puts("OK");
else
  puts("Error");
!end_verbatim
This only allocates one page. A further call will only return the frame
address.

!item [CMD_FREEPAGE (4)]
Release screenpage

(!nolink [Setscreen])(-1,-1,0x564E,CMD_FREEPAGE)

The graphics card memory will be released again. If the second page had
still been active the call will switch back to the first page with Logbase
and Physbase set.

!item [CMD_FLIPPAGE (5)]
Switch to screenpage

(!nolink [Setscreen])(-1,-1,0x564E,CMD_FLIPPAGE)

Will switch to the second screenpage. Logbase and Physbase will be set.

!item [CMD_ALLOCMEM (6)]
Allocate memory on the graphics card
!begin_verbatim
SCRMEMBLK blk;

blk.size=sizeof(SCRMEMBLK);
/* alloc a block of 200 lines*/
blk.blk_y=200;

Setscreen(-1,&blk,0x564E,CMD_ALLOCMEM);
if(blk.blk_start)
  puts("OK");
else
  puts("Out of memory");
!end_verbatim
The width of the block is currently always the width of the virtual
screen. For the hardware functions this block will be like a
screen (0,0,blk_w,blk_h), the coordinates start in the top left
corner (0,0). It will be internally recalculated.

!item [CMD_FREEMEM (7)]
Release graphics card memory

(!nolink [Setscreen])(-1,&blk,0x564E,CMD_FREEMEM) (!nl)
blk of the block to be released.

!item [CMD_SETADR (8)]
Set screen to fixed address
!begin_verbatim
/* logical address or -1  */
int32_t logbase=blk.blk_start;
/* physical address or -1 */
int32_t physbase=blk.blk_start;

Setscreen(logbase,physbase,0x564E,CMD_SETADR);
!end_verbatim

!item [CMD_ENUMMODES (9)]
Requests all available modes, since 13.01.2000
!begin_verbatim
int32_t cdecl enumfunc(SCREENINFO *inf,int32_t flag)
{
  printf("%s\n",inf->name);
  return ENUMMODE_CONT;
}

Setscreen(-1,&enumfunc,0x564E,CMD_ENUMMODES);
!end_verbatim
The function "enumfunc" will be called once for every available mode.
ENUMMODE_EXIT (0) will cancel CMD_ENUMMODES. ENUMMODE_CONT (1) will continue.
The parameters are handed over to the stack using the C standard.

!label CMD_TESTMODE
!item [CMD_TESTMODE (10)]
Test a graphic mode
!begin_verbatim
/* 800*600*16M */
int32_t modecode=VESA_600+HORFLAG2+VGA+COL80+BPS32;
Setscreen(-1,modecode,0x564E,CMD_TESTMODE);
!end_verbatim
Only the BIOS is initialised, and a screen test arrives
with colored wide lines.

This function not exist inside the MilanTOS.

!label CMD_COPYPAGE
!item [CMD_COPYPAGE (11)]
Copy screenpage
!begin_verbatim
Vsetscreen(-1,0,0x564E,CMD_COPYPAGE);
Copy first screenpage to second screenpage
Vsetscreen(-1,1,0x564E,CMD_COPYPAGE);
Copy second screenpage to first screenpage
!end_verbatim
This function not exist inside the MilanTOS.

!label CMD_FILLMEM
!item [CMD_FILLMEM (12)]
Fill memory on the graphics card
!begin_verbatim
SCRFILLMEMBLK blk;
blk.size=sizeof(SCRFILLMEMBLK);
blk.blk_op = BLK_COPY;
blk.blk_color = 0x112233;  /* background fill color */

Vsetscreen(-1,&blk,0x564E,CMD_SETMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim
Fill a block with a color with the GPU at (blk_x,
blk_y), size is blk_w, blk_h. (!nl)
Note that this structure has the same size and same entry
the the structure SCRMEMBLK for the entry for size,
blk_status, blk_x, blk_y, blk_y, blk_w and blk_h for use
the allocated structure with a cast.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_COPYMEM
!item [CMD_COPYMEM (13)]
Copy memory on the graphics card
!begin_verbatim
SCRCOPYMEMBLK blk;
blk.size=sizeof(SCRCOPYMEMBLK);

Vsetscreen(-1,&blk,0x564E,CMD_COPYMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim
Copy a block with the GPU at (blk_src_x, blk_src_y)
to (blk_dst_x, blk_dst_y), size is blk_w, blk_h. (!nl)
Note that this structure has the same size and same entry
the the structure SCRMEMBLK for the entry for size,
blk_status, blk_x, blk_y, blk_y, blk_w and blk_h for use
the allocated structure with a cast when blk_x is
blk_dst_x and blk_y is blk_dst_y.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_TEXTUREMEM
!item [CMD_TEXTUREMEM (14)]
Put texture in memory on the graphics card
!begin_verbatim
SCRTEXTUREMEMBLK blk;
blk.size=sizeof(SCRTEXTUREMEMBLK);

Vsetscreen(-1,&blk,0x564E,CMD_TEXTUREMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim
Copy a 65K texture from CPU local area to a 65K screen
or an ARGB texture to a 32M screen pixel format multiple
times (best results are with little source texture and
big screen for destination).

This function need a texture support inside the TOS. (!nl)
This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_GETVERSION
!item [CMD_GETVERSION (15)]
!begin_verbatim
/* if the function is not implemented, 0x0100 is the first release */
long version = 0x0100;
Vsetscreen(-1,&version,0x564E,CMD_GETVERSION);
!end_verbatim

(!nolink [Return ])  the version of the video XBIOS.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_LINEMEM
!item [CMD_LINEMEM (16)]
Draw line on the graphics card
!begin_verbatim
SCRLINEMEMBLK blk;
blk.size=sizeof(SCRLINEMEMBLK);
blk.blk_fbcolor = 0x112233;  /* foreground fill color */
blk.blk_bgcolor = 0;  /* background fill color */
blk.blk_pattern = 0xffffffff;  /* solid line */

Vsetscreen(-1,&blk,0x564E,CMD_LINEMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim

Draw a line with colors with the GPU at (blk_x1,
blk_y1) to (blk_x2, blk_y2).

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_CLIPMEM
!item [CMD_CLIPMEM (17)]
Set clipping rectangle on the graphic card
!begin_verbatim
SCRCLIPMEMBLK blk;
blk.size=sizeof(SCRCLIPMEMBLK);
blk.blk_clip_on = 1; /* clipping flag 1:on,
                                      0:off */

Vsetscreen(-1,&blk,0x564E,CMD_CLIPMEM);
if(blk.blk_status == BLK_OK)
  puts("OK");
!end_verbatim

Enable or diable clipping rectange at (blk_x, blk_y),
size is blk_w, blk_h.

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.


!label CMD_SYNCMEM
!item [CMD_SYNCMEM (18)]
Wait an empty GPU fifo for sync the drawing engine with the memory.
!begin_verbatim
Vsetscreen(-1,-1,0x564E,CMD_SYNCMEM);
!end_verbatim
This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.

!label CMD_BLANK
!item [CMD_BLANK (19)]
Blank / unblank screen.
!begin_verbatim
int32_t blank = 1; /* (0): unblank
                      (1): blank normal
                      (2): VSYNC suspend
                      (3): HSYNC suspend
                      (4): powerdown */
Vsetscreen(-1,blank,0x564E,CMD_BLANK);
!end_verbatim

This function exists since the version 0x0101 of the video XBIOS and is not
inside the MilanTOS.

!end_description

!item [Ergebnis:]
Nothing (or current modecode in (!nolink [TOS]) mode)

!item [VerfÅgbar:]
Only valid with internal (!nolink [TOS]) Radeon driver (PCI.HEX) for the
ct60 (2007-01-24).

!item [Gruppe:]
Bildschirmfunktionen

!item [Querverweis:]
Setscreen ~ VSetscreen ~ Setscreen, Milan

(!ende_liste)

!end_node

!endif
