!iflang [english]

!begin_node Setscreen, Milan

(!begin_liste) [Availability]

!item [Name:]
Øset screenÆ - Initializes the screen.

!item [Opcode:]
5

!item [Syntax:]
void (!nolink [Setscreen])( void *par1, void *par2, int16_t rez, int16_t command );

!item [Description:]
This (!nolink [XBIOS]) routine corresponds to the Setscreen
function with additional parameters, and serves for
altering the screen resolution and screen memory
addresses.
!label MI_MAGIC
!begin_table [l|l]
Parameter !! Meaning
!hline
par1 !! Depending on function - see below
par2 !! Depending on function - see below
rez !! always 0x4D49 (MI_MAGIC)
command !! Command
!end_table

The following values are defined for (!I)command(!i):
!begin_description [CMD_ALLOCPAG]

!label CMD_GETMODE
!item [CMD_GETMODE (0)]
Getting current mode

int32_t mode; (!nl)
(!nolink [Setscreen])(-1, &mode, MI_MAGIC, CMD_GETMODE);

!label CMD_SETMODE
!item [CMD_SETMODE (1)]
Set new graphic mode

int32_t mode=0x1023   /* 800*608*16 */ (!nl)
(!nolink [Setscreen])(-1, mode, MI_MAGIC, CMD_SETMODE)

BIOS and VDI will be initialised. Not the AES.

!label CMD_GETINFO
!item [CMD_GETINFO (2)]
Get screen info structure for mode
!begin_verbatim
SCREENINFO si;
/* Structure size has to be set         */
si.size = sizeof(SCREENINFO); 
/* ID of the mode or 0 for current mode */
si.devID =0x1022;             
/* status of the operation              */
si.scrFlags=0;                
Setscreen(-1, &si, MI_MAGIC, CMD_GETINFO);
if(si.scrFlags & SCRINFO_OK)
  puts("OK");
else
  puts("Error");
!end_verbatim

!label CMD_ALLOCPAGE
!item [CMD_ALLOCPAGE (3)]
Allocate 2nd screenpage
!begin_verbatim
int32_t adr=0;      /* Frame address or -1 */
Setscreen(-1, mode, MI_MAGIC, CMD_ALLOCPAGE);
if(adr)
  puts("OK");
else
  puts("Error");
!end_verbatim
This only allocates one page. A further call will only return the frame
address.

!label CMD_FREEPAGE
!item [CMD_FREEPAGE (4)]
Release 2nd screenpage

(!nolink [Setscreen])(-1, -1, MI_MAGIC, CMD_FREEPAGE)

The graphics card memory will be released again. If the second page had
still been active the call will switch back to the first page with Logbase
and Physbase set.

!label CMD_FLIPPAGE
!item [CMD_FLIPPAGE (5)]
Switch to 2nd screenpage

(!nolink [Setscreen])(-1, -1, MI_MAGIC, CMD_FLIPPAGE)

Will switch to the second screenpage. Logbase and Physbase will be set.

!label CMD_ALLOCMEM
!item [CMD_ALLOCMEM (6)]
Allocate memory on the graphics card
!begin_verbatim
SCRMEMBLK blk;

blk.size=sizeof(SCRMEMBLK);
/* alloc a block of 200 lines*/
blk.blk_y=200;

Setscreen(-1, &blk, MI_MAGIC, CMD_ALLOCMEM);
if(blk.blk_start)
  puts("OK");
else
  puts("Out of memory");
!end_verbatim
The width of the block is currently always the width of the virtual
screen. For the hardware functions this block will be like a
screen (0,0,blk_w,blk_h), the coordinates start in the top left
corner (0,0). It will be internally recalculated.

!label CMD_FREEMEM
!item [CMD_FREEMEM (7)]
Release graphics card memory

(!nolink [Setscreen])(-1, &blk, MI_MAGIC, CMD_FREEMEM) (!nl)
blk of the block to be released.

!label CMD_SETADR
!item [CMD_SETADR (8)]
Set screen to fixed address
!begin_verbatim
/* logical address or -1  */
int32_t logbase=blk.blk_start;
/* physical address or -1 */
int32_t physbase=blk.blk_start;

Setscreen(logbase, physbase, MI_MAGIC, CMD_SETADR);
!end_verbatim

!label CMD_ENUMMODES
!label ENUMMODE_EXIT
!label ENUMMODE_CONT
!item [CMD_ENUMMODES (9)]
Requests all available modes, since 13.01.2000
!begin_verbatim
int32_t cdecl enumfunc(SCREENINFO *inf,int32_t flag)
{
  printf("%s\n",inf->name);
  return ENUMMODE_CONT;
}

Setscreen(-1, &enumfunc, MI_MAGIC, CMD_ENUMMODES);
!end_verbatim
The function "enumfunc" will be called once for every available mode.
ENUMMODE_EXIT (0) will cancel CMD_ENUMMODES. ENUMMODE_CONT (1) will continue.
The parameters are handed over to the stack using the C standard.

!item [CMD_TESTMODE (10)]
This function only exist inside the ct60 with internal TOS Radeon driver.

!end_description

!item [(!nolink [Return]) value:]
Return value undefined.

!item [Availability:]
The function is available from the MilanTOS 4.08 onwards.

!item [Group:]
Screen functions

!item [See also:]
Setscreen ~ VSetscreen ~ Setscreen, ct60

(!ende_liste)

!end_node

!else

!begin_node Setscreen, Milan

(!begin_liste) [Beschreibung]

!item [Name:]
Øset screenÆ - initialisiert den Bildschirm.

!item [Xbiosnummer:]
5

!item [Deklaration:]
void (!nolink [Setscreen])( void *par1, void *par2, int16_t rez, int16_t command );

!item [Beschreibung:]
Diese (!nolink [XBIOS])-Routine entspricht der Funktion Setscreen allerdings
mit einem zusÑtzlichen Parameter und dient dazu, Auflîsung und
Bildschirmspeicheradressen zu verÑndern.
!label MI_MAGIC
!begin_table [l|l]
Parameter !! Bedeutung
!hline
par1 !! Je nach Funktion, s.u.
par2 !! Je nach Funktion, s.u.
rez !! immer 0x4D49 (MI_MAGIC)
command !! Kommando
!end_table

Folgende Werte sind fÅr (!I)command(!i) definiert:
!begin_description [CMD_ALLOCPAG]

!label CMD_GETMODE
!item [CMD_GETMODE (0)]
Getting current mode

int32_t mode; (!nl)
(!nolink [Setscreen])(-1, &mode, MI_MAGIC, CMD_GETMODE);

!label CMD_SETMODE
!item [CMD_SETMODE (1)]
Set new graphic mode

int32_t mode=0x1023   /* 800*608*16 */ (!nl)
(!nolink [Setscreen])(-1, mode, MI_MAGIC, CMD_SETMODE)

BIOS and VDI will be initialised. Not the AES.

!label CMD_GETINFO
!item [CMD_GETINFO (2)]
Get screen info structure for mode
!begin_verbatim
SCREENINFO si;
/* Structure size has to be set         */
si.size = sizeof(SCREENINFO);
/* ID of the mode or 0 for current mode */
si.devID =0x1022;             
/* status of the operation              */
si.scrFlags=0;                
Setscreen(-1, &si, MI_MAGIC, CMD_GETINFO);
if(si.scrFlags & SCRINFO_OK)
  puts("OK");
else
  puts("Error");
!end_verbatim

!label CMD_ALLOCPAGE
!item [CMD_ALLOCPAGE (3)]
Allocate 2nd screenpage
!begin_verbatim
int32_t adr=0;      /* Frame address or -1 */
Setscreen(-1, mode, MI_MAGIC, CMD_ALLOCPAGE);
if(adr)
  puts("OK");
else
  puts("Error");
!end_verbatim
This only allocates one page. A further call will only return the frame
address.

!label CMD_FREEPAGE
!item [CMD_FREEPAGE (4)]
Release 2nd screenpage

(!nolink [Setscreen])(-1, -1, MI_MAGIC, CMD_FREEPAGE)

The graphics card memory will be released again. If the second page had
still been active the call will switch back to the first page with Logbase
and Physbase set.

!label CMD_FLIPPAGE
!item [CMD_FLIPPAGE (5)]
Switch to 2nd screenpage

(!nolink [Setscreen])(-1, -1, MI_MAGIC, CMD_FLIPPAGE)

Will switch to the second screenpage. Logbase and Physbase will be set.

!label CMD_ALLOCMEM
!item [CMD_ALLOCMEM (6)]
Allocate memory on the graphics card
!begin_verbatim
SCRMEMBLK blk;

blk.size=sizeof(SCRMEMBLK);
/* alloc a block of 200 lines*/
blk.blk_y=200;

Setscreen(-1, &blk, MI_MAGIC, CMD_ALLOCMEM);
if(blk.blk_start)
  puts("OK");
else
  puts("Out of memory");
!end_verbatim
The width of the block is currently always the width of the virtual
screen. For the hardware functions this block will be like a
screen (0,0,blk_w,blk_h), the coordinates start in the top left
corner (0,0). It will be internally recalculated.

!label CMD_FREEMEM
!item [CMD_FREEMEM (7)]
Release graphics card memory

(!nolink [Setscreen])(-1, &blk, MI_MAGIC, CMD_FREEMEM) (!nl)
blk of the block to be released.

!label CMD_SETADR
!item [CMD_SETADR (8)]
Set screen to fixed address
!begin_verbatim
/* logical address or -1  */
int32_t logbase=blk.blk_start;
/* physical address or -1 */
int32_t physbase=blk.blk_start;

Setscreen(logbase, physbase, MI_MAGIC, CMD_SETADR);
!end_verbatim

!label CMD_ENUMMODES
!label ENUMMODE_EXIT
!label ENUMMODE_CONT
!item [CMD_ENUMMODES (9)]
Requests all available modes, since 13.01.2000
!begin_verbatim
int32_t cdecl enumfunc(SCREENINFO *inf,int32_t flag)
{
  printf("%s\n",inf->name);
  return ENUMMODE_CONT;
}

Setscreen(-1, &enumfunc, MI_MAGIC, CMD_ENUMMODES);
!end_verbatim
The function "enumfunc" will be called once for every available mode.
ENUMMODE_EXIT (0) will cancel CMD_ENUMMODES. ENUMMODE_CONT (1) will continue.
The parameters are handed over to the stack using the C standard.

!end_description

!item [Ergebnis:]
Return value undefined.

!item [VerfÅgbar:]
Die Funktion ist ab dem MilanTOS 4.08 verfÅgbar.

!item [Gruppe:]
Bildschirmfunktionen

!item [Querverweis:]
Setscreen ~ VSetscreen ~ Setscreen, ct60

(!ende_liste)

!end_node

!endif
