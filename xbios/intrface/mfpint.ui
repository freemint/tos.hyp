!iflang [english]


!begin_node Mfpint
(!begin_liste) [Availability]

!item [Name:]
Øinit MFP interruptÆ - Initialize the multi-function
peripheral chip interrupt.

!item [Opcode:]
13

!item [Syntax:]
void Mfpint( int16_t number, int16_t (*vector)() );

!item [Description:]
The (!nolink [XBIOS]) routine Mfpint initializes the multi-function chip
interrupt for the connected peripheral devices. This permits hardware
interrupts being intercepted. The argument (!I)vector(!i) specifies
the interrupt service routine. The parameter (!I)number(!i) gives the number
of the interrupt from 0 to 15:
!begin_table [c|l]
number !! Description
!hline
0 !! I/O port bit 0 busy parallel port
1 !! RS-232 DCD
2 !! RS-232 CTS
3 !! Blitter
4 !! Timer D, RS-232 Baud rate generator
5 !! Timer C, 200-Hz system clock
6 !! Keyboard and MIDI
7 !! FDC and DMA
8 !! Timer B horizontal blank
9 !! RS-232 transmit error
10 !! RS-232 transmit buffer empty
11 !! RS-232 receive buffer full
12 !! RS-232 buffer full
13 !! Timer A (DMA sound)
14 !! RS-232 RI
15 !! Mono (!nolink [monitor]) detect / DMA sound complete
!end_table

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
All (!nolink [TOS]) versions.

!item [Group:]
Interface programming

!item [See also:]
(!link [Binding] [Bindings for Mfpint]) ~ Jdisint ~ Jenabint

(!ende_liste)


!begin_node Bindings for Mfpint
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

void Mfpint( int16_t number, int16_t (*vector)() );
!item [Assembler:]
!begin_verbatim
pea       vector       ; Offset 4
move.w    number,-(sp) ; Offset 2
move.w    #13,-(sp)    ; Offset 0
trap      #14          ; Call XBIOS
addq.l    #8,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Mfpint
(!begin_liste) [Beschreibung]

!item [Name:]
Øinit MFP interruptÆ - Interrupt initialisieren.

!item [Xbiosnummer:]
13

!item [Deklaration:]
void Mfpint( int16_t number, int16_t (*vector)() );

!item [Beschreibung:]
Die XBIOS-Routine Mfpint initialisiert den Multifunktions-Interrupt fÅr die
angeschlossenen Peripherie-GerÑte. Damit kînnen Hardware-Interrupts
abgefangen werden. Das Argument (!I)vector(!i) gibt die
Interrupt-Service-Routine an. Im Parameter (!I)number(!i) wird die Nummer
des Interrupt von 0 bis 15 angegeben:
!begin_table [c|l]
number !! Beschreibung
!hline
0 !! I/O-Port Bit 0 Busy par. Schnittstelle
1 !! RS-232 DCD
2 !! RS-232 CTS
3 !! Blitter
4 !! Timer D, RS232-232 Baud-Generator
5 !! Timer C, 200-Hz System-Uhr
6 !! Tastatur und MIDI
7 !! FDC und DMA
8 !! Timer B ZeilenrÅcklauf
9 !! RS-232 Sendefehler
10 !! RS-232 Sendepuffer leer
11 !! RS-232 Empfangspuffer voll
12 !! RS-232 Puffer voll
13 !! Timer A
14 !! RS-232 RI
15 !! Monochrom-Monitor Detect
!end_table

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Alle (!nolink [TOS]) Versionen.

!item [Gruppe:]
Schnittstellenprogrammierung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Mfpint]) ~ Jdisint ~ Jenabint

(!ende_liste)


!begin_node Bindings fÅr Mfpint
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

void Mfpint( int16_t number, int16_t (*vector)() );
!item [Assembler:]
!begin_verbatim
pea       vector       ; Offset 4
move.w    number,-(sp) ; Offset 2
move.w    #13,-(sp)    ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
