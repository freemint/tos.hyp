!iflang [english]


!begin_node CacheCtrl
(!begin_liste) [Availability]

!item [Name:]
ØCacheCtrlÆ - CPU cache management

!item [Opcode:]
160

!item [Syntax:]
int32_t CacheCtrl( int16_t OpCode, int16_t Param );

!item [Description:]
The (!nolink [XBIOS]) routine CacheCtrl serves for the management of the CPU
cache.
!begin_table [c|l]
 OpCode  !! Description
!hline
    0    !! Return 0 to check that function is implemented
    1    !! Flush data cache
    2    !! Flush instruction cache
    3    !! Flush data and instruction cache
    4    !! Inquire data cache mode
    5    !! Activation/deactivation of the data cache
~~       !! (!I)Param(!i)= 0, switch off
~~       !! (!I)Param(!i)= 1, switch on
~~       !! Write-back of the caches if necessary
    6    !! Inquire instruction cache mode
    7    !! Activation/deactivation of the command cache
~~       !! (!I)Param(!i)= 0, switch off
~~       !! (!I)Param(!i)= 1, switch on
~~       !! Write-back of the caches if necessary
!end_table

(!B)Note:(!b) (!nl)
Under the CT60 (!nolink [XBIOS]), OpCode 5/7 has the same effect : (!nl)
(!I)Param(!i): 0 = disable all caches. (!nl)
~~~~~~ 1 = enable all caches.  (!nl)
All caches are: Data cache, store buffer, branch cache, instruction cache.

!item [(!nolink [Return]) value:]
If successful the function returns the value 0, or EBADRQ when a value larger
than seven is passed for (!I)OpCode.(!i)

As an alternative the driver "CPU Cache Control Driver v1.10" by Robert Federle
and Thomas Tempelmann is available for other computers.

!item [Availability:]
The function ist available on the Milan from (!nolink [TOS]) 4.06,
in CT60 (!nolink [XBIOS]) as of Version v0.98a.

!item [Group:]
Special commands

!item [See Also:]
(!link [Binding] [Bindings for CacheCtrl])

(!ende_liste)


!begin_node Bindings for CacheCtrl
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t CacheCtrl( int16_t OpCode, int16_t Param );
!item [Assembler:]
!begin_verbatim
move.w    Param,-(sp)  ; Offset 4
move.w    OpCode,-(sp) ; Offset 2
move.w    #160,-(sp)   ; Offset 0
trap      #14          ; Call XBIOS
addq.l    #6,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node CacheCtrl
(!begin_liste) [Beschreibung]

!item [Name:]
ØCacheCtrlÆ - CPU Cacheverwaltung

!item [Xbiosnummer:]
160

!item [Deklaration:]
int32_t CacheCtrl( int16_t OpCode, int16_t Param );

!item [Beschreibung:]
Die XBIOS-Routine CacheCtrl dient zur Verwaltung der CPU-Caches
!begin_table [c|l]
 OpCode  !! Beschreibung
!hline
    0    !! Liefert 0 zurÅck, wenn die Funktion vorhanden ist.
    1    !! ZurÅckschreiben des Datencaches
    2    !! ZurÅckschreiben des Befehlscaches
    3    !! ZurÅckschreiben des Daten- und Befehlscaches
    4    !! Abfrage, ob Datencache aktiv ist
    5    !! Aktivieren/Deaktivieren des Datencaches
~~       !! (!I)Param(!i)= 0, ausschalten
~~       !! (!I)Param(!i)= 1, einschalten
~~       !! ZurÅckschreiben des Caches falls notwendig
    6    !! Abrage, ob Befehlscache aktiv ist
    7    !! Aktivieren/Deaktivieren des Befehlscaches
~~       !! (!I)Param(!i)= 0, ausschalten
~~       !! (!I)Param(!i)= 1, einschalten
~~       !! ZurÅckschreiben des Caches falls notwendig
!end_table

(!B)Bemerkung:(!b) (!nl)
Im CT60 (!nolink [XBIOS]) hat der OpCode 5/7 dieselbe FunktionalitÑt: (!nl)
mode: 0 = deaktivieren aller Caches. (!nl)
~~~~~ 1 = aktivieren aller Caches. (!nl)
Betroffen sind die folgenden Caches: Data Cache, Store Buffer, Branch Cache,
Instruction Cache.

!item [Ergebnis:]
Im Erfolgsfall liefert die Funktion den Wert 0 oder EBADRQ, wenn fÅr
(!I)OpCode(!i) ein Wert grîûer sieben Åbergeben wird.

Als Alternative steht auch der Treiber "CPU Cache Control Driver v1.10" von
Robert Federle und Thomas Tempelmann fÅr andere Rechner zur VerfÅgung.

!item [VerfÅgbar]
Die Funktion ist auf dem Milan seit (!nolink [TOS]) 4.06 verfÅgbar. Im CT60
(!nolink [XBIOS]) ab Version v0.98a.

!item [Gruppe:]
Spezialbefehle

!item [Querverweis:]
(!link [Binding] [Bindings fÅr CacheCtrl])

(!ende_liste)


!begin_node Bindings fÅr CacheCtrl
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t CacheCtrl( int16_t OpCode, int16_t Param );
!item [Assembler:]
!begin_verbatim
move.w    Param,-(sp)  ; Offset 4
move.w    OpCode,-(sp) ; Offset 2
move.w    #160,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
