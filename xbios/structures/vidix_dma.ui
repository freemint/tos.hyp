!iflang [english]

!begin_node vidix_dma_t
!begin_verbatim
typedef struct vidix_dma_s
{
   void *src;               /* app -> driver: Virtual address of source */
   unsigned dest_offset;    /* app -> driver: Destination offset within of video memory */
   unsigned size;           /* app -> driver: Size of transaction */
#define BM_DMA_NOSYNC      0
#define BM_DMA_SYNC        1 /* wait previous dma transfer completion */
#define BM_DMA_FIXED_BUFFS 2 /* app uses buffers witch are fixed in memory */
#define BM_DMA_BLOCK       4 /* block until the transfer is complete */
   unsigned flags;          /* app -> driver */
   unsigned idx;            /* app -> driver: index of the src buffer */
   unsigned src_incr;       /* app -> driver: if src_incr & dest_incr are */
   unsigned dest_incr;      /*                different, else 0 */
   void *internal[VID_PLAY_MAXFRAMES];    /* for internal use by driver */
}vidix_dma_t;
!end_verbatim

See also: VIDIX XBIOS extension
!end_node

!else

!begin_node vidix_dma_t
!begin_verbatim
typedef struct vidix_dma_s
{
   void *src;               /* app -> driver: Virtual address of source */
   unsigned dest_offset;    /* app -> driver: Destination offset within of video memory */
   unsigned size;           /* app -> driver: Size of transaction */
#define BM_DMA_NOSYNC      0
#define BM_DMA_SYNC        1 /* wait previous dma transfer completion */
#define BM_DMA_FIXED_BUFFS 2 /* app uses buffers witch are fixed in memory */
#define BM_DMA_BLOCK       4 /* block until the transfer is complete */
   unsigned flags;          /* app -> driver */
   unsigned idx;            /* app -> driver: index of the src buffer */
   unsigned src_incr;       /* app -> driver: if src_incr & dest_incr are */
   unsigned dest_incr;      /*                different, else 0 */
   void *internal[VID_PLAY_MAXFRAMES];    /* for internal use by driver */
}vidix_dma_t;
!end_verbatim

Querverweis: VIDIX-XBIOS-Erweiterung
!end_node

!endif
